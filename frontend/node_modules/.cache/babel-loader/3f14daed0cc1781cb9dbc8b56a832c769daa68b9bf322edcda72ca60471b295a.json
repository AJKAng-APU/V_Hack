{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoDisplay.jsx\",\n  _s = $RefreshSig$();\n// Fixed VideoDisplay.jsx to ensure video displays on both sides\nimport React, { useEffect, useState } from 'react';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VideoDisplay = ({\n  remoteVideoRef,\n  localVideoRef,\n  isSpeakerOff,\n  isVideoOff,\n  doctor,\n  connectionQuality,\n  reconnectAttempt,\n  showControls,\n  isDarkMode,\n  colors,\n  children,\n  callStatus\n}) => {\n  _s();\n  var _remoteVideoRef$curre2, _remoteVideoRef$curre3;\n  // Dark mode specific colors\n  const videoOffBg = isDarkMode ? `linear-gradient(135deg, ${colors.darkBg}, #031838)` : `linear-gradient(135deg, ${colors.primaryDark}, #031838)`;\n\n  // State to track stream readiness\n  const [remoteReady, setRemoteReady] = useState(false);\n  const [remotePlaying, setRemotePlaying] = useState(false);\n  const [hasVideoTracks, setHasVideoTracks] = useState(false);\n\n  // Force display of remote stream\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      var _remoteVideoRef$curre;\n      console.log('[VideoDisplay] Setting up remote video');\n\n      // Check for video tracks\n      const checkVideoTracks = () => {\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          const tracks = remoteVideoRef.current.srcObject.getTracks();\n          const videoTracks = tracks.filter(t => t.kind === 'video');\n          console.log(`[VideoDisplay] Remote video has ${videoTracks.length} video tracks`);\n          setHasVideoTracks(videoTracks.length > 0);\n          return videoTracks.length > 0;\n        }\n        return false;\n      };\n\n      // First check\n      checkVideoTracks();\n\n      // Schedule periodic checks\n      const trackChecker = setInterval(() => {\n        checkVideoTracks();\n      }, 1000);\n\n      // Force play if possible\n      const attemptAutoplay = () => {\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          console.log('[VideoDisplay] Attempting to play remote video');\n          remoteVideoRef.current.play().then(() => {\n            console.log('[VideoDisplay] Remote video playing successfully');\n            setRemotePlaying(true);\n          }).catch(err => {\n            console.error('[VideoDisplay] Remote video autoplay failed:', err);\n\n            // Try again with muted first, then unmute\n            remoteVideoRef.current.muted = true;\n            remoteVideoRef.current.play().then(() => {\n              console.log('[VideoDisplay] Remote video playing (muted first)');\n              remoteVideoRef.current.muted = isSpeakerOff;\n              setRemotePlaying(true);\n            }).catch(e => console.error('[VideoDisplay] Remote video autoplay failed even muted:', e));\n          });\n        }\n      };\n\n      // Attempt immediately if we have tracks\n      if (((_remoteVideoRef$curre = remoteVideoRef.current.srcObject) === null || _remoteVideoRef$curre === void 0 ? void 0 : _remoteVideoRef$curre.getTracks().length) > 0) {\n        attemptAutoplay();\n      }\n\n      // Set up event listeners to detect when video becomes ready\n      const handleLoadedData = () => {\n        console.log('[VideoDisplay] Remote video loadeddata event fired');\n        setRemoteReady(true);\n        attemptAutoplay();\n        checkVideoTracks();\n      };\n      const handleCanPlay = () => {\n        console.log('[VideoDisplay] Remote video canplay event fired');\n        setRemoteReady(true);\n        attemptAutoplay();\n        checkVideoTracks();\n      };\n      remoteVideoRef.current.addEventListener('loadeddata', handleLoadedData);\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      return () => {\n        clearInterval(trackChecker);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('loadeddata', handleLoadedData);\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n        }\n      };\n    }\n  }, [remoteVideoRef.current, (_remoteVideoRef$curre2 = remoteVideoRef.current) === null || _remoteVideoRef$curre2 === void 0 ? void 0 : _remoteVideoRef$curre2.srcObject, isSpeakerOff]);\n\n  // Handle srcObject changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      console.log('[VideoDisplay] Remote video srcObject changed');\n\n      // Check for video tracks\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      const videoTracks = tracks.filter(t => t.kind === 'video');\n      console.log(`[VideoDisplay] Remote video has ${videoTracks.length} video tracks on srcObject change`);\n      setHasVideoTracks(videoTracks.length > 0);\n\n      // Set a backup timeout to ensure video plays\n      setTimeout(() => {\n        if (remoteVideoRef.current && !remotePlaying) {\n          console.log('[VideoDisplay] Backup timeout: forcing play attempt');\n          remoteVideoRef.current.play().catch(e => console.error('[VideoDisplay] Play attempt failed:', e));\n        }\n      }, 1000);\n    }\n  }, [(_remoteVideoRef$curre3 = remoteVideoRef.current) === null || _remoteVideoRef$curre3 === void 0 ? void 0 : _remoteVideoRef$curre3.srcObject, remotePlaying]);\n\n  // Use this condition to determine if we should show the actual remote video\n  const showRemoteVideo = callStatus === 'active' || hasVideoTracks || remoteReady;\n  console.log(`[VideoDisplay] Render - callStatus: ${callStatus}, hasVideoTracks: ${hasVideoTracks}, remoteReady: ${remoteReady}, showRemoteVideo: ${showRemoteVideo}`);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-black dark-mode-transition\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-full relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: remoteVideoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: isSpeakerOff,\n          className: \"w-full h-full object-cover\",\n          style: {\n            visibility: 'visible',\n            display: 'block',\n            zIndex: 10 // Ensure video is on top\n          },\n          onError: e => console.error(\"[VideoDisplay] Remote video error:\", e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), children, connectionQuality !== 'good' && reconnectAttempt > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-4 py-2 rounded-lg\",\n          style: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            backdropFilter: 'blur(4px)',\n            zIndex: 30 // Higher zIndex to show above video\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-8 h-8 rounded-full border-2 border-white border-opacity-20 border-t-white animate-spin mb-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-white font-medium\",\n              children: [\"Reconnecting\", reconnectAttempt > 1 ? ` (${reconnectAttempt})` : '', \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), (isVideoOff || !hasVideoTracks) && callStatus === 'active' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 flex items-center justify-center dark-mode-transition\",\n          style: {\n            background: isDarkMode ? colors.darkBg : '#000811',\n            zIndex: 15 // Higher than video but lower than reconnecting indicator\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-32 h-32 rounded-full overflow-hidden border-4 border-white border-opacity-20\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: (doctor === null || doctor === void 0 ? void 0 : doctor.image) || '/User_1.png',\n              alt: (doctor === null || doctor === void 0 ? void 0 : doctor.name) || 'Doctor',\n              className: \"w-full h-full object-cover\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-24 right-4 w-32 h-48 rounded-xl overflow-hidden border-4 border-white\",\n      style: {\n        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.8)',\n        zIndex: 40,\n        // Highest zIndex to always be on top\n        backgroundColor: 'black',\n        transform: showControls ? 'scale(1)' : 'scale(0.95)',\n        transition: 'all 0.3s ease'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoRef,\n        autoPlay: true,\n        playsInline: true,\n        muted: true // Always mute local video to prevent feedback\n        ,\n        className: \"w-full h-full object-cover\",\n        style: {\n          display: 'block'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute inset-0 dark-mode-transition ${isVideoOff ? '' : 'hidden'}`,\n        style: {\n          background: videoOffBg\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), isVideoOff && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-12 h-12 rounded-full bg-white bg-opacity-10 flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(Users, {\n            size: 18,\n            className: \"text-white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(VideoDisplay, \"rRJLdOfQltGa0qrY3X4PCYu2GkA=\");\n_c = VideoDisplay;\nexport default VideoDisplay;\nvar _c;\n$RefreshReg$(_c, \"VideoDisplay\");","map":{"version":3,"names":["React","useEffect","useState","Users","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoDisplay","remoteVideoRef","localVideoRef","isSpeakerOff","isVideoOff","doctor","connectionQuality","reconnectAttempt","showControls","isDarkMode","colors","children","callStatus","_s","_remoteVideoRef$curre2","_remoteVideoRef$curre3","videoOffBg","darkBg","primaryDark","remoteReady","setRemoteReady","remotePlaying","setRemotePlaying","hasVideoTracks","setHasVideoTracks","current","_remoteVideoRef$curre","console","log","checkVideoTracks","srcObject","tracks","getTracks","videoTracks","filter","t","kind","length","trackChecker","setInterval","attemptAutoplay","play","then","catch","err","error","muted","e","handleLoadedData","handleCanPlay","addEventListener","clearInterval","removeEventListener","setTimeout","showRemoteVideo","className","ref","autoPlay","playsInline","style","visibility","display","zIndex","onError","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","backdropFilter","background","src","image","alt","name","boxShadow","transform","transition","size","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoDisplay.jsx"],"sourcesContent":["// Fixed VideoDisplay.jsx to ensure video displays on both sides\nimport React, { useEffect, useState } from 'react';\nimport { Users } from 'lucide-react';\n\nconst VideoDisplay = ({\n  remoteVideoRef,\n  localVideoRef,\n  isSpeakerOff,\n  isVideoOff,\n  doctor,\n  connectionQuality,\n  reconnectAttempt,\n  showControls,\n  isDarkMode,\n  colors,\n  children,\n  callStatus\n}) => {\n  // Dark mode specific colors\n  const videoOffBg = isDarkMode \n    ? `linear-gradient(135deg, ${colors.darkBg}, #031838)` \n    : `linear-gradient(135deg, ${colors.primaryDark}, #031838)`;\n  \n  // State to track stream readiness\n  const [remoteReady, setRemoteReady] = useState(false);\n  const [remotePlaying, setRemotePlaying] = useState(false);\n  const [hasVideoTracks, setHasVideoTracks] = useState(false);\n\n  // Force display of remote stream\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      console.log('[VideoDisplay] Setting up remote video');\n      \n      // Check for video tracks\n      const checkVideoTracks = () => {\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          const tracks = remoteVideoRef.current.srcObject.getTracks();\n          const videoTracks = tracks.filter(t => t.kind === 'video');\n          console.log(`[VideoDisplay] Remote video has ${videoTracks.length} video tracks`);\n          setHasVideoTracks(videoTracks.length > 0);\n          return videoTracks.length > 0;\n        }\n        return false;\n      };\n      \n      // First check\n      checkVideoTracks();\n      \n      // Schedule periodic checks\n      const trackChecker = setInterval(() => {\n        checkVideoTracks();\n      }, 1000);\n      \n      // Force play if possible\n      const attemptAutoplay = () => {\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          console.log('[VideoDisplay] Attempting to play remote video');\n          remoteVideoRef.current.play()\n            .then(() => {\n              console.log('[VideoDisplay] Remote video playing successfully');\n              setRemotePlaying(true);\n            })\n            .catch(err => {\n              console.error('[VideoDisplay] Remote video autoplay failed:', err);\n              \n              // Try again with muted first, then unmute\n              remoteVideoRef.current.muted = true;\n              remoteVideoRef.current.play()\n                .then(() => {\n                  console.log('[VideoDisplay] Remote video playing (muted first)');\n                  remoteVideoRef.current.muted = isSpeakerOff;\n                  setRemotePlaying(true);\n                })\n                .catch(e => console.error('[VideoDisplay] Remote video autoplay failed even muted:', e));\n            });\n        }\n      };\n      \n      // Attempt immediately if we have tracks\n      if (remoteVideoRef.current.srcObject?.getTracks().length > 0) {\n        attemptAutoplay();\n      }\n      \n      // Set up event listeners to detect when video becomes ready\n      const handleLoadedData = () => {\n        console.log('[VideoDisplay] Remote video loadeddata event fired');\n        setRemoteReady(true);\n        attemptAutoplay();\n        checkVideoTracks();\n      };\n      \n      const handleCanPlay = () => {\n        console.log('[VideoDisplay] Remote video canplay event fired');\n        setRemoteReady(true);\n        attemptAutoplay();\n        checkVideoTracks();\n      };\n      \n      remoteVideoRef.current.addEventListener('loadeddata', handleLoadedData);\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      \n      return () => {\n        clearInterval(trackChecker);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('loadeddata', handleLoadedData);\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n        }\n      };\n    }\n  }, [remoteVideoRef.current, remoteVideoRef.current?.srcObject, isSpeakerOff]);\n  \n  // Handle srcObject changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      console.log('[VideoDisplay] Remote video srcObject changed');\n      \n      // Check for video tracks\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      const videoTracks = tracks.filter(t => t.kind === 'video');\n      console.log(`[VideoDisplay] Remote video has ${videoTracks.length} video tracks on srcObject change`);\n      setHasVideoTracks(videoTracks.length > 0);\n      \n      // Set a backup timeout to ensure video plays\n      setTimeout(() => {\n        if (remoteVideoRef.current && !remotePlaying) {\n          console.log('[VideoDisplay] Backup timeout: forcing play attempt');\n          remoteVideoRef.current.play().catch(e => console.error('[VideoDisplay] Play attempt failed:', e));\n        }\n      }, 1000);\n    }\n  }, [remoteVideoRef.current?.srcObject, remotePlaying]);\n\n  // Use this condition to determine if we should show the actual remote video\n  const showRemoteVideo = callStatus === 'active' || hasVideoTracks || remoteReady;\n  \n  console.log(`[VideoDisplay] Render - callStatus: ${callStatus}, hasVideoTracks: ${hasVideoTracks}, remoteReady: ${remoteReady}, showRemoteVideo: ${showRemoteVideo}`);\n\n  return (\n    <>\n      {/* Doctor video (remote) */}\n      <div className=\"absolute inset-0 bg-black dark-mode-transition\">\n        <div className=\"h-full relative\">\n          {/* Remote video element - ALWAYS RENDER BUT CONTROL VISIBILITY */}\n          <video\n            ref={remoteVideoRef}\n            autoPlay\n            playsInline\n            muted={isSpeakerOff}\n            className=\"w-full h-full object-cover\"\n            style={{\n              visibility: 'visible',\n              display: 'block',\n              zIndex: 10  // Ensure video is on top\n            }}\n            onError={(e) => console.error(\"[VideoDisplay] Remote video error:\", e)}\n          />\n          \n          {/* Pass children (call header & connection status) */}\n          {children}\n          \n          {/* Reconnecting indicator */}\n          {connectionQuality !== 'good' && reconnectAttempt > 0 && (\n            <div \n              className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-4 py-2 rounded-lg\"\n              style={{ \n                backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                backdropFilter: 'blur(4px)',\n                zIndex: 30  // Higher zIndex to show above video\n              }}\n            >\n              <div className=\"flex flex-col items-center\">\n                <div className=\"w-8 h-8 rounded-full border-2 border-white border-opacity-20 border-t-white animate-spin mb-2\"></div>\n                <span className=\"text-sm text-white font-medium\">Reconnecting{reconnectAttempt > 1 ? ` (${reconnectAttempt})` : ''}...</span>\n              </div>\n            </div>\n          )}\n          \n          {/* Fallback when remote video is off or not available yet - PROPERLY CONTROLLED VISIBILITY */}\n          {((isVideoOff || !hasVideoTracks) && callStatus === 'active') && (\n            <div className=\"absolute inset-0 flex items-center justify-center dark-mode-transition\"\n                 style={{ \n                   background: isDarkMode ? colors.darkBg : '#000811',\n                   zIndex: 15  // Higher than video but lower than reconnecting indicator\n                 }}>\n              <div className=\"w-32 h-32 rounded-full overflow-hidden border-4 border-white border-opacity-20\">\n                <img src={doctor?.image || '/User_1.png'} alt={doctor?.name || 'Doctor'} className=\"w-full h-full object-cover\" />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* User video (local) - CLEANER VERSION WITHOUT DEBUG OVERLAYS */}\n      <div className=\"absolute bottom-24 right-4 w-32 h-48 rounded-xl overflow-hidden border-4 border-white\"\n           style={{ \n             boxShadow: '0 8px 32px rgba(0, 0, 0, 0.8)',\n             zIndex: 40,  // Highest zIndex to always be on top\n             backgroundColor: 'black',\n             transform: showControls ? 'scale(1)' : 'scale(0.95)',\n             transition: 'all 0.3s ease'\n           }}>\n        {/* Local video element */}\n        <video\n          ref={localVideoRef}\n          autoPlay\n          playsInline\n          muted={true} // Always mute local video to prevent feedback\n          className=\"w-full h-full object-cover\"\n          style={{ display: 'block' }}\n        />\n        \n        {/* Background when video is off */}\n        <div className={`absolute inset-0 dark-mode-transition ${isVideoOff ? '' : 'hidden'}`} \n             style={{ background: videoOffBg }}>\n        </div>\n        \n        {/* User placeholder when video is off */}\n        {isVideoOff && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-12 h-12 rounded-full bg-white bg-opacity-10 flex items-center justify-center\">\n              <Users size={18} className=\"text-white\" />\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default VideoDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}