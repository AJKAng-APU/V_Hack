{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre6;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // New state for control preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n\n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n\n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null); // Added ref for the timer\n  const endCheckIntervalRef = useRef(null); // New ref for checking if call has ended\n\n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n\n  // Enhanced logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n\n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n\n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      mouseMoveTimerRef.current = setTimeout(() => {\n        if (!alwaysShowControls) {\n          setShowControls(false);\n        }\n      }, 15000); // 15 seconds for initial call activation\n    }\n  }, [callStatus, alwaysShowControls]);\n\n  // NEW: Specifically handle call-ended events more aggressively\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Create direct event listener for call-ended\n    const handleCallEndedEvent = () => {\n      var _localVideoRef$curren, _remoteVideoRef$curre;\n      log('Direct call-ended event received - forcing ended state');\n      setCallStatus('ended');\n      callStatusRef.current = 'ended';\n\n      // Stop local tracks\n      if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n\n      // Clear remote video\n      if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // Wait a moment before closing\n      setTimeout(() => {\n        onClose();\n      }, 2000);\n    };\n\n    // Add more persistent event listener directly to the event emitter\n    const unsubscribeDirectCallEnded = webRTCService.eventEmitter.on('call-ended', handleCallEndedEvent);\n\n    // Also create a periodic check to detect if the WebRTC service thinks the call is ended\n    // even if we haven't received a direct event\n    endCheckIntervalRef.current = setInterval(() => {\n      if (callStatusRef.current !== 'ended' && webRTCService.callState === 'ended') {\n        log('Detected call has ended in WebRTCService but UI hasn\\'t updated - forcing ended state');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    }, 1000);\n    return () => {\n      if (typeof unsubscribeDirectCallEnded === 'function') {\n        unsubscribeDirectCallEnded();\n      }\n      if (endCheckIntervalRef.current) {\n        clearInterval(endCheckIntervalRef.current);\n        endCheckIntervalRef.current = null;\n      }\n    };\n  }, [isOpen, onClose]);\n\n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    var _webRTCService$connec2;\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    log('Performing forced video state check');\n    let shouldSetActive = false;\n\n    // IMPROVED: Better remote video stream checking\n    if (remoteVideoRef.current) {\n      var _webRTCService$connec;\n      // Check if we need to attach the remote stream from webRTCService\n      if (!remoteVideoRef.current.srcObject && (_webRTCService$connec = webRTCService.connectionManager) !== null && _webRTCService$connec !== void 0 && _webRTCService$connec.remoteStream) {\n        log('Remote video has no srcObject but webRTCService has remote stream, attaching it now');\n        remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n        try {\n          remoteVideoRef.current.play().catch(e => {\n            log(`Remote video play error: ${e.message}`);\n          });\n        } catch (err) {\n          log(`Error playing remote video: ${err.message}`);\n        }\n\n        // Since we found and attached a stream, we should be active\n        shouldSetActive = true;\n      }\n\n      // Check existing stream for tracks\n      if (remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        log(`Remote video has ${tracks.length} tracks`);\n\n        // Log specific track info for debugging\n        tracks.forEach(track => {\n          log(`Track: ${track.kind}, ID: ${track.id}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n        });\n        if (tracks.length > 0) {\n          log('Tracks detected, should force active UI state');\n          shouldSetActive = true;\n\n          // Try to play the video if paused\n          if (remoteVideoRef.current.paused) {\n            log('Video is paused, attempting to play');\n            remoteVideoRef.current.play().catch(e => {\n              log(`Auto-play failed: ${e.message}`);\n            });\n          }\n        }\n      }\n    }\n\n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n\n    // IMPROVED: More aggressive check for remote stream\n    if ((_webRTCService$connec2 = webRTCService.connectionManager) !== null && _webRTCService$connec2 !== void 0 && _webRTCService$connec2.remoteStream) {\n      log('WebRTC has remote stream, force attaching to video element and setting active state');\n\n      // Always re-attach the stream to ensure it's the latest\n      if (remoteVideoRef.current) {\n        if (remoteVideoRef.current.srcObject !== webRTCService.connectionManager.remoteStream) {\n          log('Updating remote video with current stream from connectionManager');\n          remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n          try {\n            remoteVideoRef.current.play().catch(e => {\n              log(`Remote video play error: ${e.message}`);\n            });\n          } catch (err) {\n            log(`Error playing remote video: ${err.message}`);\n          }\n        }\n      }\n      shouldSetActive = true;\n    }\n\n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n\n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && Date.now() - activeSinceRef.current > 5000) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n\n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n\n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n\n    // IMPROVED: Local video checking and attachment\n    if (localVideoRef.current) {\n      var _webRTCService$mediaM;\n      if (!localVideoRef.current.srcObject && (_webRTCService$mediaM = webRTCService.mediaManager) !== null && _webRTCService$mediaM !== void 0 && _webRTCService$mediaM.localStream) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n\n        // Trigger a play with better error handling\n        try {\n          localVideoRef.current.play().catch(e => {\n            log(`Local play error: ${e.message}`);\n            // Try muted playback as a fallback (helps with autoplay restrictions)\n            localVideoRef.current.muted = true;\n            localVideoRef.current.play().catch(innerErr => {\n              log(`Local muted play also failed: ${innerErr.message}`);\n            });\n          });\n        } catch (err) {\n          log(`Error during local play: ${err.message}`);\n        }\n      } else if (localVideoRef.current.srcObject) {\n        // Check if tracks are enabled\n        const videoTracks = localVideoRef.current.srcObject.getVideoTracks();\n        if (videoTracks.length > 0) {\n          log(`Local video has ${videoTracks.length} video tracks`);\n          videoTracks.forEach(track => {\n            log(`Local track: ${track.kind}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n\n            // If video is not disabled by user but track is disabled, enable it\n            if (!isVideoOff && !track.enabled) {\n              log('Local track was disabled but should be enabled, enabling it now');\n              track.enabled = true;\n            }\n          });\n        } else {\n          log('Local video has no video tracks, only audio');\n        }\n      }\n    }\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n\n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      // Use functional state update to ensure we work with the latest state\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n\n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n\n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        }\n\n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        return newValue;\n      });\n\n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n\n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n\n  // Handle ending call\n  const handleEndCall = () => {\n    var _localVideoRef$curren2, _remoteVideoRef$curre2;\n    log('User ending call');\n\n    // Set call status to ended immediately\n    setCallStatus('ended');\n    callStatusRef.current = 'ended';\n\n    // Stop camera and microphone directly from the video element\n    // This ensures resources are freed even if WebRTCService doesn't do it\n    if ((_localVideoRef$curren2 = localVideoRef.current) !== null && _localVideoRef$curren2 !== void 0 && _localVideoRef$curren2.srcObject) {\n      log('Stopping local video tracks directly');\n      const stream = localVideoRef.current.srcObject;\n      stream.getTracks().forEach(track => {\n        log(`Stopping ${track.kind} track`);\n        track.stop();\n      });\n      localVideoRef.current.srcObject = null;\n    }\n\n    // Also stop remote video\n    if ((_remoteVideoRef$curre2 = remoteVideoRef.current) !== null && _remoteVideoRef$curre2 !== void 0 && _remoteVideoRef$curre2.srcObject) {\n      remoteVideoRef.current.srcObject = null;\n    }\n\n    // End the call via the service\n    webRTCService.endCall(true);\n\n    // Set a timeout to close the call UI\n    setTimeout(() => {\n      onClose();\n    }, 2000);\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n\n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n\n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = stream => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n\n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n\n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n\n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n\n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Make sure controls are visible when call starts\n        setShowControls(true);\n\n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state changed to: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n\n          // If connection completely fails, transition to ended state after a short timeout\n          setTimeout(() => {\n            var _webRTCService$connec3, _webRTCService$connec4;\n            if (callStatusRef.current !== 'ended' && ((_webRTCService$connec3 = webRTCService.connectionManager) === null || _webRTCService$connec3 === void 0 ? void 0 : (_webRTCService$connec4 = _webRTCService$connec3.peerConnection) === null || _webRTCService$connec4 === void 0 ? void 0 : _webRTCService$connec4.iceConnectionState) === 'failed') {\n              log('ICE connection failed, forcing ended state');\n              setCallStatus('ended');\n              callStatusRef.current = 'ended';\n            }\n          }, 5000);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).then(stream => {\n        log(`Local media access granted with ${stream.getTracks().length} tracks`);\n        // Explicitly set local video source here as well for redundancy\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n\n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n\n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [setTimeout(() => forceVideoStateCheck(), 2000), setTimeout(() => forceVideoStateCheck(), 5000), setTimeout(() => forceVideoStateCheck(), 8000),\n    // Force active state after 10 seconds\n    setTimeout(() => {\n      if (callStatusRef.current === 'connecting') {\n        log('10 seconds passed, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Show controls again when forcing active state\n        setShowControls(true);\n      }\n    }, 10000)];\n\n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n\n      // Always handle 'ended' state immediately regardless of current state\n      if (state === 'ended') {\n        var _localVideoRef$curren3, _remoteVideoRef$curre3;\n        log('Call ended event received, closing call immediately');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n\n        // Stop local video tracks immediately\n        if ((_localVideoRef$curren3 = localVideoRef.current) !== null && _localVideoRef$curren3 !== void 0 && _localVideoRef$curren3.srcObject) {\n          log('Stopping local video tracks due to call-ended event');\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            log(`Stopping ${track.kind} track`);\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n\n        // Clean up remote video\n        if ((_remoteVideoRef$curre3 = remoteVideoRef.current) !== null && _remoteVideoRef$curre3 !== void 0 && _remoteVideoRef$curre3.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n\n        // Schedule close after showing end state briefly\n        setTimeout(() => {\n          log('Auto-closing call after ended state');\n          onClose();\n        }, 2000);\n      }\n      // Handle other state changes as before...\n    });\n    const unsubscribeCallEnded = webRTCService.on('call-ended', () => {\n      var _localVideoRef$curren4;\n      log('Direct call-ended event received');\n      setCallStatus('ended');\n      callStatusRef.current = 'ended';\n\n      // Stop local video tracks immediately\n      if ((_localVideoRef$curren4 = localVideoRef.current) !== null && _localVideoRef$curren4 !== void 0 && _localVideoRef$curren4.srcObject) {\n        log('Stopping local video tracks due to direct call-ended event');\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n\n      // Schedule close after showing end state briefly\n      setTimeout(() => {\n        log('Auto-closing call after direct ended event');\n        onClose();\n      }, 2000);\n    });\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', error => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n\n      // Show controls during errors\n      setShowControls(true);\n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n\n      // Show controls when tracks are added\n      setShowControls(true);\n    });\n\n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n\n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000); // Increased from 5000 to 10000 (10 seconds)\n        }\n      }\n    };\n\n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n\n    // Double-tap handler to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = e => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n\n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      lastTapTime = now;\n    };\n\n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n\n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls after forcing active\n        setShowControls(true);\n      }\n    }, 1000);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren5, _remoteVideoRef$curre4;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      unsubscribeCallEnded();\n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      if (endCheckIntervalRef.current) {\n        clearInterval(endCheckIntervalRef.current);\n        endCheckIntervalRef.current = null;\n      }\n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren5 = localVideoRef.current) !== null && _localVideoRef$curren5 !== void 0 && _localVideoRef$curren5.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre4 = remoteVideoRef.current) !== null && _remoteVideoRef$curre4 !== void 0 && _remoteVideoRef$curre4.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    var _remoteVideoRef$curre5;\n    if ((_remoteVideoRef$curre5 = remoteVideoRef.current) !== null && _remoteVideoRef$curre5 !== void 0 && _remoteVideoRef$curre5.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n\n          // Show controls when tracks are detected\n          setShowControls(true);\n          return true;\n        }\n        return false;\n      };\n      if (checkForTracks()) return; // Tracks already present\n\n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls when video can play\n        setShowControls(true);\n      };\n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n\n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) {\n        // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [(_remoteVideoRef$curre6 = remoteVideoRef.current) === null || _remoteVideoRef$curre6 === void 0 ? void 0 : _remoteVideoRef$curre6.srcObject]);\n\n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Make sure controls are visible\n        setShowControls(true);\n      }, 15000); // Force active after 15 seconds max\n\n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n\n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n\n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n\n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n\n  // NEW: Add aggressive detection of ended calls through peer connection state\n  useEffect(() => {\n    if (!isOpen) return;\n    const checkConnectionState = () => {\n      var _webRTCService$connec5;\n      // Check the peer connection state\n      const peerConnection = (_webRTCService$connec5 = webRTCService.connectionManager) === null || _webRTCService$connec5 === void 0 ? void 0 : _webRTCService$connec5.peerConnection;\n      if (peerConnection) {\n        const connState = peerConnection.connectionState;\n        const iceState = peerConnection.iceConnectionState;\n\n        // If peer connection is closed, disconnected, or failed\n        if ((connState === 'closed' || connState === 'failed' || connState === 'disconnected') && callStatusRef.current !== 'ended') {\n          log(`Detected peer connection in ${connState} state, forcing ended state`);\n          setCallStatus('ended');\n          callStatusRef.current = 'ended';\n        }\n\n        // If ICE connection is failed and has been for a while\n        if (iceState === 'failed' && callStatusRef.current !== 'ended') {\n          log('Detected ICE connection failure, forcing ended state');\n          setCallStatus('ended');\n          callStatusRef.current = 'ended';\n        }\n      }\n    };\n\n    // Check connection state periodically\n    const connectionCheckInterval = setInterval(checkConnectionState, 2000);\n    return () => {\n      clearInterval(connectionCheckInterval);\n    };\n  }, [isOpen]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 940,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 949,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Using the improved VideoDisplay component for active call\n      _jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        callStatus: callStatus,\n        forceActiveState: forceActiveRef.current,\n        onClick: () => {\n          // Toggle controls on video click\n          setShowControls(prev => !prev);\n\n          // Reset hide timer if showing controls\n          if (!showControls && !alwaysShowControls) {\n            if (mouseMoveTimerRef.current) {\n              clearTimeout(mouseMoveTimerRef.current);\n            }\n            mouseMoveTimerRef.current = setTimeout(() => {\n              setShowControls(false);\n            }, 10000);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 981,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls || connectionQuality !== 'good' // Always show when connection is not good\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 988,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`,\n          style: {\n            zIndex: 500\n          },\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 952,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus,\n        resetControlsTimer: () => {\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n          }\n          if (!alwaysShowControls) {\n            mouseMoveTimerRef.current = setTimeout(() => {\n              setShowControls(false);\n            }, 10000);\n          }\n        },\n        setShowControls: setShowControls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1004,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 936,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"HWft3p3aTjVCBOs1RcMPO86EBu8=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","VideoDisplay","Users","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre6","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","alwaysShowControls","setAlwaysShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","streamReady","setStreamReady","forceActiveRef","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","stateCheckerInterval","stateCheckTimeouts","activeSinceRef","callStatusRef","mouseMoveTimerRef","endCheckIntervalRef","current","log","message","console","clearTimeout","setTimeout","handleCallEndedEvent","_localVideoRef$curren","_remoteVideoRef$curre","srcObject","stream","getTracks","forEach","track","stop","unsubscribeDirectCallEnded","eventEmitter","on","setInterval","callState","clearInterval","forceVideoStateCheck","_webRTCService$connec2","shouldSetActive","_webRTCService$connec","connectionManager","remoteStream","play","catch","e","err","tracks","length","kind","id","enabled","readyState","paused","isCallActive","Date","now","_webRTCService$mediaM","mediaManager","localStream","muted","innerErr","videoTracks","getVideoTracks","toggleVideo","videoOff","hasLocalStream","toggleAlwaysShowControls","prevValue","newValue","localStorage","setItem","error","savedPreference","getItem","handleEndCall","_localVideoRef$curren2","_remoteVideoRef$curre2","endCall","name","handleLocalStream","callbacks","onLocalStream","onRemoteStream","prev","onCallStarted","onCallEnded","onICEConnectionStateChange","state","_webRTCService$connec3","_webRTCService$connec4","peerConnection","iceConnectionState","updateCallbacks","getLocalMedia","then","unsubscribeCallState","_localVideoRef$curren3","_remoteVideoRef$curre3","unsubscribeCallEnded","_localVideoRef$curren4","unsubscribeError","fatal","unsubscribeTrackAdded","handleUserActivity","window","addEventListener","lastTapTime","handleDoubleTap","DOUBLE_TAP_THRESHOLD","preventDefault","_localVideoRef$curren5","_remoteVideoRef$curre4","timeout","removeEventListener","toggleAudio","formatTime","seconds","mins","Math","floor","secs","toString","padStart","_remoteVideoRef$curre5","checkForTracks","handleCanPlay","handleLoadedMetadata","checkTimer","checkConnectionState","_webRTCService$connec5","connState","connectionState","iceState","connectionCheckInterval","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","forceActiveState","onClick","zIndex","resetControlsTimer","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // New state for control preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  \n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n  \n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null); // Added ref for the timer\n  const endCheckIntervalRef = useRef(null); // New ref for checking if call has ended\n  \n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n  \n  // Enhanced logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n      \n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      mouseMoveTimerRef.current = setTimeout(() => {\n        if (!alwaysShowControls) {\n          setShowControls(false);\n        }\n      }, 15000); // 15 seconds for initial call activation\n    }\n  }, [callStatus, alwaysShowControls]);\n\n  // NEW: Specifically handle call-ended events more aggressively\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Create direct event listener for call-ended\n    const handleCallEndedEvent = () => {\n      log('Direct call-ended event received - forcing ended state');\n      setCallStatus('ended');\n      callStatusRef.current = 'ended';\n      \n      // Stop local tracks\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      // Clear remote video\n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // Wait a moment before closing\n      setTimeout(() => {\n        onClose();\n      }, 2000);\n    };\n\n    // Add more persistent event listener directly to the event emitter\n    const unsubscribeDirectCallEnded = webRTCService.eventEmitter.on('call-ended', handleCallEndedEvent);\n    \n    // Also create a periodic check to detect if the WebRTC service thinks the call is ended\n    // even if we haven't received a direct event\n    endCheckIntervalRef.current = setInterval(() => {\n      if (callStatusRef.current !== 'ended' && webRTCService.callState === 'ended') {\n        log('Detected call has ended in WebRTCService but UI hasn\\'t updated - forcing ended state');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    }, 1000);\n    \n    return () => {\n      if (typeof unsubscribeDirectCallEnded === 'function') {\n        unsubscribeDirectCallEnded();\n      }\n      \n      if (endCheckIntervalRef.current) {\n        clearInterval(endCheckIntervalRef.current);\n        endCheckIntervalRef.current = null;\n      }\n    };\n  }, [isOpen, onClose]);\n  \n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    \n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    \n    // IMPROVED: Better remote video stream checking\n    if (remoteVideoRef.current) {\n      // Check if we need to attach the remote stream from webRTCService\n      if (!remoteVideoRef.current.srcObject && webRTCService.connectionManager?.remoteStream) {\n        log('Remote video has no srcObject but webRTCService has remote stream, attaching it now');\n        remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n        \n        try {\n          remoteVideoRef.current.play().catch(e => {\n            log(`Remote video play error: ${e.message}`);\n          });\n        } catch (err) {\n          log(`Error playing remote video: ${err.message}`);\n        }\n        \n        // Since we found and attached a stream, we should be active\n        shouldSetActive = true;\n      }\n      \n      // Check existing stream for tracks\n      if (remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        log(`Remote video has ${tracks.length} tracks`);\n        \n        // Log specific track info for debugging\n        tracks.forEach(track => {\n          log(`Track: ${track.kind}, ID: ${track.id}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n        });\n        \n        if (tracks.length > 0) {\n          log('Tracks detected, should force active UI state');\n          shouldSetActive = true;\n          \n          // Try to play the video if paused\n          if (remoteVideoRef.current.paused) {\n            log('Video is paused, attempting to play');\n            remoteVideoRef.current.play().catch(e => {\n              log(`Auto-play failed: ${e.message}`);\n            });\n          }\n        }\n      }\n    }\n    \n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n    \n    // IMPROVED: More aggressive check for remote stream\n    if (webRTCService.connectionManager?.remoteStream) {\n      log('WebRTC has remote stream, force attaching to video element and setting active state');\n      \n      // Always re-attach the stream to ensure it's the latest\n      if (remoteVideoRef.current) {\n        if (remoteVideoRef.current.srcObject !== webRTCService.connectionManager.remoteStream) {\n          log('Updating remote video with current stream from connectionManager');\n          remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n          \n          try {\n            remoteVideoRef.current.play().catch(e => {\n              log(`Remote video play error: ${e.message}`);\n            });\n          } catch (err) {\n            log(`Error playing remote video: ${err.message}`);\n          }\n        }\n      }\n      \n      shouldSetActive = true;\n    }\n    \n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n    \n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && (Date.now() - activeSinceRef.current > 5000)) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n    \n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n      \n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n  \n    // IMPROVED: Local video checking and attachment\n    if (localVideoRef.current) {\n      if (!localVideoRef.current.srcObject && webRTCService.mediaManager?.localStream) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        \n        // Trigger a play with better error handling\n        try {\n          localVideoRef.current.play().catch(e => {\n            log(`Local play error: ${e.message}`);\n            // Try muted playback as a fallback (helps with autoplay restrictions)\n            localVideoRef.current.muted = true;\n            localVideoRef.current.play().catch(innerErr => {\n              log(`Local muted play also failed: ${innerErr.message}`);\n            });\n          });\n        } catch (err) {\n          log(`Error during local play: ${err.message}`);\n        }\n      } else if (localVideoRef.current.srcObject) {\n        // Check if tracks are enabled\n        const videoTracks = localVideoRef.current.srcObject.getVideoTracks();\n        if (videoTracks.length > 0) {\n          log(`Local video has ${videoTracks.length} video tracks`);\n          videoTracks.forEach(track => {\n            log(`Local track: ${track.kind}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n            \n            // If video is not disabled by user but track is disabled, enable it\n            if (!isVideoOff && !track.enabled) {\n              log('Local track was disabled but should be enabled, enabling it now');\n              track.enabled = true;\n            }\n          });\n        } else {\n          log('Local video has no video tracks, only audio');\n        }\n      }\n    }  \n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n  \n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      // Use functional state update to ensure we work with the latest state\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n        \n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n          \n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        }\n        \n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        \n        return newValue;\n      });\n      \n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n  \n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    \n    // Set call status to ended immediately\n    setCallStatus('ended');\n    callStatusRef.current = 'ended';\n    \n    // Stop camera and microphone directly from the video element\n    // This ensures resources are freed even if WebRTCService doesn't do it\n    if (localVideoRef.current?.srcObject) {\n      log('Stopping local video tracks directly');\n      const stream = localVideoRef.current.srcObject;\n      stream.getTracks().forEach(track => {\n        log(`Stopping ${track.kind} track`);\n        track.stop();\n      });\n      localVideoRef.current.srcObject = null;\n    }\n    \n    // Also stop remote video\n    if (remoteVideoRef.current?.srcObject) {\n      remoteVideoRef.current.srcObject = null;\n    }\n    \n    // End the call via the service\n    webRTCService.endCall(true);\n    \n    // Set a timeout to close the call UI\n    setTimeout(() => {\n      onClose();\n    }, 2000);\n  };\n  \n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n    \n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n    \n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = (stream) => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n        \n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n        \n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            \n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n    \n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n          \n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Make sure controls are visible when call starts\n        setShowControls(true);\n        \n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state changed to: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n          \n          // If connection completely fails, transition to ended state after a short timeout\n          setTimeout(() => {\n            if (callStatusRef.current !== 'ended' && \n                webRTCService.connectionManager?.peerConnection?.iceConnectionState === 'failed') {\n              log('ICE connection failed, forcing ended state');\n              setCallStatus('ended');\n              callStatusRef.current = 'ended';\n            }\n          }, 5000);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .then(stream => {\n          log(`Local media access granted with ${stream.getTracks().length} tracks`);\n          // Explicitly set local video source here as well for redundancy\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n          }\n        })\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n    \n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n    \n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [\n      setTimeout(() => forceVideoStateCheck(), 2000),\n      setTimeout(() => forceVideoStateCheck(), 5000),\n      setTimeout(() => forceVideoStateCheck(), 8000),\n      // Force active state after 10 seconds\n      setTimeout(() => {\n        if (callStatusRef.current === 'connecting') {\n          log('10 seconds passed, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          forceActiveRef.current = true;\n          \n          // Show controls again when forcing active state\n          setShowControls(true);\n        }\n      }, 10000)\n    ];\n    \n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n      \n      // Always handle 'ended' state immediately regardless of current state\n      if (state === 'ended') {\n        log('Call ended event received, closing call immediately');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        \n        // Stop local video tracks immediately\n        if (localVideoRef.current?.srcObject) {\n          log('Stopping local video tracks due to call-ended event');\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            log(`Stopping ${track.kind} track`);\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        \n        // Clean up remote video\n        if (remoteVideoRef.current?.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        \n        // Schedule close after showing end state briefly\n        setTimeout(() => {\n          log('Auto-closing call after ended state');\n          onClose();\n        }, 2000);\n      } \n      // Handle other state changes as before...\n    });\n    \n    const unsubscribeCallEnded = webRTCService.on('call-ended', () => {\n      log('Direct call-ended event received');\n      setCallStatus('ended');\n      callStatusRef.current = 'ended';\n      \n      // Stop local video tracks immediately\n      if (localVideoRef.current?.srcObject) {\n        log('Stopping local video tracks due to direct call-ended event');\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      // Schedule close after showing end state briefly\n      setTimeout(() => {\n        log('Auto-closing call after direct ended event');\n        onClose();\n      }, 2000);\n    });\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', (error) => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      \n      // Show controls during errors\n      setShowControls(true);\n      \n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n      \n      // Show controls when tracks are added\n      setShowControls(true);\n    });\n    \n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000); // Increased from 5000 to 10000 (10 seconds)\n        }\n      }\n    };\n    \n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n    \n    // Double-tap handler to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = (e) => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n      \n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      \n      lastTapTime = now;\n    };\n    \n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n    \n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls after forcing active\n        setShowControls(true);\n      }\n    }, 1000);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      unsubscribeCallEnded();\n      \n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      \n      if (endCheckIntervalRef.current) {\n        clearInterval(endCheckIntervalRef.current);\n        endCheckIntervalRef.current = null;\n      }\n      \n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      \n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      \n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    \n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    if (remoteVideoRef.current?.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n          \n          // Show controls when tracks are detected\n          setShowControls(true);\n          return true;\n        }\n        return false;\n      };\n      \n      if (checkForTracks()) return; // Tracks already present\n      \n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls when video can play\n        setShowControls(true);\n      };\n      \n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      \n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n      \n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) { // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      \n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n        \n        // Make sure controls are visible\n        setShowControls(true);\n      }, 15000); // Force active after 15 seconds max\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n  \n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        \n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n      \n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && \n            (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      \n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n\n  // NEW: Add aggressive detection of ended calls through peer connection state\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const checkConnectionState = () => {\n      // Check the peer connection state\n      const peerConnection = webRTCService.connectionManager?.peerConnection;\n      \n      if (peerConnection) {\n        const connState = peerConnection.connectionState;\n        const iceState = peerConnection.iceConnectionState;\n        \n        // If peer connection is closed, disconnected, or failed\n        if ((connState === 'closed' || connState === 'failed' || connState === 'disconnected') &&\n            callStatusRef.current !== 'ended') {\n          log(`Detected peer connection in ${connState} state, forcing ended state`);\n          setCallStatus('ended');\n          callStatusRef.current = 'ended';\n        }\n        \n        // If ICE connection is failed and has been for a while\n        if (iceState === 'failed' && callStatusRef.current !== 'ended') {\n          log('Detected ICE connection failure, forcing ended state');\n          setCallStatus('ended');\n          callStatusRef.current = 'ended';\n        }\n      }\n    };\n    \n    // Check connection state periodically\n    const connectionCheckInterval = setInterval(checkConnectionState, 2000);\n    \n    return () => {\n      clearInterval(connectionCheckInterval);\n    };\n  }, [isOpen]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          // Using the improved VideoDisplay component for active call\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n            callStatus={callStatus}\n            forceActiveState={forceActiveRef.current}\n            onClick={() => {\n              // Toggle controls on video click\n              setShowControls(prev => !prev);\n              \n              // Reset hide timer if showing controls\n              if (!showControls && !alwaysShowControls) {\n                if (mouseMoveTimerRef.current) {\n                  clearTimeout(mouseMoveTimerRef.current);\n                }\n                mouseMoveTimerRef.current = setTimeout(() => {\n                  setShowControls(false);\n                }, 10000);\n              }\n            }}\n          >\n            {/* Render header and connection status inside VideoDisplay */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls || connectionQuality !== 'good'} // Always show when connection is not good\n            />\n            \n            {/* Active call visual indicator */}\n            <div \n              className={`absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`}\n              style={{ zIndex: 500 }}\n            >\n              Active\n            </div>\n          </VideoDisplay>\n        )}\n        \n        {/* Controls - with improved visibility and state handling */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n          resetControlsTimer={() => {\n            if (mouseMoveTimerRef.current) {\n              clearTimeout(mouseMoveTimerRef.current);\n            }\n            if (!alwaysShowControls) {\n              mouseMoveTimerRef.current = setTimeout(() => {\n                setShowControls(false);\n              }, 10000);\n            }\n          }}\n          setShowControls={setShowControls}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}