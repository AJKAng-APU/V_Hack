{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre3;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // New state for control preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n\n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n\n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null); // Added ref for the timer\n\n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n\n  // Enhanced logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n\n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n\n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      mouseMoveTimerRef.current = setTimeout(() => {\n        if (!alwaysShowControls) {\n          setShowControls(false);\n        }\n      }, 15000); // 15 seconds for initial call activation\n    }\n  }, [callStatus, alwaysShowControls]);\n\n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      log(`Remote video has ${tracks.length} tracks`);\n      if (tracks.length > 0) {\n        log('Tracks detected, should force active UI state');\n        shouldSetActive = true;\n\n        // Try to play the video if paused\n        if (remoteVideoRef.current.paused) {\n          log('Video is paused, attempting to play');\n          remoteVideoRef.current.play().catch(e => {\n            log(`Auto-play failed: ${e.message}`);\n          });\n        }\n      }\n    }\n\n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n\n    // Check for connection manager remote stream\n    if (webRTCService.hasRemoteStream && webRTCService.hasRemoteStream()) {\n      log('WebRTC has remote stream, should force active state');\n      shouldSetActive = true;\n    }\n\n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n\n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && Date.now() - activeSinceRef.current > 5000) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n\n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n\n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n\n    // ADDED: Check local video and ensure it's displaying\n    if (localVideoRef.current && webRTCService.mediaManager.hasLocalStream()) {\n      if (!localVideoRef.current.srcObject) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        localVideoRef.current.play().catch(e => log(`Local play error: ${e.message}`));\n      }\n    }\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n\n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      // Use functional state update to ensure we work with the latest state\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n\n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n\n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        }\n\n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        return newValue;\n      });\n\n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n\n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n\n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n\n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n\n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = stream => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n\n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n\n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n\n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n\n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Make sure controls are visible when call starts\n        setShowControls(true);\n\n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state changed to: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).then(stream => {\n        log(`Local media access granted with ${stream.getTracks().length} tracks`);\n        // Explicitly set local video source here as well for redundancy\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n\n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n\n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [setTimeout(() => forceVideoStateCheck(), 2000), setTimeout(() => forceVideoStateCheck(), 5000), setTimeout(() => forceVideoStateCheck(), 8000),\n    // Force active state after 10 seconds\n    setTimeout(() => {\n      if (callStatusRef.current === 'connecting') {\n        log('10 seconds passed, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Show controls again when forcing active state\n        setShowControls(true);\n      }\n    }, 10000)];\n\n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n\n      // Never go backwards from active to connecting\n      if (state === 'active' || state === 'connecting' && callStatusRef.current !== 'active') {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n\n        // Show controls on state change\n        setShowControls(true);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', error => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n\n      // Show controls during errors\n      setShowControls(true);\n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n\n      // Show controls when tracks are added\n      setShowControls(true);\n    });\n\n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n\n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000); // Increased from 5000 to 10000 (10 seconds)\n        }\n      }\n    };\n\n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n\n    // Double-tap handler to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = e => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n\n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      lastTapTime = now;\n    };\n\n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n\n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls after forcing active\n        setShowControls(true);\n      }\n    }, 1000);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren, _remoteVideoRef$curre;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    var _remoteVideoRef$curre2;\n    if ((_remoteVideoRef$curre2 = remoteVideoRef.current) !== null && _remoteVideoRef$curre2 !== void 0 && _remoteVideoRef$curre2.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n\n          // Show controls when tracks are detected\n          setShowControls(true);\n          return true;\n        }\n        return false;\n      };\n      if (checkForTracks()) return; // Tracks already present\n\n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls when video can play\n        setShowControls(true);\n      };\n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n\n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) {\n        // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [(_remoteVideoRef$curre3 = remoteVideoRef.current) === null || _remoteVideoRef$curre3 === void 0 ? void 0 : _remoteVideoRef$curre3.srcObject]);\n\n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Make sure controls are visible\n        setShowControls(true);\n      }, 15000); // Force active after 15 seconds max\n\n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n\n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n\n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n\n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Using the improved VideoDisplay component for active call\n      _jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        callStatus: callStatus,\n        forceActiveState: forceActiveRef.current,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls || connectionQuality !== 'good' // Always show when connection is not good\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`,\n          style: {\n            zIndex: 500\n          },\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute top-16 right-4 px-2 py-1 rounded-full transition-all duration-300 cursor-pointer ${showControls ? 'opacity-100' : 'opacity-0'}`,\n          style: {\n            backgroundColor: alwaysShowControls ? 'rgba(0, 200, 100, 0.6)' : 'rgba(100, 100, 100, 0.6)',\n            backdropFilter: 'blur(4px)',\n            zIndex: 500\n          },\n          onClick: e => {\n            // Stop event propagation to prevent it from reaching parent elements\n            e.stopPropagation();\n            e.preventDefault();\n            toggleAlwaysShowControls();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs text-white font-medium\",\n              children: alwaysShowControls ? 'Controls Locked' : 'Lock Controls'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute bottom-32 left-0 right-0 flex justify-center transition-opacity duration-500 ${showControls && !alwaysShowControls ? 'opacity-50' : 'opacity-0'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-3 py-1 bg-black bg-opacity-50 rounded-full text-xs text-white\",\n          children: \"Double-tap to lock controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 693,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"eQ55+cHhVwkeWbQIdXyBn4OTSF4=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","VideoDisplay","Users","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre3","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","alwaysShowControls","setAlwaysShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","streamReady","setStreamReady","forceActiveRef","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","stateCheckerInterval","stateCheckTimeouts","activeSinceRef","callStatusRef","mouseMoveTimerRef","current","log","message","console","clearTimeout","setTimeout","forceVideoStateCheck","shouldSetActive","srcObject","tracks","getTracks","length","paused","play","catch","e","isCallActive","hasRemoteStream","Date","now","mediaManager","hasLocalStream","localStream","toggleVideo","videoOff","toggleAlwaysShowControls","prevValue","newValue","localStorage","setItem","err","error","savedPreference","getItem","handleEndCall","endCall","name","handleLocalStream","stream","callbacks","onLocalStream","onRemoteStream","muted","clearInterval","setInterval","prev","onCallStarted","onCallEnded","onICEConnectionStateChange","state","updateCallbacks","getLocalMedia","then","unsubscribeCallState","on","unsubscribeError","fatal","unsubscribeTrackAdded","handleUserActivity","window","addEventListener","lastTapTime","handleDoubleTap","DOUBLE_TAP_THRESHOLD","preventDefault","_localVideoRef$curren","_remoteVideoRef$curre","forEach","timeout","removeEventListener","track","stop","toggleAudio","formatTime","seconds","mins","Math","floor","secs","toString","padStart","_remoteVideoRef$curre2","checkForTracks","handleCanPlay","handleLoadedMetadata","readyState","checkTimer","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","forceActiveState","zIndex","onClick","stopPropagation","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // New state for control preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  \n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n  \n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null); // Added ref for the timer\n  \n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n  \n  // Enhanced logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n      \n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      mouseMoveTimerRef.current = setTimeout(() => {\n        if (!alwaysShowControls) {\n          setShowControls(false);\n        }\n      }, 15000); // 15 seconds for initial call activation\n    }\n  }, [callStatus, alwaysShowControls]);\n  \n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    \n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    \n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      log(`Remote video has ${tracks.length} tracks`);\n      \n      if (tracks.length > 0) {\n        log('Tracks detected, should force active UI state');\n        shouldSetActive = true;\n        \n        // Try to play the video if paused\n        if (remoteVideoRef.current.paused) {\n          log('Video is paused, attempting to play');\n          remoteVideoRef.current.play().catch(e => {\n            log(`Auto-play failed: ${e.message}`);\n          });\n        }\n      }\n    }\n    \n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n    \n    // Check for connection manager remote stream\n    if (webRTCService.hasRemoteStream && webRTCService.hasRemoteStream()) {\n      log('WebRTC has remote stream, should force active state');\n      shouldSetActive = true;\n    }\n    \n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n    \n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && (Date.now() - activeSinceRef.current > 5000)) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n    \n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n      \n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n\n    // ADDED: Check local video and ensure it's displaying\n    if (localVideoRef.current && webRTCService.mediaManager.hasLocalStream()) {\n      if (!localVideoRef.current.srcObject) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        localVideoRef.current.play().catch(e => log(`Local play error: ${e.message}`));\n      }\n    }\n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n  \n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      // Use functional state update to ensure we work with the latest state\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n        \n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n          \n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        }\n        \n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        \n        return newValue;\n      });\n      \n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n  \n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n  \n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n    \n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n    \n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = (stream) => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n        \n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n        \n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            \n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n    \n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n          \n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Make sure controls are visible when call starts\n        setShowControls(true);\n        \n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state changed to: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .then(stream => {\n          log(`Local media access granted with ${stream.getTracks().length} tracks`);\n          // Explicitly set local video source here as well for redundancy\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n          }\n        })\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n    \n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n    \n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [\n      setTimeout(() => forceVideoStateCheck(), 2000),\n      setTimeout(() => forceVideoStateCheck(), 5000),\n      setTimeout(() => forceVideoStateCheck(), 8000),\n      // Force active state after 10 seconds\n      setTimeout(() => {\n        if (callStatusRef.current === 'connecting') {\n          log('10 seconds passed, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          forceActiveRef.current = true;\n          \n          // Show controls again when forcing active state\n          setShowControls(true);\n        }\n      }, 10000)\n    ];\n    \n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n      \n      // Never go backwards from active to connecting\n      if (state === 'active' || (state === 'connecting' && callStatusRef.current !== 'active')) {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n        \n        // Show controls on state change\n        setShowControls(true);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', (error) => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      \n      // Show controls during errors\n      setShowControls(true);\n      \n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n      \n      // Show controls when tracks are added\n      setShowControls(true);\n    });\n    \n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000); // Increased from 5000 to 10000 (10 seconds)\n        }\n      }\n    };\n    \n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n    \n    // Double-tap handler to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = (e) => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n      \n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      \n      lastTapTime = now;\n    };\n    \n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n    \n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls after forcing active\n        setShowControls(true);\n      }\n    }, 1000);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      \n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      \n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      \n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      \n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    \n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    if (remoteVideoRef.current?.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n          \n          // Show controls when tracks are detected\n          setShowControls(true);\n          return true;\n        }\n        return false;\n      };\n      \n      if (checkForTracks()) return; // Tracks already present\n      \n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls when video can play\n        setShowControls(true);\n      };\n      \n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      \n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n      \n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) { // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      \n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n        \n        // Make sure controls are visible\n        setShowControls(true);\n      }, 15000); // Force active after 15 seconds max\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n  \n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        \n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n      \n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && \n            (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      \n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          // Using the improved VideoDisplay component for active call\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n            callStatus={callStatus}\n            forceActiveState={forceActiveRef.current}\n          >\n            {/* Render header and connection status inside VideoDisplay */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls || connectionQuality !== 'good'} // Always show when connection is not good\n            />\n            \n            {/* Active call visual indicator */}\n            <div \n              className={`absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`}\n              style={{ zIndex: 500 }}\n            >\n              Active\n            </div>\n            \n            {/* Always-show controls toggle button */}\n            <div \n  className={`absolute top-16 right-4 px-2 py-1 rounded-full transition-all duration-300 cursor-pointer ${showControls ? 'opacity-100' : 'opacity-0'}`}\n  style={{ \n    backgroundColor: alwaysShowControls ? \n      'rgba(0, 200, 100, 0.6)' : 'rgba(100, 100, 100, 0.6)',\n    backdropFilter: 'blur(4px)',\n    zIndex: 500\n  }}\n  onClick={(e) => {\n    // Stop event propagation to prevent it from reaching parent elements\n    e.stopPropagation();\n    e.preventDefault();\n    toggleAlwaysShowControls();\n  }}\n>\n  <div className=\"flex items-center\">\n    <span className=\"text-xs text-white font-medium\">\n      {alwaysShowControls ? 'Controls Locked' : 'Lock Controls'}\n    </span>\n  </div>\n</div>\n          </VideoDisplay>\n        )}\n        \n        {/* Controls - with improved visibility and state handling */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n        \n        {/* Instructions for touch devices */}\n        <div \n          className={`absolute bottom-32 left-0 right-0 flex justify-center transition-opacity duration-500 ${\n            showControls && !alwaysShowControls ? 'opacity-50' : 'opacity-0'\n          }`}\n        >\n          <div className=\"px-3 py-1 bg-black bg-opacity-50 rounded-full text-xs text-white\">\n            Double-tap to lock controls\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}