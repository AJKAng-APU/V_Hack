{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { colors } from './colors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize theme from localStorage if available\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const savedTheme = localStorage.getItem('healthsync_darkmode');\n    return savedTheme === 'true';\n  });\n\n  // Current theme colors based on mode\n  const currentColors = isDarkMode ? colors.dark : colors.light;\n\n  // Toggle dark mode\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  // Save to localStorage when changed\n  useEffect(() => {\n    localStorage.setItem('healthsync_darkmode', isDarkMode);\n\n    // Apply class to document body for global styling\n    if (isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n\n    // Apply color scheme meta tag for browser UI\n    const metaThemeColor = document.querySelector('meta[name=theme-color]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', isDarkMode ? colors.dark.background : colors.light.background);\n    }\n  }, [isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleDarkMode,\n      colors: currentColors\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the theme context\n_s(ThemeProvider, \"zAt3hk5r5W3ZAApDNZSIcxeiDSc=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","colors","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","currentColors","dark","light","toggleDarkMode","setItem","document","body","classList","add","remove","metaThemeColor","querySelector","setAttribute","background","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { colors } from './colors';\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  // Initialize theme from localStorage if available\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    const savedTheme = localStorage.getItem('healthsync_darkmode');\n    return savedTheme === 'true';\n  });\n  \n  // Current theme colors based on mode\n  const currentColors = isDarkMode ? colors.dark : colors.light;\n  \n  // Toggle dark mode\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  \n  // Save to localStorage when changed\n  useEffect(() => {\n    localStorage.setItem('healthsync_darkmode', isDarkMode);\n    \n    // Apply class to document body for global styling\n    if (isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n    \n    // Apply color scheme meta tag for browser UI\n    const metaThemeColor = document.querySelector('meta[name=theme-color]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', isDarkMode ? colors.dark.background : colors.light.background);\n    }\n  }, [isDarkMode]);\n  \n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleDarkMode, colors: currentColors }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook for consuming the theme context\nexport const useTheme = () => useContext(ThemeContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,YAAY,gBAAGP,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMQ,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,MAAM;IACjD,MAAMY,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;IAC9D,OAAOF,UAAU,KAAK,MAAM;EAC9B,CAAC,CAAC;;EAEF;EACA,MAAMG,aAAa,GAAGL,UAAU,GAAGP,MAAM,CAACa,IAAI,GAAGb,MAAM,CAACc,KAAK;;EAE7D;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BP,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;;EAED;EACAR,SAAS,CAAC,MAAM;IACdW,YAAY,CAACM,OAAO,CAAC,qBAAqB,EAAET,UAAU,CAAC;;IAEvD;IACA,IAAIA,UAAU,EAAE;MACdU,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1C,CAAC,MAAM;MACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;IAC7C;;IAEA;IACA,MAAMC,cAAc,GAAGL,QAAQ,CAACM,aAAa,CAAC,wBAAwB,CAAC;IACvE,IAAID,cAAc,EAAE;MAClBA,cAAc,CAACE,YAAY,CAAC,SAAS,EAAEjB,UAAU,GAAGP,MAAM,CAACa,IAAI,CAACY,UAAU,GAAGzB,MAAM,CAACc,KAAK,CAACW,UAAU,CAAC;IACvG;EACF,CAAC,EAAE,CAAClB,UAAU,CAAC,CAAC;EAEhB,oBACEL,OAAA,CAACC,YAAY,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,UAAU;MAAEQ,cAAc;MAAEf,MAAM,EAAEY;IAAc,CAAE;IAAAP,QAAA,EACjFA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAzB,EAAA,CAxCaF,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AAyC1B,OAAO,MAAM6B,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMpC,UAAU,CAACK,YAAY,CAAC;AAAA;AAAC+B,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}