{"ast":null,"code":"import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n\n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n\n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n\n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false; // Track active calls\n    this.isCallConnected = false; // Track established connections\n\n    // Connection stability enhancements\n    this.reconnectionAttempts = 0;\n    this.maxReconnectionAttempts = 3;\n    this.disconnectionTimer = null;\n    this.lastOffer = null;\n\n    // Callback functions\n    this.onLocalStream = null;\n    this.onRemoteStream = null;\n    this.onCallStarted = null;\n    this.onCallEnded = null;\n    this.onCallConnecting = null;\n    this.onIncomingCall = null;\n    this.onICEConnectionStateChange = null;\n\n    // Initialization state\n    this.isInitialized = false;\n  }\n\n  /**\n   * Log messages with timestamp and store in localStorage\n   */\n  log(message, data = null) {\n    const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n    const prefix = `[WebRTC ${timestamp}]`;\n    if (data) {\n      console.log(prefix, message, data);\n    } else {\n      console.log(prefix, message);\n    }\n\n    // Store logs in localStorage for debugging across page refreshes\n    const logs = JSON.parse(localStorage.getItem('webrtc_logs') || '[]');\n    logs.push({\n      timestamp: new Date().toISOString(),\n      message,\n      data: data ? JSON.stringify(data) : null\n    });\n\n    // Keep only the last 100 logs\n    if (logs.length > 100) {\n      logs.shift();\n    }\n    localStorage.setItem('webrtc_logs', JSON.stringify(logs));\n  }\n\n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    this.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n\n    // Set up callbacks\n    this.updateCallbacks(callbacks);\n\n    // Connect to the signaling server if not already connected\n    if (!this.socket || !this.socket.connected) {\n      // Use provided URL, fallback to production URL, then localhost as last resort\n      const signalingServer = serverUrl || process.env.REACT_APP_SIGNALING_SERVER || 'http://localhost:3001';\n      this.log('Connecting to signaling server:', signalingServer);\n      this.socket = io(signalingServer);\n\n      // Set up event listeners for signaling messages\n      this.setupSocketListeners();\n    }\n\n    // Register user ID with the signaling server\n    if (this.socket) {\n      this.socket.emit('register', userId);\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Only update provided callbacks, keep existing ones otherwise\n    if (callbacks.onLocalStream !== undefined) this.onLocalStream = callbacks.onLocalStream;\n    if (callbacks.onRemoteStream !== undefined) this.onRemoteStream = callbacks.onRemoteStream;\n    if (callbacks.onCallStarted !== undefined) this.onCallStarted = callbacks.onCallStarted;\n    if (callbacks.onCallEnded !== undefined) this.onCallEnded = callbacks.onCallEnded;\n    if (callbacks.onCallConnecting !== undefined) this.onCallConnecting = callbacks.onCallConnecting;\n    if (callbacks.onIncomingCall !== undefined) this.onIncomingCall = callbacks.onIncomingCall;\n    if (callbacks.onICEConnectionStateChange !== undefined) this.onICEConnectionStateChange = callbacks.onICEConnectionStateChange;\n\n    // Initialize default callback functions if not already set\n    this.onLocalStream = this.onLocalStream || (() => {});\n    this.onRemoteStream = this.onRemoteStream || (() => {});\n    this.onCallStarted = this.onCallStarted || (() => {});\n    this.onCallEnded = this.onCallEnded || (() => {});\n    this.onCallConnecting = this.onCallConnecting || (() => {});\n    this.onIncomingCall = this.onIncomingCall || (() => {});\n    this.onICEConnectionStateChange = this.onICEConnectionStateChange || (() => {});\n  }\n\n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({\n      callerUserId,\n      offerSDP\n    }) => {\n      this.log('Incoming call from:', callerUserId);\n\n      // If there's already an active call, ignore this one\n      if (this.isCallActive) {\n        this.log('Already in a call, ignoring incoming call');\n        return;\n      }\n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n\n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n\n      // Notify the application of the incoming call\n      this.onIncomingCall(callerUserId);\n    });\n\n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({\n      answerSDP\n    }) => {\n      this.log('Call was answered, setting remote description');\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answerSDP));\n        }\n      } catch (error) {\n        this.log('Error setting remote description:', error.message);\n        console.error('Error setting remote description:', error);\n      }\n    });\n\n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({\n      candidate\n    }) => {\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n          this.log('Added ICE candidate');\n        }\n      } catch (error) {\n        this.log('Error adding ICE candidate:', error.message);\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n\n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      this.log('Call ended remotely');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n\n    // Handle call failure\n    this.socket.on('call-failed', ({\n      message,\n      targetUserId\n    }) => {\n      this.log('Call failed:', message);\n      this.onCallEnded();\n      this.resetCallState();\n    });\n  }\n\n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // If there's already an active call, end it first\n      if (this.isCallActive) {\n        this.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      this.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.isCallActive = true; // Mark call as active\n      this.onCallConnecting();\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Create an offer (SDP)\n      this.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n\n      // Store offer for potential reconnection\n      this.lastOffer = offer;\n\n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n\n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      this.log('Call offer sent');\n    } catch (error) {\n      this.log('Error making call:', error.message);\n      console.error('Error making call:', error);\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      this.log('Accepting incoming call from:', this.targetUserId);\n      this.isCallActive = true; // Mark call as active\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Set the remote description from the stored offer\n      this.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(this.pendingOffer));\n\n      // Create an answer\n      this.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n\n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n\n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      this.log('Call accepted, answer sent');\n      this.onCallConnecting();\n    } catch (error) {\n      this.log('Error accepting call:', error.message);\n      console.error('Error accepting call:', error);\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    this.log('Ending call, notify peer:', notifyPeer);\n\n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', {\n        targetUserId: this.targetUserId\n      });\n    }\n\n    // Clear any reconnection timers\n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n\n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n\n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Stopping track:', track.kind);\n        track.stop();\n      });\n      this.localStream = null;\n    }\n\n    // Mark call as inactive\n    this.isCallActive = false;\n\n    // Trigger callback\n    this.onCallEnded();\n\n    // Reset state\n    this.resetCallState();\n  }\n\n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    this.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n    this.isCallConnected = false;\n    this.reconnectionAttempts = 0;\n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n    this.lastOffer = null;\n  }\n\n  /**\n   * Initialize the WebRTC peer connection\n   */\n  initializePeerConnection() {\n    // Enhanced ICE servers configuration with multiple STUN servers and free TURN servers\n    const configuration = {\n      iceServers: [\n      // Multiple STUN servers for better connectivity\n      {\n        urls: 'stun:stun.l.google.com:19302'\n      }, {\n        urls: 'stun:stun1.l.google.com:19302'\n      }, {\n        urls: 'stun:stun2.l.google.com:19302'\n      }, {\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'stun:stun4.l.google.com:19302'\n      },\n      // Free TURN server (replace with your own in production)\n      {\n        urls: 'turn:openrelay.metered.ca:80',\n        username: 'openrelayproject',\n        credential: 'openrelayproject'\n      }, {\n        urls: 'turn:openrelay.metered.ca:443',\n        username: 'openrelayproject',\n        credential: 'openrelayproject'\n      },\n      // If environment variables exist, add them too\n      ...(process.env.REACT_APP_TURN_SERVER ? [{\n        urls: process.env.REACT_APP_TURN_SERVER,\n        username: process.env.REACT_APP_TURN_USERNAME || '',\n        credential: process.env.REACT_APP_TURN_CREDENTIAL || ''\n      }] : [])],\n      iceCandidatePoolSize: 10,\n      // The following helps with connection stability\n      sdpSemantics: 'unified-plan'\n    };\n    this.log('Initializing peer connection with configuration:', configuration);\n\n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n\n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n\n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = event => {\n      this.log('Received remote track:', event.track.kind);\n\n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.onRemoteStream(this.remoteStream);\n      }\n\n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        this.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n\n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        const candidateType = event.candidate.candidate.split(' ')[7]; // Extract type (host, srflx, relay)\n        this.log('Generated ICE candidate of type:', candidateType);\n\n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Additional monitoring for ICE gathering state\n    this.peerConnection.onicegatheringstatechange = () => {\n      this.log('ICE gathering state changed:', this.peerConnection.iceGatheringState);\n    };\n\n    // Monitor signaling state\n    this.peerConnection.onsignalingstatechange = () => {\n      this.log('Signaling state changed:', this.peerConnection.signalingState);\n    };\n\n    // Monitor connection state\n    this.peerConnection.onconnectionstatechange = () => {\n      this.log('Connection state changed:', this.peerConnection.connectionState);\n    };\n\n    // Improved ICE connection state handling with reconnection attempts\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      this.log('ICE connection state changed to:', state);\n      this.onICEConnectionStateChange(state);\n\n      // Handle connection establishment\n      if (state === 'connected' || state === 'completed') {\n        this.log('Call connected successfully!');\n        if (!this.isCallConnected) {\n          this.isCallConnected = true;\n          this.onCallStarted();\n\n          // Reset reconnection attempts\n          this.reconnectionAttempts = 0;\n        }\n      }\n      // Only handle connection failures after multiple attempts\n      else if (state === 'failed') {\n        this.log('Connection failed');\n\n        // Attempt to restart ICE if possible before ending the call\n        if (this.reconnectionAttempts < this.maxReconnectionAttempts) {\n          this.reconnectionAttempts++;\n          this.log(`Trying to reconnect (attempt ${this.reconnectionAttempts}/${this.maxReconnectionAttempts})...`);\n          try {\n            // Try to restart ICE connection\n            this.peerConnection.restartIce();\n\n            // If we have the original offer, we could also try to renegotiate\n            if (this.isCallInitiator && this.lastOffer) {\n              this.log('Attempting to renegotiate connection...');\n              setTimeout(async () => {\n                try {\n                  const offer = await this.peerConnection.createOffer({\n                    iceRestart: true\n                  });\n                  await this.peerConnection.setLocalDescription(offer);\n                  this.socket.emit('call-user', {\n                    targetUserId: this.targetUserId,\n                    offerSDP: offer,\n                    callerUserId: this.userId\n                  });\n                  this.lastOffer = offer;\n                } catch (error) {\n                  this.log('Error during ICE restart negotiation:', error.message);\n                  console.error('Error during ICE restart negotiation:', error);\n                }\n              }, 1000);\n            }\n          } catch (error) {\n            this.log('Error attempting to restart ICE:', error.message);\n            console.error('Error attempting to restart ICE:', error);\n          }\n        } else {\n          this.log('Max reconnection attempts reached, ending call');\n          this.endCall(true);\n        }\n      }\n      // For disconnected state, wait a bit before taking action\n      else if (state === 'disconnected') {\n        this.log('Connection temporarily disconnected');\n\n        // Don't end the call immediately, add a delay to allow for reconnection\n        if (!this.disconnectionTimer) {\n          this.disconnectionTimer = setTimeout(() => {\n            // After timeout, check if state is still disconnected\n            if (this.peerConnection && this.peerConnection.iceConnectionState === 'disconnected') {\n              this.log('Connection remained disconnected for too long');\n              this.endCall(true);\n            }\n            this.disconnectionTimer = null;\n          }, 10000); // Wait 10 seconds before ending the call\n        }\n      }\n      // Reset the disconnection timer if we move out of the disconnected state\n      else if (this.disconnectionTimer && state !== 'disconnected') {\n        clearTimeout(this.disconnectionTimer);\n        this.disconnectionTimer = null;\n      }\n    };\n  }\n\n  /**\n   * Get access to local camera and microphone\n   * @param {boolean|object} videoConstraints - Constraints for video\n   * @param {boolean|object} audioConstraints - Constraints for audio\n   * @returns {Promise<MediaStream>} - Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      this.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n\n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      this.log('Access to local media granted');\n      this.localStream = stream;\n      this.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      this.log('Error accessing media devices:', error.message);\n      console.error('Error accessing media devices:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Toggle audio mute state\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        this.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n\n  /**\n   * Toggle video on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        this.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n\n  /**\n   * Disconnect from signaling server and clean up resources\n   */\n  disconnect() {\n    this.log('Disconnecting WebRTC service');\n\n    // End any active call\n    this.endCall(true);\n\n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n    // Reset initialization status\n    this.isInitialized = false;\n\n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;","map":{"version":3,"names":["io","WebRTCService","constructor","socket","peerConnection","localStream","remoteStream","userId","targetUserId","isCallInitiator","pendingOffer","isCallActive","isCallConnected","reconnectionAttempts","maxReconnectionAttempts","disconnectionTimer","lastOffer","onLocalStream","onRemoteStream","onCallStarted","onCallEnded","onCallConnecting","onIncomingCall","onICEConnectionStateChange","isInitialized","log","message","data","timestamp","Date","toISOString","split","substring","prefix","console","logs","JSON","parse","localStorage","getItem","push","stringify","length","shift","setItem","initialize","callbacks","serverUrl","updateCallbacks","connected","signalingServer","process","env","REACT_APP_SIGNALING_SERVER","setupSocketListeners","emit","undefined","on","callerUserId","offerSDP","answerSDP","setRemoteDescription","RTCSessionDescription","error","candidate","addIceCandidate","RTCIceCandidate","endCall","resetCallState","makeCall","getLocalMedia","initializePeerConnection","offer","createOffer","setLocalDescription","acceptCall","answer","createAnswer","notifyPeer","clearTimeout","close","getTracks","forEach","track","kind","stop","configuration","iceServers","urls","username","credential","REACT_APP_TURN_SERVER","REACT_APP_TURN_USERNAME","REACT_APP_TURN_CREDENTIAL","iceCandidatePoolSize","sdpSemantics","RTCPeerConnection","addTrack","ontrack","event","MediaStream","streams","onicecandidate","candidateType","onicegatheringstatechange","iceGatheringState","onsignalingstatechange","signalingState","onconnectionstatechange","connectionState","oniceconnectionstatechange","state","iceConnectionState","restartIce","setTimeout","iceRestart","videoConstraints","audioConstraints","video","audio","stream","navigator","mediaDevices","getUserMedia","toggleAudio","muted","getAudioTracks","enabled","toggleVideo","videoOff","getVideoTracks","disconnect","webRTCService"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/services/WebRTCService.js"],"sourcesContent":["import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n    \n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n    \n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n    \n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false; // Track active calls\n    this.isCallConnected = false; // Track established connections\n    \n    // Connection stability enhancements\n    this.reconnectionAttempts = 0;\n    this.maxReconnectionAttempts = 3;\n    this.disconnectionTimer = null;\n    this.lastOffer = null;\n    \n    // Callback functions\n    this.onLocalStream = null;\n    this.onRemoteStream = null;\n    this.onCallStarted = null;\n    this.onCallEnded = null;\n    this.onCallConnecting = null;\n    this.onIncomingCall = null;\n    this.onICEConnectionStateChange = null;\n    \n    // Initialization state\n    this.isInitialized = false;\n  }\n  \n  /**\n   * Log messages with timestamp and store in localStorage\n   */\n  log(message, data = null) {\n    const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n    const prefix = `[WebRTC ${timestamp}]`;\n    \n    if (data) {\n      console.log(prefix, message, data);\n    } else {\n      console.log(prefix, message);\n    }\n    \n    // Store logs in localStorage for debugging across page refreshes\n    const logs = JSON.parse(localStorage.getItem('webrtc_logs') || '[]');\n    logs.push({\n      timestamp: new Date().toISOString(),\n      message,\n      data: data ? JSON.stringify(data) : null\n    });\n    \n    // Keep only the last 100 logs\n    if (logs.length > 100) {\n      logs.shift();\n    }\n    \n    localStorage.setItem('webrtc_logs', JSON.stringify(logs));\n  }\n  \n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    this.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n    \n    // Set up callbacks\n    this.updateCallbacks(callbacks);\n    \n    // Connect to the signaling server if not already connected\n    if (!this.socket || !this.socket.connected) {\n      // Use provided URL, fallback to production URL, then localhost as last resort\n      const signalingServer = serverUrl || \n                             (process.env.REACT_APP_SIGNALING_SERVER || \n                              'http://localhost:3001');\n      \n      this.log('Connecting to signaling server:', signalingServer);\n      this.socket = io(signalingServer);\n      \n      // Set up event listeners for signaling messages\n      this.setupSocketListeners();\n    }\n    \n    // Register user ID with the signaling server\n    if (this.socket) {\n      this.socket.emit('register', userId);\n    }\n    \n    this.isInitialized = true;\n  }\n  \n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Only update provided callbacks, keep existing ones otherwise\n    if (callbacks.onLocalStream !== undefined) \n      this.onLocalStream = callbacks.onLocalStream;\n    if (callbacks.onRemoteStream !== undefined) \n      this.onRemoteStream = callbacks.onRemoteStream;\n    if (callbacks.onCallStarted !== undefined) \n      this.onCallStarted = callbacks.onCallStarted;\n    if (callbacks.onCallEnded !== undefined) \n      this.onCallEnded = callbacks.onCallEnded;\n    if (callbacks.onCallConnecting !== undefined) \n      this.onCallConnecting = callbacks.onCallConnecting;\n    if (callbacks.onIncomingCall !== undefined) \n      this.onIncomingCall = callbacks.onIncomingCall;\n    if (callbacks.onICEConnectionStateChange !== undefined) \n      this.onICEConnectionStateChange = callbacks.onICEConnectionStateChange;\n    \n    // Initialize default callback functions if not already set\n    this.onLocalStream = this.onLocalStream || (() => {});\n    this.onRemoteStream = this.onRemoteStream || (() => {});\n    this.onCallStarted = this.onCallStarted || (() => {});\n    this.onCallEnded = this.onCallEnded || (() => {});\n    this.onCallConnecting = this.onCallConnecting || (() => {});\n    this.onIncomingCall = this.onIncomingCall || (() => {});\n    this.onICEConnectionStateChange = this.onICEConnectionStateChange || (() => {});\n  }\n  \n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({ callerUserId, offerSDP }) => {\n      this.log('Incoming call from:', callerUserId);\n      \n      // If there's already an active call, ignore this one\n      if (this.isCallActive) {\n        this.log('Already in a call, ignoring incoming call');\n        return;\n      }\n      \n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n      \n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n      \n      // Notify the application of the incoming call\n      this.onIncomingCall(callerUserId);\n    });\n    \n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({ answerSDP }) => {\n      this.log('Call was answered, setting remote description');\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.setRemoteDescription(\n            new RTCSessionDescription(answerSDP)\n          );\n        }\n      } catch (error) {\n        this.log('Error setting remote description:', error.message);\n        console.error('Error setting remote description:', error);\n      }\n    });\n    \n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({ candidate }) => {\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.addIceCandidate(\n            new RTCIceCandidate(candidate)\n          );\n          this.log('Added ICE candidate');\n        }\n      } catch (error) {\n        this.log('Error adding ICE candidate:', error.message);\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n    \n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      this.log('Call ended remotely');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n    \n    // Handle call failure\n    this.socket.on('call-failed', ({ message, targetUserId }) => {\n      this.log('Call failed:', message);\n      this.onCallEnded();\n      this.resetCallState();\n    });\n  }\n  \n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // If there's already an active call, end it first\n      if (this.isCallActive) {\n        this.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      \n      this.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.isCallActive = true; // Mark call as active\n      this.onCallConnecting();\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Create an offer (SDP)\n      this.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n      \n      // Store offer for potential reconnection\n      this.lastOffer = offer;\n      \n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n      \n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      \n      this.log('Call offer sent');\n    } catch (error) {\n      this.log('Error making call:', error.message);\n      console.error('Error making call:', error);\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      this.log('Accepting incoming call from:', this.targetUserId);\n      this.isCallActive = true; // Mark call as active\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Set the remote description from the stored offer\n      this.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(\n        new RTCSessionDescription(this.pendingOffer)\n      );\n      \n      // Create an answer\n      this.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n      \n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n      \n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      \n      this.log('Call accepted, answer sent');\n      this.onCallConnecting();\n    } catch (error) {\n      this.log('Error accepting call:', error.message);\n      console.error('Error accepting call:', error);\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    this.log('Ending call, notify peer:', notifyPeer);\n    \n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', { targetUserId: this.targetUserId });\n    }\n    \n    // Clear any reconnection timers\n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n    \n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n    \n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Stopping track:', track.kind);\n        track.stop();\n      });\n      this.localStream = null;\n    }\n    \n    // Mark call as inactive\n    this.isCallActive = false;\n    \n    // Trigger callback\n    this.onCallEnded();\n    \n    // Reset state\n    this.resetCallState();\n  }\n  \n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    this.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n    this.isCallConnected = false;\n    this.reconnectionAttempts = 0;\n    \n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n    \n    this.lastOffer = null;\n  }\n  \n  /**\n   * Initialize the WebRTC peer connection\n   */\n  initializePeerConnection() {\n    // Enhanced ICE servers configuration with multiple STUN servers and free TURN servers\n    const configuration = {\n      iceServers: [\n        // Multiple STUN servers for better connectivity\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' },\n        { urls: 'stun:stun3.l.google.com:19302' },\n        { urls: 'stun:stun4.l.google.com:19302' },\n        // Free TURN server (replace with your own in production)\n        {\n          urls: 'turn:openrelay.metered.ca:80',\n          username: 'openrelayproject',\n          credential: 'openrelayproject'\n        },\n        {\n          urls: 'turn:openrelay.metered.ca:443',\n          username: 'openrelayproject',\n          credential: 'openrelayproject'\n        },\n        // If environment variables exist, add them too\n        ...(process.env.REACT_APP_TURN_SERVER ? [{\n          urls: process.env.REACT_APP_TURN_SERVER,\n          username: process.env.REACT_APP_TURN_USERNAME || '',\n          credential: process.env.REACT_APP_TURN_CREDENTIAL || ''\n        }] : [])\n      ],\n      iceCandidatePoolSize: 10,\n      // The following helps with connection stability\n      sdpSemantics: 'unified-plan'\n    };\n    \n    this.log('Initializing peer connection with configuration:', configuration);\n    \n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n    \n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n    \n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = (event) => {\n      this.log('Received remote track:', event.track.kind);\n      \n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.onRemoteStream(this.remoteStream);\n      }\n      \n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        this.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n    \n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        const candidateType = event.candidate.candidate.split(' ')[7]; // Extract type (host, srflx, relay)\n        this.log('Generated ICE candidate of type:', candidateType);\n        \n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n    \n    // Additional monitoring for ICE gathering state\n    this.peerConnection.onicegatheringstatechange = () => {\n      this.log('ICE gathering state changed:', this.peerConnection.iceGatheringState);\n    };\n    \n    // Monitor signaling state\n    this.peerConnection.onsignalingstatechange = () => {\n      this.log('Signaling state changed:', this.peerConnection.signalingState);\n    };\n    \n    // Monitor connection state\n    this.peerConnection.onconnectionstatechange = () => {\n      this.log('Connection state changed:', this.peerConnection.connectionState);\n    };\n    \n    // Improved ICE connection state handling with reconnection attempts\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      this.log('ICE connection state changed to:', state);\n      \n      this.onICEConnectionStateChange(state);\n      \n      // Handle connection establishment\n      if (state === 'connected' || state === 'completed') {\n        this.log('Call connected successfully!');\n        if (!this.isCallConnected) {\n          this.isCallConnected = true;\n          this.onCallStarted();\n          \n          // Reset reconnection attempts\n          this.reconnectionAttempts = 0;\n        }\n      } \n      // Only handle connection failures after multiple attempts\n      else if (state === 'failed') {\n        this.log('Connection failed');\n        \n        // Attempt to restart ICE if possible before ending the call\n        if (this.reconnectionAttempts < this.maxReconnectionAttempts) {\n          this.reconnectionAttempts++;\n          this.log(`Trying to reconnect (attempt ${this.reconnectionAttempts}/${this.maxReconnectionAttempts})...`);\n          \n          try {\n            // Try to restart ICE connection\n            this.peerConnection.restartIce();\n            \n            // If we have the original offer, we could also try to renegotiate\n            if (this.isCallInitiator && this.lastOffer) {\n              this.log('Attempting to renegotiate connection...');\n              setTimeout(async () => {\n                try {\n                  const offer = await this.peerConnection.createOffer({ iceRestart: true });\n                  await this.peerConnection.setLocalDescription(offer);\n                  \n                  this.socket.emit('call-user', {\n                    targetUserId: this.targetUserId,\n                    offerSDP: offer,\n                    callerUserId: this.userId\n                  });\n                  \n                  this.lastOffer = offer;\n                } catch (error) {\n                  this.log('Error during ICE restart negotiation:', error.message);\n                  console.error('Error during ICE restart negotiation:', error);\n                }\n              }, 1000);\n            }\n          } catch (error) {\n            this.log('Error attempting to restart ICE:', error.message);\n            console.error('Error attempting to restart ICE:', error);\n          }\n        } else {\n          this.log('Max reconnection attempts reached, ending call');\n          this.endCall(true);\n        }\n      }\n      // For disconnected state, wait a bit before taking action\n      else if (state === 'disconnected') {\n        this.log('Connection temporarily disconnected');\n        \n        // Don't end the call immediately, add a delay to allow for reconnection\n        if (!this.disconnectionTimer) {\n          this.disconnectionTimer = setTimeout(() => {\n            // After timeout, check if state is still disconnected\n            if (this.peerConnection && \n                this.peerConnection.iceConnectionState === 'disconnected') {\n              this.log('Connection remained disconnected for too long');\n              this.endCall(true);\n            }\n            this.disconnectionTimer = null;\n          }, 10000); // Wait 10 seconds before ending the call\n        }\n      }\n      // Reset the disconnection timer if we move out of the disconnected state\n      else if (this.disconnectionTimer && state !== 'disconnected') {\n        clearTimeout(this.disconnectionTimer);\n        this.disconnectionTimer = null;\n      }\n    };\n  }\n\n  /**\n   * Get access to local camera and microphone\n   * @param {boolean|object} videoConstraints - Constraints for video\n   * @param {boolean|object} audioConstraints - Constraints for audio\n   * @returns {Promise<MediaStream>} - Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      this.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      this.log('Access to local media granted');\n      \n      this.localStream = stream;\n      this.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      this.log('Error accessing media devices:', error.message);\n      console.error('Error accessing media devices:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Toggle audio mute state\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        this.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n  \n  /**\n   * Toggle video on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        this.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n  \n  /**\n   * Disconnect from signaling server and clean up resources\n   */\n  disconnect() {\n    this.log('Disconnecting WebRTC service');\n    \n    // End any active call\n    this.endCall(true);\n    \n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    // Reset initialization status\n    this.isInitialized = false;\n    \n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}