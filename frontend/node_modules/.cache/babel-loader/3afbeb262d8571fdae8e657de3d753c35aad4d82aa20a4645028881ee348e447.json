{"ast":null,"code":"import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n * Enhanced with better state management and error handling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n\n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n\n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n\n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false; // Track active calls\n    this.isCallConnected = false; // Track established connections\n\n    // ENHANCED: Centralized call state management\n    this.callState = 'idle'; // idle, connecting, active, ended\n\n    // ENHANCED: Simple event system for better component coordination\n    this.eventListeners = {};\n\n    // Connection stability enhancements\n    this.reconnectionAttempts = 0;\n    this.maxReconnectionAttempts = 3;\n    this.disconnectionTimer = null;\n    this.disconnectionFailureTimer = null; // ENHANCED: Added longer timeout timer\n    this.lastOffer = null;\n    this.iceConnectionState = null; // ENHANCED: Track previous state\n\n    // Callback functions\n    this.onLocalStream = null;\n    this.onRemoteStream = null;\n    this.onCallStarted = null;\n    this.onCallEnded = null;\n    this.onCallConnecting = null;\n    this.onIncomingCall = null;\n    this.onICEConnectionStateChange = null;\n    this.onUserNotOnline = null;\n\n    // Initialization state\n    this.isInitialized = false;\n  }\n\n  /**\n   * Log messages with timestamp and store in localStorage\n   */\n  log(message, data = null) {\n    const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n    const prefix = `[WebRTC ${timestamp}]`;\n    if (data) {\n      console.log(prefix, message, data);\n    } else {\n      console.log(prefix, message);\n    }\n\n    // Store logs in localStorage for debugging across page refreshes\n    const logs = JSON.parse(localStorage.getItem('webrtc_logs') || '[]');\n    logs.push({\n      timestamp: new Date().toISOString(),\n      message,\n      data: data ? JSON.stringify(data) : null\n    });\n\n    // Keep only the last 100 logs\n    if (logs.length > 100) {\n      logs.shift();\n    }\n    localStorage.setItem('webrtc_logs', JSON.stringify(logs));\n  }\n\n  /**\n   * ENHANCED: Unified error handling method\n   */\n  handleError(context, error, fatal = false) {\n    this.log(`Error in ${context}:`, error.message);\n    console.error(`Error in ${context}:`, error);\n\n    // Emit error event for UI components to handle\n    this.emit('error', {\n      context,\n      message: error.message,\n      fatal\n    });\n\n    // If it's a fatal error, end the call\n    if (fatal) {\n      this.updateCallState('ended');\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * ENHANCED: Event emission system\n   */\n  emit(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  /**\n   * ENHANCED: Event subscription system\n   * Returns a function to unsubscribe the listener\n   */\n  on(event, callback) {\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n\n    // Return a function to remove the listener\n    return () => {\n      this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * ENHANCED: Centralized call state management\n   */\n  updateCallState(newState) {\n    if (this.callState !== newState) {\n      this.log(`Call state changing from ${this.callState} to ${newState}`);\n      this.callState = newState;\n\n      // Emit event for UI components\n      this.emit('callStateChanged', newState);\n\n      // Trigger appropriate callbacks\n      if (newState === 'active' && this.onCallStarted) this.onCallStarted();\n      if (newState === 'ended' && this.onCallEnded) this.onCallEnded();\n      if (newState === 'connecting' && this.onCallConnecting) this.onCallConnecting();\n    }\n  }\n\n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    // If already initialized with the same ID, just update callbacks\n    if (this.isInitialized && this.userId === userId) {\n      this.log('WebRTC service already initialized for user:', userId, '- updating callbacks only');\n      this.updateCallbacks(callbacks);\n      return;\n    }\n\n    // If initialized with a different ID, disconnect first\n    if (this.isInitialized && this.userId !== userId) {\n      this.log('Reinitializing with new user ID - disconnecting first');\n      this.disconnect();\n    }\n    this.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n\n    // Set up callbacks\n    this.updateCallbacks(callbacks);\n\n    // Connect to the signaling server if not already connected\n    if (!this.socket || !this.socket.connected) {\n      // Use provided URL, fallback to production URL, then localhost as last resort\n      const signalingServer = serverUrl || process.env.REACT_APP_SIGNALING_SERVER || 'http://localhost:3001';\n      this.log('Connecting to signaling server:', signalingServer);\n      this.socket = io(signalingServer);\n\n      // Set up event listeners for signaling messages\n      this.setupSocketListeners();\n    }\n\n    // Register user ID with the signaling server\n    if (this.socket) {\n      this.socket.emit('register', userId);\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Only update provided callbacks, keep existing ones otherwise\n    if (callbacks.onLocalStream !== undefined) this.onLocalStream = callbacks.onLocalStream;\n    if (callbacks.onRemoteStream !== undefined) this.onRemoteStream = callbacks.onRemoteStream;\n    if (callbacks.onCallStarted !== undefined) this.onCallStarted = callbacks.onCallStarted;\n    if (callbacks.onCallEnded !== undefined) this.onCallEnded = callbacks.onCallEnded;\n    if (callbacks.onCallConnecting !== undefined) this.onCallConnecting = callbacks.onCallConnecting;\n    if (callbacks.onIncomingCall !== undefined) this.onIncomingCall = callbacks.onIncomingCall;\n    if (callbacks.onICEConnectionStateChange !== undefined) this.onICEConnectionStateChange = callbacks.onICEConnectionStateChange;\n    if (callbacks.onUserNotOnline !== undefined) this.onUserNotOnline = callbacks.onUserNotOnline;\n\n    // Initialize default callback functions if not already set\n    this.onLocalStream = this.onLocalStream || (() => {});\n    this.onRemoteStream = this.onRemoteStream || (() => {});\n    this.onCallStarted = this.onCallStarted || (() => {});\n    this.onCallEnded = this.onCallEnded || (() => {});\n    this.onCallConnecting = this.onCallConnecting || (() => {});\n    this.onIncomingCall = this.onIncomingCall || (() => {});\n    this.onICEConnectionStateChange = this.onICEConnectionStateChange || (() => {});\n    this.onUserNotOnline = this.onUserNotOnline || (() => {});\n  }\n\n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({\n      callerUserId,\n      offerSDP\n    }) => {\n      this.log('Incoming call from:', callerUserId);\n\n      // If there's already an active call, ignore this one\n      if (this.isCallActive || this.callState === 'active' || this.callState === 'connecting') {\n        this.log('Already in a call, ignoring incoming call');\n        // Explicitly decline the call so the caller knows\n        this.socket.emit('call-declined', {\n          targetUserId: callerUserId\n        });\n        return;\n      }\n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n\n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n\n      // Update call state\n      this.updateCallState('connecting');\n\n      // Notify the application of the incoming call\n      this.onIncomingCall(callerUserId);\n    });\n\n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({\n      answerSDP\n    }) => {\n      this.log('Call was answered, setting remote description');\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answerSDP));\n        }\n      } catch (error) {\n        this.handleError('setting remote description', error);\n      }\n    });\n\n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({\n      candidate\n    }) => {\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n          this.log('Added ICE candidate');\n        }\n      } catch (error) {\n        this.handleError('adding ICE candidate', error);\n      }\n    });\n\n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      this.log('Call ended remotely');\n      this.updateCallState('ended');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n\n    // Handle call failure\n    this.socket.on('call-failed', ({\n      message,\n      targetUserId\n    }) => {\n      this.log('Call failed:', message);\n\n      // Handle user not online case\n      if (message === 'User is not online') {\n        if (this.onUserNotOnline) {\n          this.onUserNotOnline(targetUserId);\n        } else {\n          this.updateCallState('ended');\n        }\n      } else {\n        this.updateCallState('ended');\n      }\n      this.resetCallState();\n    });\n\n    // Handle user online status\n    this.socket.on('user-online-status', ({\n      userId,\n      isOnline,\n      responseId\n    }) => {\n      this.log('User online status received:', {\n        userId,\n        isOnline,\n        responseId\n      });\n      // The responseId is now used to match requests with responses\n      this.emit(`online-status-${responseId}`, {\n        userId,\n        isOnline\n      });\n    });\n  }\n\n  /**\n   * ENHANCED: Check if a user is online with request ID for reliable responses\n   * @param {string} userId - ID of the user to check\n   * @returns {Promise<boolean>} - Whether the user is online\n   */\n  checkUserOnline(userId) {\n    return new Promise(resolve => {\n      if (!this.socket || !this.socket.connected) {\n        this.log('Socket not connected, user is offline');\n        resolve(false);\n        return;\n      }\n\n      // Create a unique request ID to match the response\n      const requestId = `online-check-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n      this.log('Checking if user is online:', userId, 'with requestId:', requestId);\n      this.socket.emit('check-user-online', {\n        userId,\n        requestId\n      });\n\n      // Set up a one-time event listener specific to this request\n      const cleanupListener = this.on(`online-status-${requestId}`, ({\n        userId: responseUserId,\n        isOnline\n      }) => {\n        if (responseUserId === userId) {\n          clearTimeout(timeout);\n          this.log('User online status for', userId, ':', isOnline);\n          resolve(isOnline);\n        }\n      });\n\n      // Set a timeout in case we never get a response\n      const timeout = setTimeout(() => {\n        cleanupListener(); // Remove the listener\n        this.log('User online check timed out for:', userId);\n        resolve(false);\n      }, 5000);\n    });\n  }\n\n  /**\n   * ENHANCED: Attempt to reconnect during call problems\n   * @param {boolean} aggressive - Whether to use more aggressive reconnection tactics\n   */\n  async attemptReconnection(aggressive = false) {\n    this.log(`Attempting ${aggressive ? 'aggressive' : 'standard'} reconnection`);\n    try {\n      if (!this.peerConnection) {\n        this.log('No peer connection to reconnect');\n        return;\n      }\n\n      // First try to restart ICE\n      this.peerConnection.restartIce();\n\n      // For more aggressive reconnection, try recreating the offer\n      if (aggressive || this.isCallInitiator) {\n        this.log('Creating new offer with ICE restart');\n        const offer = await this.peerConnection.createOffer({\n          iceRestart: true,\n          offerToReceiveAudio: true,\n          offerToReceiveVideo: true\n        });\n        await this.peerConnection.setLocalDescription(offer);\n\n        // Store the new offer\n        this.lastOffer = offer;\n\n        // Send the new offer to the other user\n        this.socket.emit('call-user', {\n          targetUserId: this.targetUserId,\n          offerSDP: offer,\n          callerUserId: this.userId\n        });\n        this.log('Sent new offer for reconnection');\n      }\n    } catch (error) {\n      this.handleError('reconnection attempt', error);\n    }\n  }\n\n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // Check if the user is online first\n      const isOnline = await this.checkUserOnline(targetUserId);\n      if (!isOnline) {\n        this.log('Cannot make call - user is not online:', targetUserId);\n        if (this.onUserNotOnline) {\n          this.onUserNotOnline(targetUserId);\n        } else {\n          this.updateCallState('ended');\n        }\n        return;\n      }\n\n      // If there's already an active call, end it first\n      if (this.isCallActive) {\n        this.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      this.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.isCallActive = true; // Mark call as active\n      this.updateCallState('connecting');\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Create an offer (SDP)\n      this.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n\n      // Store offer for potential reconnection\n      this.lastOffer = offer;\n\n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n\n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      this.log('Call offer sent');\n    } catch (error) {\n      this.handleError('making call', error, true);\n    }\n  }\n\n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      this.log('Accepting incoming call from:', this.targetUserId);\n      this.isCallActive = true; // Mark call as active\n      this.updateCallState('connecting');\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Set the remote description from the stored offer\n      this.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(this.pendingOffer));\n\n      // Create an answer\n      this.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n\n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n\n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      this.log('Call accepted, answer sent');\n    } catch (error) {\n      this.handleError('accepting call', error, true);\n    }\n  }\n\n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    this.log('Ending call, notify peer:', notifyPeer);\n\n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', {\n        targetUserId: this.targetUserId\n      });\n    }\n\n    // Clear any reconnection timers\n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n    if (this.disconnectionFailureTimer) {\n      clearTimeout(this.disconnectionFailureTimer);\n      this.disconnectionFailureTimer = null;\n    }\n\n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n\n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Stopping track:', track.kind);\n        track.stop();\n      });\n      this.localStream = null;\n    }\n\n    // Mark call as inactive\n    this.isCallActive = false;\n    this.isCallConnected = false;\n\n    // Update call state\n    this.updateCallState('ended');\n\n    // Reset state\n    this.resetCallState();\n  }\n\n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    this.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n    this.isCallConnected = false;\n    this.reconnectionAttempts = 0;\n    this.iceConnectionState = null;\n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n    if (this.disconnectionFailureTimer) {\n      clearTimeout(this.disconnectionFailureTimer);\n      this.disconnectionFailureTimer = null;\n    }\n    this.lastOffer = null;\n  }\n\n  /**\n   * Initialize the WebRTC peer connection\n   */\n  initializePeerConnection() {\n    // Enhanced ICE servers configuration with multiple STUN servers and free TURN servers\n    const configuration = {\n      iceServers: [\n      // Multiple STUN servers for better connectivity\n      {\n        urls: 'stun:stun.l.google.com:19302'\n      }, {\n        urls: 'stun:stun1.l.google.com:19302'\n      }, {\n        urls: 'stun:stun2.l.google.com:19302'\n      }, {\n        urls: 'stun:stun3.l.google.com:19302'\n      }, {\n        urls: 'stun:stun4.l.google.com:19302'\n      },\n      // Free TURN server (replace with your own in production)\n      {\n        urls: 'turn:openrelay.metered.ca:80',\n        username: 'openrelayproject',\n        credential: 'openrelayproject'\n      }, {\n        urls: 'turn:openrelay.metered.ca:443',\n        username: 'openrelayproject',\n        credential: 'openrelayproject'\n      },\n      // If environment variables exist, add them too\n      ...(process.env.REACT_APP_TURN_SERVER ? [{\n        urls: process.env.REACT_APP_TURN_SERVER,\n        username: process.env.REACT_APP_TURN_USERNAME || '',\n        credential: process.env.REACT_APP_TURN_CREDENTIAL || ''\n      }] : [])],\n      iceCandidatePoolSize: 10,\n      // The following helps with connection stability\n      sdpSemantics: 'unified-plan'\n    };\n    this.log('Initializing peer connection with configuration:', configuration);\n\n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n\n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n\n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = event => {\n      this.log('Received remote track:', event.track.kind);\n\n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.onRemoteStream(this.remoteStream);\n      }\n\n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        this.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n\n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        const candidateStr = event.candidate.candidate || '';\n        const candidateType = candidateStr.split(' ')[7] || 'unknown'; // Extract type (host, srflx, relay)\n        this.log('Generated ICE candidate of type:', candidateType);\n\n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Additional monitoring for ICE gathering state\n    this.peerConnection.onicegatheringstatechange = () => {\n      this.log('ICE gathering state changed:', this.peerConnection.iceGatheringState);\n    };\n\n    // Monitor signaling state\n    this.peerConnection.onsignalingstatechange = () => {\n      this.log('Signaling state changed:', this.peerConnection.signalingState);\n    };\n\n    // Monitor connection state\n    this.peerConnection.onconnectionstatechange = () => {\n      this.log('Connection state changed:', this.peerConnection.connectionState);\n    };\n\n    // ENHANCED: Improved ICE connection state handling with better state tracking\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      const previousState = this.iceConnectionState;\n      this.iceConnectionState = state;\n      this.log('ICE connection state changed to:', state, 'from:', previousState);\n      this.onICEConnectionStateChange(state);\n\n      // Handle connection establishment\n      if (state === 'connected' || state === 'completed') {\n        this.log('Call connected successfully!');\n        if (!this.isCallConnected) {\n          this.isCallConnected = true;\n          this.updateCallState('active');\n\n          // Reset reconnection attempts\n          this.reconnectionAttempts = 0;\n\n          // Clear any pending timers\n          if (this.disconnectionTimer) {\n            clearTimeout(this.disconnectionTimer);\n            this.disconnectionTimer = null;\n          }\n          if (this.disconnectionFailureTimer) {\n            clearTimeout(this.disconnectionFailureTimer);\n            this.disconnectionFailureTimer = null;\n          }\n        }\n      }\n      // Only handle connection failures after multiple attempts\n      else if (state === 'failed') {\n        this.log('Connection failed');\n\n        // Attempt to restart ICE if possible before ending the call\n        if (this.reconnectionAttempts < this.maxReconnectionAttempts) {\n          this.reconnectionAttempts++;\n          this.log(`Trying to reconnect (attempt ${this.reconnectionAttempts}/${this.maxReconnectionAttempts})...`);\n\n          // Try to reconnect using our enhanced method\n          this.attemptReconnection(true);\n        } else {\n          this.log('Max reconnection attempts reached, ending call');\n          this.updateCallState('ended');\n          this.endCall(true);\n        }\n      }\n      // For disconnected state, implement improved timer-based approach\n      else if (state === 'disconnected') {\n        this.log('Connection temporarily disconnected');\n\n        // Clear any existing timers first\n        if (this.disconnectionTimer) {\n          clearTimeout(this.disconnectionTimer);\n        }\n        if (this.disconnectionFailureTimer) {\n          clearTimeout(this.disconnectionFailureTimer);\n        }\n\n        // Start with a short timer for normal recovery\n        this.disconnectionTimer = setTimeout(() => {\n          // If still disconnected after short period, try recovery\n          if (this.peerConnection && this.peerConnection.iceConnectionState === 'disconnected') {\n            this.log('Connection still disconnected, attempting recovery...');\n            this.attemptReconnection(false);\n          }\n          this.disconnectionTimer = null;\n        }, 2000); // Try recovery after 2 seconds\n\n        // Also set a longer timeout for full failure\n        this.disconnectionFailureTimer = setTimeout(() => {\n          if (this.peerConnection && (this.peerConnection.iceConnectionState === 'disconnected' || this.peerConnection.iceConnectionState === 'failed')) {\n            this.log('Connection remained disconnected for too long');\n            this.updateCallState('ended');\n            this.endCall(true);\n          }\n          this.disconnectionFailureTimer = null;\n        }, 15000); // End call after 15 seconds of disconnection\n      }\n      // Reset the disconnection timers if we move out of the disconnected state\n      else if ((previousState === 'disconnected' || previousState === 'failed') && (state === 'checking' || state === 'connected' || state === 'completed')) {\n        // Clear timers if we've recovered\n        if (this.disconnectionTimer) {\n          clearTimeout(this.disconnectionTimer);\n          this.disconnectionTimer = null;\n        }\n        if (this.disconnectionFailureTimer) {\n          clearTimeout(this.disconnectionFailureTimer);\n          this.disconnectionFailureTimer = null;\n        }\n      }\n    };\n  }\n\n  /**\n   * Get access to local camera and microphone\n   * @param {boolean|object} videoConstraints - Constraints for video\n   * @param {boolean|object} audioConstraints - Constraints for audio\n   * @returns {Promise<MediaStream>} - Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      this.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n\n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      this.log('Access to local media granted');\n      this.localStream = stream;\n      this.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      this.handleError('accessing media devices', error, true);\n      throw error;\n    }\n  }\n\n  /**\n   * Toggle audio mute state\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        this.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n\n  /**\n   * Toggle video on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        this.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n\n  /**\n   * Disconnect from signaling server and clean up resources\n   */\n  disconnect() {\n    this.log('Disconnecting WebRTC service');\n\n    // End any active call\n    this.endCall(true);\n\n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n    // Reset initialization status\n    this.isInitialized = false;\n\n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;","map":{"version":3,"names":["io","WebRTCService","constructor","socket","peerConnection","localStream","remoteStream","userId","targetUserId","isCallInitiator","pendingOffer","isCallActive","isCallConnected","callState","eventListeners","reconnectionAttempts","maxReconnectionAttempts","disconnectionTimer","disconnectionFailureTimer","lastOffer","iceConnectionState","onLocalStream","onRemoteStream","onCallStarted","onCallEnded","onCallConnecting","onIncomingCall","onICEConnectionStateChange","onUserNotOnline","isInitialized","log","message","data","timestamp","Date","toISOString","split","substring","prefix","console","logs","JSON","parse","localStorage","getItem","push","stringify","length","shift","setItem","handleError","context","error","fatal","emit","updateCallState","endCall","event","forEach","callback","on","filter","cb","newState","initialize","callbacks","serverUrl","updateCallbacks","disconnect","connected","signalingServer","process","env","REACT_APP_SIGNALING_SERVER","setupSocketListeners","undefined","callerUserId","offerSDP","answerSDP","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","resetCallState","isOnline","responseId","checkUserOnline","Promise","resolve","requestId","now","Math","random","toString","cleanupListener","responseUserId","clearTimeout","timeout","setTimeout","attemptReconnection","aggressive","restartIce","offer","createOffer","iceRestart","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","makeCall","getLocalMedia","initializePeerConnection","acceptCall","answer","createAnswer","notifyPeer","close","getTracks","track","kind","stop","configuration","iceServers","urls","username","credential","REACT_APP_TURN_SERVER","REACT_APP_TURN_USERNAME","REACT_APP_TURN_CREDENTIAL","iceCandidatePoolSize","sdpSemantics","RTCPeerConnection","addTrack","ontrack","MediaStream","streams","onicecandidate","candidateStr","candidateType","onicegatheringstatechange","iceGatheringState","onsignalingstatechange","signalingState","onconnectionstatechange","connectionState","oniceconnectionstatechange","state","previousState","videoConstraints","audioConstraints","video","audio","stream","navigator","mediaDevices","getUserMedia","toggleAudio","muted","getAudioTracks","enabled","toggleVideo","videoOff","getVideoTracks","webRTCService"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/services/WebRTCService.js"],"sourcesContent":["import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n * Enhanced with better state management and error handling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n    \n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n    \n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n    \n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false; // Track active calls\n    this.isCallConnected = false; // Track established connections\n    \n    // ENHANCED: Centralized call state management\n    this.callState = 'idle'; // idle, connecting, active, ended\n    \n    // ENHANCED: Simple event system for better component coordination\n    this.eventListeners = {};\n    \n    // Connection stability enhancements\n    this.reconnectionAttempts = 0;\n    this.maxReconnectionAttempts = 3;\n    this.disconnectionTimer = null;\n    this.disconnectionFailureTimer = null; // ENHANCED: Added longer timeout timer\n    this.lastOffer = null;\n    this.iceConnectionState = null; // ENHANCED: Track previous state\n    \n    // Callback functions\n    this.onLocalStream = null;\n    this.onRemoteStream = null;\n    this.onCallStarted = null;\n    this.onCallEnded = null;\n    this.onCallConnecting = null;\n    this.onIncomingCall = null;\n    this.onICEConnectionStateChange = null;\n    this.onUserNotOnline = null;\n    \n    // Initialization state\n    this.isInitialized = false;\n  }\n  \n  /**\n   * Log messages with timestamp and store in localStorage\n   */\n  log(message, data = null) {\n    const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n    const prefix = `[WebRTC ${timestamp}]`;\n    \n    if (data) {\n      console.log(prefix, message, data);\n    } else {\n      console.log(prefix, message);\n    }\n    \n    // Store logs in localStorage for debugging across page refreshes\n    const logs = JSON.parse(localStorage.getItem('webrtc_logs') || '[]');\n    logs.push({\n      timestamp: new Date().toISOString(),\n      message,\n      data: data ? JSON.stringify(data) : null\n    });\n    \n    // Keep only the last 100 logs\n    if (logs.length > 100) {\n      logs.shift();\n    }\n    \n    localStorage.setItem('webrtc_logs', JSON.stringify(logs));\n  }\n  \n  /**\n   * ENHANCED: Unified error handling method\n   */\n  handleError(context, error, fatal = false) {\n    this.log(`Error in ${context}:`, error.message);\n    console.error(`Error in ${context}:`, error);\n    \n    // Emit error event for UI components to handle\n    this.emit('error', {\n      context,\n      message: error.message,\n      fatal\n    });\n    \n    // If it's a fatal error, end the call\n    if (fatal) {\n      this.updateCallState('ended');\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * ENHANCED: Event emission system\n   */\n  emit(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => callback(data));\n    }\n  }\n  \n  /**\n   * ENHANCED: Event subscription system\n   * Returns a function to unsubscribe the listener\n   */\n  on(event, callback) {\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n    \n    // Return a function to remove the listener\n    return () => {\n      this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n    };\n  }\n  \n  /**\n   * ENHANCED: Centralized call state management\n   */\n  updateCallState(newState) {\n    if (this.callState !== newState) {\n      this.log(`Call state changing from ${this.callState} to ${newState}`);\n      this.callState = newState;\n      \n      // Emit event for UI components\n      this.emit('callStateChanged', newState);\n      \n      // Trigger appropriate callbacks\n      if (newState === 'active' && this.onCallStarted) this.onCallStarted();\n      if (newState === 'ended' && this.onCallEnded) this.onCallEnded();\n      if (newState === 'connecting' && this.onCallConnecting) this.onCallConnecting();\n    }\n  }\n  \n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    // If already initialized with the same ID, just update callbacks\n    if (this.isInitialized && this.userId === userId) {\n      this.log('WebRTC service already initialized for user:', userId, '- updating callbacks only');\n      this.updateCallbacks(callbacks);\n      return;\n    }\n    \n    // If initialized with a different ID, disconnect first\n    if (this.isInitialized && this.userId !== userId) {\n      this.log('Reinitializing with new user ID - disconnecting first');\n      this.disconnect();\n    }\n    \n    this.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n    \n    // Set up callbacks\n    this.updateCallbacks(callbacks);\n    \n    // Connect to the signaling server if not already connected\n    if (!this.socket || !this.socket.connected) {\n      // Use provided URL, fallback to production URL, then localhost as last resort\n      const signalingServer = serverUrl || \n                              (process.env.REACT_APP_SIGNALING_SERVER || \n                              'http://localhost:3001');\n      \n      this.log('Connecting to signaling server:', signalingServer);\n      this.socket = io(signalingServer);\n      \n      // Set up event listeners for signaling messages\n      this.setupSocketListeners();\n    }\n    \n    // Register user ID with the signaling server\n    if (this.socket) {\n      this.socket.emit('register', userId);\n    }\n    \n    this.isInitialized = true;\n  }\n  \n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Only update provided callbacks, keep existing ones otherwise\n    if (callbacks.onLocalStream !== undefined) \n      this.onLocalStream = callbacks.onLocalStream;\n    if (callbacks.onRemoteStream !== undefined) \n      this.onRemoteStream = callbacks.onRemoteStream;\n    if (callbacks.onCallStarted !== undefined) \n      this.onCallStarted = callbacks.onCallStarted;\n    if (callbacks.onCallEnded !== undefined) \n      this.onCallEnded = callbacks.onCallEnded;\n    if (callbacks.onCallConnecting !== undefined) \n      this.onCallConnecting = callbacks.onCallConnecting;\n    if (callbacks.onIncomingCall !== undefined) \n      this.onIncomingCall = callbacks.onIncomingCall;\n    if (callbacks.onICEConnectionStateChange !== undefined) \n      this.onICEConnectionStateChange = callbacks.onICEConnectionStateChange;\n    if (callbacks.onUserNotOnline !== undefined)\n      this.onUserNotOnline = callbacks.onUserNotOnline;\n    \n    // Initialize default callback functions if not already set\n    this.onLocalStream = this.onLocalStream || (() => {});\n    this.onRemoteStream = this.onRemoteStream || (() => {});\n    this.onCallStarted = this.onCallStarted || (() => {});\n    this.onCallEnded = this.onCallEnded || (() => {});\n    this.onCallConnecting = this.onCallConnecting || (() => {});\n    this.onIncomingCall = this.onIncomingCall || (() => {});\n    this.onICEConnectionStateChange = this.onICEConnectionStateChange || (() => {});\n    this.onUserNotOnline = this.onUserNotOnline || (() => {});\n  }\n  \n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({ callerUserId, offerSDP }) => {\n      this.log('Incoming call from:', callerUserId);\n      \n      // If there's already an active call, ignore this one\n      if (this.isCallActive || this.callState === 'active' || this.callState === 'connecting') {\n        this.log('Already in a call, ignoring incoming call');\n        // Explicitly decline the call so the caller knows\n        this.socket.emit('call-declined', { targetUserId: callerUserId });\n        return;\n      }\n      \n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n      \n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n      \n      // Update call state\n      this.updateCallState('connecting');\n      \n      // Notify the application of the incoming call\n      this.onIncomingCall(callerUserId);\n    });\n    \n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({ answerSDP }) => {\n      this.log('Call was answered, setting remote description');\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.setRemoteDescription(\n            new RTCSessionDescription(answerSDP)\n          );\n        }\n      } catch (error) {\n        this.handleError('setting remote description', error);\n      }\n    });\n    \n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({ candidate }) => {\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.addIceCandidate(\n            new RTCIceCandidate(candidate)\n          );\n          this.log('Added ICE candidate');\n        }\n      } catch (error) {\n        this.handleError('adding ICE candidate', error);\n      }\n    });\n    \n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      this.log('Call ended remotely');\n      this.updateCallState('ended');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n    \n    // Handle call failure\n    this.socket.on('call-failed', ({ message, targetUserId }) => {\n      this.log('Call failed:', message);\n      \n      // Handle user not online case\n      if (message === 'User is not online') {\n        if (this.onUserNotOnline) {\n          this.onUserNotOnline(targetUserId);\n        } else {\n          this.updateCallState('ended');\n        }\n      } else {\n        this.updateCallState('ended');\n      }\n      \n      this.resetCallState();\n    });\n    \n    // Handle user online status\n    this.socket.on('user-online-status', ({ userId, isOnline, responseId }) => {\n      this.log('User online status received:', { userId, isOnline, responseId });\n      // The responseId is now used to match requests with responses\n      this.emit(`online-status-${responseId}`, { userId, isOnline });\n    });\n  }\n  \n  /**\n   * ENHANCED: Check if a user is online with request ID for reliable responses\n   * @param {string} userId - ID of the user to check\n   * @returns {Promise<boolean>} - Whether the user is online\n   */\n  checkUserOnline(userId) {\n    return new Promise((resolve) => {\n      if (!this.socket || !this.socket.connected) {\n        this.log('Socket not connected, user is offline');\n        resolve(false);\n        return;\n      }\n      \n      // Create a unique request ID to match the response\n      const requestId = `online-check-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n      \n      this.log('Checking if user is online:', userId, 'with requestId:', requestId);\n      this.socket.emit('check-user-online', { userId, requestId });\n      \n      // Set up a one-time event listener specific to this request\n      const cleanupListener = this.on(`online-status-${requestId}`, ({ userId: responseUserId, isOnline }) => {\n        if (responseUserId === userId) {\n          clearTimeout(timeout);\n          this.log('User online status for', userId, ':', isOnline);\n          resolve(isOnline);\n        }\n      });\n      \n      // Set a timeout in case we never get a response\n      const timeout = setTimeout(() => {\n        cleanupListener(); // Remove the listener\n        this.log('User online check timed out for:', userId);\n        resolve(false);\n      }, 5000);\n    });\n  }\n  \n  /**\n   * ENHANCED: Attempt to reconnect during call problems\n   * @param {boolean} aggressive - Whether to use more aggressive reconnection tactics\n   */\n  async attemptReconnection(aggressive = false) {\n    this.log(`Attempting ${aggressive ? 'aggressive' : 'standard'} reconnection`);\n    \n    try {\n      if (!this.peerConnection) {\n        this.log('No peer connection to reconnect');\n        return;\n      }\n      \n      // First try to restart ICE\n      this.peerConnection.restartIce();\n      \n      // For more aggressive reconnection, try recreating the offer\n      if (aggressive || this.isCallInitiator) {\n        this.log('Creating new offer with ICE restart');\n        const offer = await this.peerConnection.createOffer({ \n          iceRestart: true,\n          offerToReceiveAudio: true,\n          offerToReceiveVideo: true\n        });\n        \n        await this.peerConnection.setLocalDescription(offer);\n        \n        // Store the new offer\n        this.lastOffer = offer;\n        \n        // Send the new offer to the other user\n        this.socket.emit('call-user', {\n          targetUserId: this.targetUserId,\n          offerSDP: offer,\n          callerUserId: this.userId\n        });\n        \n        this.log('Sent new offer for reconnection');\n      }\n    } catch (error) {\n      this.handleError('reconnection attempt', error);\n    }\n  }\n  \n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // Check if the user is online first\n      const isOnline = await this.checkUserOnline(targetUserId);\n      \n      if (!isOnline) {\n        this.log('Cannot make call - user is not online:', targetUserId);\n        \n        if (this.onUserNotOnline) {\n          this.onUserNotOnline(targetUserId);\n        } else {\n          this.updateCallState('ended');\n        }\n        \n        return;\n      }\n      \n      // If there's already an active call, end it first\n      if (this.isCallActive) {\n        this.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      \n      this.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.isCallActive = true; // Mark call as active\n      this.updateCallState('connecting');\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Create an offer (SDP)\n      this.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n      \n      // Store offer for potential reconnection\n      this.lastOffer = offer;\n      \n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n      \n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      \n      this.log('Call offer sent');\n    } catch (error) {\n      this.handleError('making call', error, true);\n    }\n  }\n  \n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      this.log('Accepting incoming call from:', this.targetUserId);\n      this.isCallActive = true; // Mark call as active\n      this.updateCallState('connecting');\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Set the remote description from the stored offer\n      this.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(\n        new RTCSessionDescription(this.pendingOffer)\n      );\n      \n      // Create an answer\n      this.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n      \n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n      \n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      \n      this.log('Call accepted, answer sent');\n    } catch (error) {\n      this.handleError('accepting call', error, true);\n    }\n  }\n  \n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    this.log('Ending call, notify peer:', notifyPeer);\n    \n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', { targetUserId: this.targetUserId });\n    }\n    \n    // Clear any reconnection timers\n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n    \n    if (this.disconnectionFailureTimer) {\n      clearTimeout(this.disconnectionFailureTimer);\n      this.disconnectionFailureTimer = null;\n    }\n    \n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n    \n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Stopping track:', track.kind);\n        track.stop();\n      });\n      this.localStream = null;\n    }\n    \n    // Mark call as inactive\n    this.isCallActive = false;\n    this.isCallConnected = false;\n    \n    // Update call state\n    this.updateCallState('ended');\n    \n    // Reset state\n    this.resetCallState();\n  }\n  \n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    this.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n    this.isCallConnected = false;\n    this.reconnectionAttempts = 0;\n    this.iceConnectionState = null;\n    \n    if (this.disconnectionTimer) {\n      clearTimeout(this.disconnectionTimer);\n      this.disconnectionTimer = null;\n    }\n    \n    if (this.disconnectionFailureTimer) {\n      clearTimeout(this.disconnectionFailureTimer);\n      this.disconnectionFailureTimer = null;\n    }\n    \n    this.lastOffer = null;\n  }\n  \n  /**\n   * Initialize the WebRTC peer connection\n   */\n  initializePeerConnection() {\n    // Enhanced ICE servers configuration with multiple STUN servers and free TURN servers\n    const configuration = {\n      iceServers: [\n        // Multiple STUN servers for better connectivity\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' },\n        { urls: 'stun:stun3.l.google.com:19302' },\n        { urls: 'stun:stun4.l.google.com:19302' },\n        // Free TURN server (replace with your own in production)\n        {\n          urls: 'turn:openrelay.metered.ca:80',\n          username: 'openrelayproject',\n          credential: 'openrelayproject'\n        },\n        {\n          urls: 'turn:openrelay.metered.ca:443',\n          username: 'openrelayproject',\n          credential: 'openrelayproject'\n        },\n        // If environment variables exist, add them too\n        ...(process.env.REACT_APP_TURN_SERVER ? [{\n          urls: process.env.REACT_APP_TURN_SERVER,\n          username: process.env.REACT_APP_TURN_USERNAME || '',\n          credential: process.env.REACT_APP_TURN_CREDENTIAL || ''\n        }] : [])\n      ],\n      iceCandidatePoolSize: 10,\n      // The following helps with connection stability\n      sdpSemantics: 'unified-plan'\n    };\n    \n    this.log('Initializing peer connection with configuration:', configuration);\n    \n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n    \n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        this.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n    \n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = (event) => {\n      this.log('Received remote track:', event.track.kind);\n      \n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.onRemoteStream(this.remoteStream);\n      }\n      \n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        this.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n    \n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        const candidateStr = event.candidate.candidate || '';\n        const candidateType = candidateStr.split(' ')[7] || 'unknown'; // Extract type (host, srflx, relay)\n        this.log('Generated ICE candidate of type:', candidateType);\n        \n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n    \n    // Additional monitoring for ICE gathering state\n    this.peerConnection.onicegatheringstatechange = () => {\n      this.log('ICE gathering state changed:', this.peerConnection.iceGatheringState);\n    };\n    \n    // Monitor signaling state\n    this.peerConnection.onsignalingstatechange = () => {\n      this.log('Signaling state changed:', this.peerConnection.signalingState);\n    };\n    \n    // Monitor connection state\n    this.peerConnection.onconnectionstatechange = () => {\n      this.log('Connection state changed:', this.peerConnection.connectionState);\n    };\n    \n    // ENHANCED: Improved ICE connection state handling with better state tracking\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      const previousState = this.iceConnectionState;\n      this.iceConnectionState = state;\n      \n      this.log('ICE connection state changed to:', state, 'from:', previousState);\n      \n      this.onICEConnectionStateChange(state);\n      \n      // Handle connection establishment\n      if (state === 'connected' || state === 'completed') {\n        this.log('Call connected successfully!');\n        if (!this.isCallConnected) {\n          this.isCallConnected = true;\n          this.updateCallState('active');\n          \n          // Reset reconnection attempts\n          this.reconnectionAttempts = 0;\n          \n          // Clear any pending timers\n          if (this.disconnectionTimer) {\n            clearTimeout(this.disconnectionTimer);\n            this.disconnectionTimer = null;\n          }\n          \n          if (this.disconnectionFailureTimer) {\n            clearTimeout(this.disconnectionFailureTimer);\n            this.disconnectionFailureTimer = null;\n          }\n        }\n      } \n      // Only handle connection failures after multiple attempts\n      else if (state === 'failed') {\n        this.log('Connection failed');\n        \n        // Attempt to restart ICE if possible before ending the call\n        if (this.reconnectionAttempts < this.maxReconnectionAttempts) {\n          this.reconnectionAttempts++;\n          this.log(`Trying to reconnect (attempt ${this.reconnectionAttempts}/${this.maxReconnectionAttempts})...`);\n          \n          // Try to reconnect using our enhanced method\n          this.attemptReconnection(true);\n        } else {\n          this.log('Max reconnection attempts reached, ending call');\n          this.updateCallState('ended');\n          this.endCall(true);\n        }\n      }\n      // For disconnected state, implement improved timer-based approach\n      else if (state === 'disconnected') {\n        this.log('Connection temporarily disconnected');\n        \n        // Clear any existing timers first\n        if (this.disconnectionTimer) {\n          clearTimeout(this.disconnectionTimer);\n        }\n        \n        if (this.disconnectionFailureTimer) {\n          clearTimeout(this.disconnectionFailureTimer);\n        }\n        \n        // Start with a short timer for normal recovery\n        this.disconnectionTimer = setTimeout(() => {\n          // If still disconnected after short period, try recovery\n          if (this.peerConnection && this.peerConnection.iceConnectionState === 'disconnected') {\n            this.log('Connection still disconnected, attempting recovery...');\n            this.attemptReconnection(false);\n          }\n          this.disconnectionTimer = null;\n        }, 2000); // Try recovery after 2 seconds\n        \n        // Also set a longer timeout for full failure\n        this.disconnectionFailureTimer = setTimeout(() => {\n          if (this.peerConnection && \n              (this.peerConnection.iceConnectionState === 'disconnected' || \n               this.peerConnection.iceConnectionState === 'failed')) {\n            this.log('Connection remained disconnected for too long');\n            this.updateCallState('ended');\n            this.endCall(true);\n          }\n          this.disconnectionFailureTimer = null;\n        }, 15000); // End call after 15 seconds of disconnection\n      }\n      // Reset the disconnection timers if we move out of the disconnected state\n      else if ((previousState === 'disconnected' || previousState === 'failed') && \n               (state === 'checking' || state === 'connected' || state === 'completed')) {\n        // Clear timers if we've recovered\n        if (this.disconnectionTimer) {\n          clearTimeout(this.disconnectionTimer);\n          this.disconnectionTimer = null;\n        }\n        \n        if (this.disconnectionFailureTimer) {\n          clearTimeout(this.disconnectionFailureTimer);\n          this.disconnectionFailureTimer = null;\n        }\n      }\n    };\n  }\n\n  /**\n   * Get access to local camera and microphone\n   * @param {boolean|object} videoConstraints - Constraints for video\n   * @param {boolean|object} audioConstraints - Constraints for audio\n   * @returns {Promise<MediaStream>} - Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      this.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      this.log('Access to local media granted');\n      \n      this.localStream = stream;\n      this.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      this.handleError('accessing media devices', error, true);\n      throw error;\n    }\n  }\n  \n  /**\n   * Toggle audio mute state\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        this.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n  \n  /**\n   * Toggle video on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        this.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n  \n  /**\n   * Disconnect from signaling server and clean up resources\n   */\n  disconnect() {\n    this.log('Disconnecting WebRTC service');\n    \n    // End any active call\n    this.endCall(true);\n    \n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    // Reset initialization status\n    this.isInitialized = false;\n    \n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}