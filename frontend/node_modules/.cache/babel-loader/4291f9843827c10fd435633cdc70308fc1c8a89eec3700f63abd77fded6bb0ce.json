{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver3/frontend2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport HealthAssistantUI from './components';\nimport GlobalCallUI from './components/screens/GlobalCallUI';\nimport DoctorAvailabilityIndicator from './components/screens/DoctorAvailabilityIndicator';\nimport { useAuth } from './components/AuthProvider';\nimport useGlobalCallStore from './services/GlobalCallService';\nimport webRTCService from './services/WebRTCService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const {\n    loadAvailableDoctors,\n    setIncomingCall\n  } = useGlobalCallStore();\n\n  // Set up WebRTC event listeners for incoming calls\n  useEffect(() => {\n    if (isAuthenticated && !(user !== null && user !== void 0 && user.isDoctor)) {\n      // Load available doctors on app start\n      loadAvailableDoctors();\n\n      // Only set up incoming call handling for patients (not doctors)\n      const setupIncomingCallHandler = () => {\n        // Generate a unique user ID if not already set\n        const userId = localStorage.getItem('user_instance_id') || `user-${Math.random().toString(36).substring(2, 15)}`;\n\n        // Store the ID for future use\n        if (!localStorage.getItem('user_instance_id')) {\n          localStorage.setItem('user_instance_id', userId);\n        }\n\n        // Initialize WebRTC with callbacks\n        webRTCService.initialize(userId, {\n          onIncomingCall: callerId => {\n            console.log('App received incoming call from:', callerId);\n\n            // Try to find the doctor in our data\n            useGlobalCallStore.getState().loadAvailableDoctors().then(() => {\n              const doctors = useGlobalCallStore.getState().availableDoctors;\n              const callerDoctorId = parseInt(callerId.replace('doctor-', ''));\n\n              // Find the doctor or create a placeholder\n              const callingDoctor = doctors.find(doc => doc.id === callerDoctorId) || {\n                id: callerDoctorId,\n                name: `Doctor ${callerId.replace('doctor-', '')}`,\n                specialty: \"Medical Professional\",\n                image: \"https://randomuser.me/api/portraits/men/32.jpg\",\n                availability: \"Available now\",\n                rating: 5\n              };\n\n              // Set incoming call in global store\n              setIncomingCall({\n                doctor: callingDoctor,\n                timestamp: Date.now(),\n                id: `call-${Date.now()}`\n              });\n            });\n          }\n        });\n\n        // Register with signaling server\n        setTimeout(() => {\n          if (webRTCService.signalingService && webRTCService.signalingService.isConnected()) {\n            webRTCService.signalingService.send('register', userId);\n            console.log('Registered with signaling server as:', userId);\n          }\n        }, 1000);\n      };\n      setupIncomingCallHandler();\n\n      // Set up interval to ensure registration with signaling server\n      const registrationInterval = setInterval(() => {\n        const userId = localStorage.getItem('user_instance_id');\n        if (userId && webRTCService.signalingService && webRTCService.signalingService.isConnected()) {\n          webRTCService.signalingService.send('register', userId);\n        }\n      }, 30000); // Re-register every 30 seconds\n\n      return () => {\n        clearInterval(registrationInterval);\n      };\n    }\n  }, [isAuthenticated, user, loadAvailableDoctors, setIncomingCall]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(HealthAssistantUI, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), isAuthenticated && !(user !== null && user !== void 0 && user.isDoctor) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DoctorAvailabilityIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GlobalCallUI, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6tBldjcHf6xnh1tfTm04RHGzzU4=\", false, function () {\n  return [useAuth, useGlobalCallStore];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","HealthAssistantUI","GlobalCallUI","DoctorAvailabilityIndicator","useAuth","useGlobalCallStore","webRTCService","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","user","isAuthenticated","loadAvailableDoctors","setIncomingCall","isDoctor","setupIncomingCallHandler","userId","localStorage","getItem","Math","random","toString","substring","setItem","initialize","onIncomingCall","callerId","console","log","getState","then","doctors","availableDoctors","callerDoctorId","parseInt","replace","callingDoctor","find","doc","id","name","specialty","image","availability","rating","doctor","timestamp","Date","now","setTimeout","signalingService","isConnected","send","registrationInterval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver3/frontend2/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport HealthAssistantUI from './components';\nimport GlobalCallUI from './components/screens/GlobalCallUI';\nimport DoctorAvailabilityIndicator from './components/screens/DoctorAvailabilityIndicator';\nimport { useAuth } from './components/AuthProvider';\nimport useGlobalCallStore from './services/GlobalCallService';\nimport webRTCService from './services/WebRTCService';\n\nfunction App() {\n  const { user, isAuthenticated } = useAuth();\n  const { loadAvailableDoctors, setIncomingCall } = useGlobalCallStore();\n  \n  // Set up WebRTC event listeners for incoming calls\n  useEffect(() => {\n    if (isAuthenticated && !user?.isDoctor) {\n      // Load available doctors on app start\n      loadAvailableDoctors();\n      \n      // Only set up incoming call handling for patients (not doctors)\n      const setupIncomingCallHandler = () => {\n        // Generate a unique user ID if not already set\n        const userId = localStorage.getItem('user_instance_id') ||\n                      `user-${Math.random().toString(36).substring(2, 15)}`;\n        \n        // Store the ID for future use\n        if (!localStorage.getItem('user_instance_id')) {\n          localStorage.setItem('user_instance_id', userId);\n        }\n        \n        // Initialize WebRTC with callbacks\n        webRTCService.initialize(userId, {\n          onIncomingCall: (callerId) => {\n            console.log('App received incoming call from:', callerId);\n            \n            // Try to find the doctor in our data\n            useGlobalCallStore.getState().loadAvailableDoctors().then(() => {\n              const doctors = useGlobalCallStore.getState().availableDoctors;\n              const callerDoctorId = parseInt(callerId.replace('doctor-', ''));\n              \n              // Find the doctor or create a placeholder\n              const callingDoctor = doctors.find(doc => doc.id === callerDoctorId) || {\n                id: callerDoctorId,\n                name: `Doctor ${callerId.replace('doctor-', '')}`,\n                specialty: \"Medical Professional\",\n                image: \"https://randomuser.me/api/portraits/men/32.jpg\",\n                availability: \"Available now\",\n                rating: 5\n              };\n              \n              // Set incoming call in global store\n              setIncomingCall({\n                doctor: callingDoctor,\n                timestamp: Date.now(),\n                id: `call-${Date.now()}`\n              });\n            });\n          }\n        });\n        \n        // Register with signaling server\n        setTimeout(() => {\n          if (webRTCService.signalingService && \n              webRTCService.signalingService.isConnected()) {\n            webRTCService.signalingService.send('register', userId);\n            console.log('Registered with signaling server as:', userId);\n          }\n        }, 1000);\n      };\n      \n      setupIncomingCallHandler();\n      \n      // Set up interval to ensure registration with signaling server\n      const registrationInterval = setInterval(() => {\n        const userId = localStorage.getItem('user_instance_id');\n        if (userId && webRTCService.signalingService && \n            webRTCService.signalingService.isConnected()) {\n          webRTCService.signalingService.send('register', userId);\n        }\n      }, 30000); // Re-register every 30 seconds\n      \n      return () => {\n        clearInterval(registrationInterval);\n      };\n    }\n  }, [isAuthenticated, user, loadAvailableDoctors, setIncomingCall]);\n  \n  return (\n    <div className=\"App\">\n      <HealthAssistantUI />\n      \n      {/* Only show doctor availability and call UI for authenticated patients */}\n      {isAuthenticated && !user?.isDoctor && (\n        <>\n          <DoctorAvailabilityIndicator />\n          <GlobalCallUI />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,iBAAiB,MAAM,cAAc;AAC5C,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,2BAA2B,MAAM,kDAAkD;AAC1F,SAASC,OAAO,QAAQ,2BAA2B;AACnD,OAAOC,kBAAkB,MAAM,8BAA8B;AAC7D,OAAOC,aAAa,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM;IAAEC,IAAI;IAAEC;EAAgB,CAAC,GAAGV,OAAO,CAAC,CAAC;EAC3C,MAAM;IAAEW,oBAAoB;IAAEC;EAAgB,CAAC,GAAGX,kBAAkB,CAAC,CAAC;;EAEtE;EACAL,SAAS,CAAC,MAAM;IACd,IAAIc,eAAe,IAAI,EAACD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEI,QAAQ,GAAE;MACtC;MACAF,oBAAoB,CAAC,CAAC;;MAEtB;MACA,MAAMG,wBAAwB,GAAGA,CAAA,KAAM;QACrC;QACA,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,IACzC,QAAQC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;;QAEnE;QACA,IAAI,CAACL,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,EAAE;UAC7CD,YAAY,CAACM,OAAO,CAAC,kBAAkB,EAAEP,MAAM,CAAC;QAClD;;QAEA;QACAb,aAAa,CAACqB,UAAU,CAACR,MAAM,EAAE;UAC/BS,cAAc,EAAGC,QAAQ,IAAK;YAC5BC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;;YAEzD;YACAxB,kBAAkB,CAAC2B,QAAQ,CAAC,CAAC,CAACjB,oBAAoB,CAAC,CAAC,CAACkB,IAAI,CAAC,MAAM;cAC9D,MAAMC,OAAO,GAAG7B,kBAAkB,CAAC2B,QAAQ,CAAC,CAAC,CAACG,gBAAgB;cAC9D,MAAMC,cAAc,GAAGC,QAAQ,CAACR,QAAQ,CAACS,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;;cAEhE;cACA,MAAMC,aAAa,GAAGL,OAAO,CAACM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKN,cAAc,CAAC,IAAI;gBACtEM,EAAE,EAAEN,cAAc;gBAClBO,IAAI,EAAE,UAAUd,QAAQ,CAACS,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE;gBACjDM,SAAS,EAAE,sBAAsB;gBACjCC,KAAK,EAAE,gDAAgD;gBACvDC,YAAY,EAAE,eAAe;gBAC7BC,MAAM,EAAE;cACV,CAAC;;cAED;cACA/B,eAAe,CAAC;gBACdgC,MAAM,EAAET,aAAa;gBACrBU,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;gBACrBT,EAAE,EAAE,QAAQQ,IAAI,CAACC,GAAG,CAAC,CAAC;cACxB,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;;QAEF;QACAC,UAAU,CAAC,MAAM;UACf,IAAI9C,aAAa,CAAC+C,gBAAgB,IAC9B/C,aAAa,CAAC+C,gBAAgB,CAACC,WAAW,CAAC,CAAC,EAAE;YAChDhD,aAAa,CAAC+C,gBAAgB,CAACE,IAAI,CAAC,UAAU,EAAEpC,MAAM,CAAC;YACvDW,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEZ,MAAM,CAAC;UAC7D;QACF,CAAC,EAAE,IAAI,CAAC;MACV,CAAC;MAEDD,wBAAwB,CAAC,CAAC;;MAE1B;MACA,MAAMsC,oBAAoB,GAAGC,WAAW,CAAC,MAAM;QAC7C,MAAMtC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;QACvD,IAAIF,MAAM,IAAIb,aAAa,CAAC+C,gBAAgB,IACxC/C,aAAa,CAAC+C,gBAAgB,CAACC,WAAW,CAAC,CAAC,EAAE;UAChDhD,aAAa,CAAC+C,gBAAgB,CAACE,IAAI,CAAC,UAAU,EAAEpC,MAAM,CAAC;QACzD;MACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAEX,OAAO,MAAM;QACXuC,aAAa,CAACF,oBAAoB,CAAC;MACrC,CAAC;IACH;EACF,CAAC,EAAE,CAAC1C,eAAe,EAAED,IAAI,EAAEE,oBAAoB,EAAEC,eAAe,CAAC,CAAC;EAElE,oBACER,OAAA;IAAKmD,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpD,OAAA,CAACP,iBAAiB;MAAA4D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAGpBlD,eAAe,IAAI,EAACD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEI,QAAQ,kBACjCT,OAAA,CAAAE,SAAA;MAAAkD,QAAA,gBACEpD,OAAA,CAACL,2BAA2B;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/BxD,OAAA,CAACN,YAAY;QAAA2D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAChB,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpD,EAAA,CA3FQD,GAAG;EAAA,QACwBP,OAAO,EACSC,kBAAkB;AAAA;AAAA4D,EAAA,GAF7DtD,GAAG;AA6FZ,eAAeA,GAAG;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}