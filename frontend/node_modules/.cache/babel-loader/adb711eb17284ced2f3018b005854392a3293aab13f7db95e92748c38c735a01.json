{"ast":null,"code":"// Fixed WebRTCService.js with improved state management and event handling\nimport WebRTCEventEmitter from './WebRTCEventEmitter';\nimport WebRTCConnectionManager from './WebRTCConnectionManager';\nimport WebRTCMediaManager from './WebRTCMediaManager';\nimport WebRTCLogger from './WebRTCLogger';\nimport { createSignalingService } from './SignalingService';\n\n/**\n * Service that handles WebRTC connections for video calling\n * Enhanced with better state management and error handling\n */\nclass WebRTCService {\n  constructor() {\n    // Public API: State Checking Methods\n    this.isCallActive = () => ['connecting', 'active'].includes(this.callState);\n    this.isCallConnected = () => this.callState === 'active';\n    this.hasRemoteStream = () => this.connectionManager && !!this.connectionManager.remoteStream;\n    // Create logger\n    this.logger = new WebRTCLogger();\n\n    // Create event emitter\n    this.eventEmitter = new WebRTCEventEmitter();\n\n    // Create media manager\n    this.mediaManager = new WebRTCMediaManager(this.logger);\n\n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n\n    // Call state\n    this.callState = 'idle'; // idle, connecting, active, ended\n\n    // Initialize subsystems\n    this.connectionManager = null;\n    this.signalingService = null;\n\n    // Initialization state\n    this.isInitialized = false;\n\n    // Track state change timestamps to prevent rapid transitions\n    this.lastStateChangeTime = 0;\n    this.stateChangeDebounceMs = 300; // Minimum time between state changes\n\n    // Periodic state check\n    this.stateCheckInterval = null;\n  }\n  // Public API: Event Management\n  on(event, callback) {\n    return this.eventEmitter.on(event, callback);\n  }\n\n  // Public API: Call State Management with debouncing\n  updateCallState(newState) {\n    const now = Date.now();\n\n    // Always log state change requests\n    this.logger.log(`Call state change requested from ${this.callState} to ${newState}`);\n\n    // Prevent rapid state changes (except for 'ended' which should always happen)\n    if (newState !== 'ended' && now - this.lastStateChangeTime < this.stateChangeDebounceMs) {\n      this.logger.log(`Call state change debounced (${now - this.lastStateChangeTime}ms < ${this.stateChangeDebounceMs}ms)`);\n\n      // For 'active' state, schedule a delayed check to ensure it happens\n      if (newState === 'active' && this.callState !== 'active') {\n        setTimeout(() => {\n          if (this.callState !== 'active') {\n            this.logger.log('Delayed active state check - forcing state update');\n            this.forceStateUpdate('active');\n          }\n        }, this.stateChangeDebounceMs);\n      }\n      return;\n    }\n\n    // Prevent going backwards from active to connecting\n    if (this.callState === 'active' && newState === 'connecting') {\n      this.logger.log('Preventing state regression from active to connecting');\n      return;\n    }\n    if (this.callState !== newState) {\n      this.logger.log(`Call state changing from ${this.callState} to ${newState}`);\n\n      // Set the state immediately\n      this.callState = newState;\n      this.lastStateChangeTime = now;\n\n      // Sync the UI immediately\n      this.eventEmitter.emit('callStateChanged', newState);\n\n      // For 'active' state, make extra sure all UI components know about it\n      if (newState === 'active') {\n        // Send additional update after short delay to ensure UI catches it\n        setTimeout(() => {\n          this.logger.log('Re-emitting active state after delay');\n          this.eventEmitter.emit('callStateChanged', 'active');\n\n          // Notify all callbacks\n          if (this.callbacks.onCallStarted) {\n            this.callbacks.onCallStarted();\n          }\n        }, 500);\n\n        // Also notify after longer delay as backup\n        setTimeout(() => {\n          this.eventEmitter.emit('callStateChanged', 'active');\n        }, 2000);\n      }\n\n      // Trigger appropriate callbacks\n      if (newState === 'active' && this.callbacks.onCallStarted) this.callbacks.onCallStarted();\n      if (newState === 'ended' && this.callbacks.onCallEnded) this.callbacks.onCallEnded();\n      if (newState === 'connecting' && this.callbacks.onCallConnecting) this.callbacks.onCallConnecting();\n    } else if (newState === 'active') {\n      // Even if already in active state, re-emit to ensure UI sync\n      this.logger.log('Already in active state, but re-emitting to ensure UI sync');\n      this.eventEmitter.emit('callStateChanged', 'active');\n      if (this.callbacks.onCallStarted) {\n        this.callbacks.onCallStarted();\n      }\n    }\n  }\n\n  // Force state update without debouncing\n  forceStateUpdate(newState) {\n    if (this.callState !== newState) {\n      this.logger.log(`Forcing call state from ${this.callState} to ${newState}`);\n      this.callState = newState;\n      this.lastStateChangeTime = Date.now();\n      this.eventEmitter.emit('callStateChanged', newState);\n\n      // Trigger appropriate callbacks\n      if (newState === 'active' && this.callbacks.onCallStarted) this.callbacks.onCallStarted();\n      if (newState === 'ended' && this.callbacks.onCallEnded) this.callbacks.onCallEnded();\n    }\n  }\n  logCallState() {\n    this.logger.log(`Current call state: ${this.callState}`);\n    this.logger.log(`Is call active according to isCallActive(): ${this.isCallActive()}`);\n    this.logger.log(`Is call connected according to isCallConnected(): ${this.isCallConnected()}`);\n    if (this.connectionManager) {\n      this.logger.log(`Connection manager remote stream: ${!!this.connectionManager.remoteStream}`);\n      if (this.connectionManager.remoteStream) {\n        this.logger.log(`Remote stream tracks: ${this.connectionManager.remoteStream.getTracks().length}`);\n      }\n      this.logger.log(`ICE Connection state: ${this.connectionManager.iceConnectionState}`);\n    }\n\n    // Forced re-emission of state\n    this.eventEmitter.emit('callStateChanged', this.callState);\n  }\n\n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    // If already initialized with the same ID, just update callbacks\n    if (this.isInitialized && this.userId === userId) {\n      this.logger.log('WebRTC service already initialized for user:', userId, '- updating callbacks only');\n      this.updateCallbacks(callbacks);\n      return;\n    }\n\n    // If initialized with a different ID, disconnect first\n    if (this.isInitialized && this.userId !== userId) {\n      this.logger.log('Reinitializing with new user ID - disconnecting first');\n      this.disconnect();\n    }\n    this.logger.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n    this.startConnectionStateMonitoring();\n\n    // Set up callbacks\n    this.callbacks = {};\n    this.updateCallbacks(callbacks);\n\n    // Create signaling service - ONLY ONCE\n    this.signalingService = createSignalingService(serverUrl || process.env.REACT_APP_SIGNALING_SERVER || 'http://localhost:3001', userId, this.handleSignalingEvents.bind(this));\n\n    // Configure socket settings for better reliability\n    if (this.signalingService && this.signalingService.socket) {\n      // Prevent disconnections\n      this.signalingService.socket.io.reconnection(true);\n      this.signalingService.socket.io.reconnectionAttempts(10);\n      this.signalingService.socket.io.reconnectionDelay(1000);\n      this.signalingService.socket.io.timeout(10000);\n\n      // Debug connection issues\n      this.signalingService.socket.on('connect', () => {\n        this.logger.log('Socket connected successfully!');\n        // Immediately register user ID again after reconnection\n        this.signalingService.send('register', userId);\n      });\n      this.signalingService.socket.on('disconnect', reason => {\n        this.logger.log('Socket disconnected, reason:', reason);\n      });\n    }\n\n    // Create connection manager with enhanced track handling\n    this.connectionManager = new WebRTCConnectionManager(this.signalingService, this.mediaManager, this.eventEmitter, this.logger, this.updateCallState.bind(this));\n\n    // Set up enhanced track detection\n    if (this.connectionManager) {\n      // Original handleTrackEvent had issues; patch it to ensure it emits events\n      const originalTrackHandler = this.connectionManager.handleTrackEvent;\n      this.connectionManager.handleTrackEvent = event => {\n        // Call the original handler\n        originalTrackHandler.call(this.connectionManager, event);\n\n        // Additional logging\n        this.logger.log(`Track received: ${event.track.kind}`);\n\n        // Emit track added event\n        this.eventEmitter.emit('remoteTrackAdded', {\n          kind: event.track.kind,\n          enabled: event.track.enabled,\n          id: event.track.id\n        });\n\n        // Force call to active state when tracks are received\n        this.updateCallState('active');\n      };\n    }\n\n    // Set up periodic state check\n    this.startStateCheck();\n    this.isInitialized = true;\n  }\n\n  // Start periodic state check\n  startStateCheck() {\n    if (this.stateCheckInterval) {\n      clearInterval(this.stateCheckInterval);\n    }\n    this.stateCheckInterval = setInterval(() => {\n      // Check if we should be in active state but aren't\n      if (this.connectionManager && this.connectionManager.remoteStream && this.connectionManager.remoteStream.getTracks().length > 0 && this.callState !== 'active') {\n        this.logger.log('State check: Remote tracks detected but state is not active, forcing update');\n        this.forceStateUpdate('active');\n      }\n\n      // Check ICE connection state\n      if (this.connectionManager && this.connectionManager.peerConnection && ['connected', 'completed'].includes(this.connectionManager.peerConnection.iceConnectionState) && this.callState !== 'active') {\n        this.logger.log('State check: ICE connected but state is not active, forcing update');\n        this.forceStateUpdate('active');\n      }\n    }, 1000);\n  }\n  endCall(notifyOther = true) {\n    const wasActive = this.callState !== 'idle' && this.callState !== 'ended';\n    this.callState = 'ended';\n\n    // Update UI state\n    this.eventEmitter.emit('callStateChanged', 'ended');\n\n    // Clean up connection\n    if (this.connectionManager) {\n      this.connectionManager.closeConnection();\n    }\n\n    // Make sure we notify the other user about call ending\n    if (notifyOther && wasActive && this.signalingService && this.targetUserId) {\n      console.log('Sending end-call signal to:', this.targetUserId);\n\n      // Send the end call signal - retry up to 3 times\n      let attempts = 0;\n      const sendEndCall = () => {\n        attempts++;\n        this.signalingService.send('end-call', {\n          targetUserId: this.targetUserId\n        });\n        if (attempts < 3) {\n          setTimeout(sendEndCall, 500); // Retry after 500ms\n        }\n      };\n      sendEndCall();\n    }\n\n    // IMPORTANT: Stop the camera and microphone to release resources\n    if (this.mediaManager) {\n      this.mediaManager.stopLocalStream();\n      this.logger.log('Camera and microphone stopped after call ended');\n    }\n\n    // Reset state\n    this.pendingOffer = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n  }\n\n  /**\n   * Handle all signaling events\n   */\n  handleSignalingEvents(event, data) {\n    this.logger.log(`Received signaling event: ${event}`, data);\n    switch (event) {\n      case 'incoming-call':\n        this.handleIncomingCall(data);\n        break;\n      case 'call-answered':\n        this.handleCallAnswered(data);\n        break;\n      case 'call-declined':\n        this.handleCallDeclined(data);\n        break;\n      case 'call-in-progress':\n        this.updateCallState('ended'); // Add this line to end the call explicitly\n        if (this.callbacks.onCallInProgress) {\n          this.callbacks.onCallInProgress(data.callerUserId, data.message);\n        }\n        break;\n      case 'ice-candidate':\n        this.connectionManager.addRemoteIceCandidate(data.candidate);\n        break;\n      case 'media-connected':\n        this.logger.log('Remote peer reports media connected');\n        this.forceStateUpdate('active'); // Use force update to bypass debouncing\n\n        // Force update UI regardless of previous state\n        if (this.callbacks.onCallStarted) {\n          this.callbacks.onCallStarted();\n        }\n\n        // Ensure connection manager is also updated\n        if (this.connectionManager && this.connectionManager.remoteStream) {\n          this.logger.log('We have remote media and received media-connected signal, enforcing active state');\n          this.forceStateUpdate('active');\n        }\n        break;\n      case 'call-ended':\n        this.handleCallEnded();\n        break;\n      case 'call-failed':\n        this.handleCallFailed(data);\n        break;\n      default:\n        this.logger.log('Unknown signaling event:', event, data);\n    }\n  }\n\n  /**\n   * Handle incoming call event\n   */\n  handleIncomingCall(data) {\n    const {\n      callerUserId,\n      offerSDP\n    } = data;\n    this.logger.log('Incoming call from:', callerUserId);\n\n    // If there's already an active call, ignore this one\n    if (this.isCallActive() || this.callState === 'active' || this.callState === 'connecting') {\n      this.logger.log('Already in a call, ignoring incoming call');\n      // Explicitly decline the call so the caller knows\n      this.signalingService.send('call-declined', {\n        targetUserId: callerUserId\n      });\n      return;\n    }\n    this.targetUserId = callerUserId;\n\n    // Store the offer to use when call is accepted\n    this.connectionManager.setPendingOffer(offerSDP);\n\n    // Update call state\n    this.updateCallState('connecting');\n\n    // Notify the application of the incoming call\n    if (this.callbacks.onIncomingCall) {\n      this.callbacks.onIncomingCall(callerUserId);\n    }\n  }\n\n  /**\n   * Handle call answered event\n   */\n  handleCallAnswered(data) {\n    const {\n      answerSDP\n    } = data;\n    this.logger.log('Call was answered, setting remote description');\n    this.connectionManager.setRemoteDescription(answerSDP);\n\n    // Start connection status checker\n    this.checkConnectionStatus();\n  }\n\n  /**\n   * Handle call declined event\n   */\n  handleCallDeclined() {\n    this.logger.log('Call was declined by the recipient');\n    this.updateCallState('ended');\n    this.endCall(false); // Don't notify the other person since they declined it\n\n    // Notify the application\n    if (this.callbacks.onCallDeclined) {\n      this.callbacks.onCallDeclined();\n    }\n  }\n  checkConnectionStatus() {\n    let checkCount = 0;\n    const maxChecks = 10;\n    const interval = setInterval(() => {\n      checkCount++;\n\n      // If we have a remote stream but UI still shows connecting\n      if (this.connectionManager && this.connectionManager.remoteStream && this.connectionManager.remoteStream.getTracks().length > 0 && this.callState === 'connecting') {\n        this.logger.log('Media detected but call not active, forcing state update');\n        this.forceStateUpdate('active');\n      }\n      if (checkCount >= maxChecks || this.callState === 'active' || this.callState === 'ended') {\n        clearInterval(interval);\n      }\n    }, 1000);\n  }\n\n  /**\n   * Handle call ended event\n   */\n  handleCallEnded() {\n    this.logger.log('Call ended remotely');\n\n    // Set a flag to prevent multiple handlers\n    if (this._handlingCallEnd) {\n      this.logger.log('Already handling call end, ignoring duplicate event');\n      return;\n    }\n    this._handlingCallEnd = true;\n\n    // IMPROVED: Force ended state directly to avoid state transition issues\n    this.callState = 'ended';\n\n    // Immediately notify UI with multiple events for redundancy\n    this.eventEmitter.emit('callStateChanged', 'ended');\n    this.eventEmitter.emit('call-ended'); // Direct event that VideoCallScreen listens for\n\n    // Also broadcast a global window event as an additional backup mechanism\n    try {\n      window.dispatchEvent(new CustomEvent('webrtc-call-ended', {\n        detail: {\n          timestamp: Date.now()\n        }\n      }));\n    } catch (e) {\n      this.logger.error('Error dispatching global event:', e);\n    }\n\n    // Log to help with debugging\n    this.logger.log('CRITICAL: Emitted call-ended event. UI should now update.');\n\n    // Stop the camera and microphone immediately\n    if (this.mediaManager) {\n      this.mediaManager.stopLocalStream();\n      this.logger.log('Camera and microphone stopped after remote end');\n    }\n\n    // Clean up connection\n    if (this.connectionManager) {\n      this.connectionManager.closeConnection();\n      this.logger.log('Connection closed after remote end');\n    }\n\n    // MULTIPLE redundant notifications with increasing delays\n    // This ensures at least one gets through even if the app is busy\n    const delays = [100, 300, 500, 1000, 1500, 2000];\n    delays.forEach(delay => {\n      setTimeout(() => {\n        this.eventEmitter.emit('callStateChanged', 'ended');\n        this.eventEmitter.emit('call-ended');\n        this.logger.log(`Sent follow-up call-ended signals (${delay}ms)`);\n        if (delay === delays[delays.length - 1]) {\n          this._handlingCallEnd = false; // Reset the flag on the last notification\n        }\n      }, delay);\n    });\n\n    // Reset state\n    this.targetUserId = null;\n    this.pendingOffer = null;\n    this.isCallInitiator = false;\n  }\n\n  /**\n  * Start monitoring connection state\n  * This adds an extra layer of reliability for detecting disconnections\n  */\n  startConnectionStateMonitoring() {\n    // Clear any existing interval\n    if (this.connectionMonitorInterval) {\n      clearInterval(this.connectionMonitorInterval);\n    }\n    this.connectionMonitorInterval = setInterval(() => {\n      // Only check when in an active call\n      if (this.callState !== 'active' && this.callState !== 'connecting') {\n        return;\n      }\n\n      // Check peer connection state\n      if (this.connectionManager && this.connectionManager.peerConnection) {\n        const connection = this.connectionManager.peerConnection;\n        const iceState = connection.iceConnectionState;\n        const connState = connection.connectionState;\n        this.logger.log(`Connection monitor - ICE: ${iceState}, Connection: ${connState}`);\n\n        // Detect disconnected or failed states\n        if ((iceState === 'disconnected' || iceState === 'failed' || connState === 'disconnected' || connState === 'failed') && this._disconnectionStartTime === undefined) {\n          // Start tracking disconnection time\n          this._disconnectionStartTime = Date.now();\n          this.logger.log('Detected potential disconnection, starting timer');\n        } else if ((iceState === 'disconnected' || iceState === 'failed' || connState === 'disconnected' || connState === 'failed') && this._disconnectionStartTime !== undefined) {\n          // Check if disconnection has lasted too long (8 seconds)\n          const disconnectionDuration = Date.now() - this._disconnectionStartTime;\n          if (disconnectionDuration > 8000) {\n            this.logger.log(`Disconnection lasted ${disconnectionDuration}ms, ending call`);\n            this._disconnectionStartTime = undefined;\n\n            // Force end the call\n            this.handleCallEnded();\n          }\n        } else if ((iceState === 'connected' || iceState === 'completed' || connState === 'connected') && this._disconnectionStartTime !== undefined) {\n          // Connection restored\n          this.logger.log('Connection restored after temporary disconnection');\n          this._disconnectionStartTime = undefined;\n        }\n\n        // Also check if we have any media flowing\n        if (this.connectionManager.remoteStream) {\n          const hasActiveTracks = this.connectionManager.remoteStream.getTracks().some(track => track.readyState === 'live');\n          if (!hasActiveTracks && this._noMediaStartTime === undefined) {\n            this._noMediaStartTime = Date.now();\n            this.logger.log('No active media tracks detected, starting timer');\n          } else if (!hasActiveTracks && this._noMediaStartTime !== undefined) {\n            const noMediaDuration = Date.now() - this._noMediaStartTime;\n            if (noMediaDuration > 10000) {\n              this.logger.log(`No media for ${noMediaDuration}ms, ending call`);\n              this._noMediaStartTime = undefined;\n              this.handleCallEnded();\n            }\n          } else if (hasActiveTracks && this._noMediaStartTime !== undefined) {\n            this.logger.log('Media tracks restored');\n            this._noMediaStartTime = undefined;\n          }\n        }\n      }\n    }, 2000); // Check every 2 seconds\n  }\n\n  /**\n   * Handle call failed event\n   */\n  handleCallFailed(data) {\n    const {\n      message,\n      targetUserId\n    } = data;\n    this.logger.log('Call failed:', message);\n\n    // Handle user not online case\n    if (message === 'User is not online') {\n      if (this.callbacks.onUserNotOnline) {\n        this.callbacks.onUserNotOnline(targetUserId);\n      } else {\n        this.updateCallState('ended');\n      }\n    } else {\n      this.updateCallState('ended');\n    }\n    this.resetCallState();\n  }\n\n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    this.callbacks = {\n      ...this.callbacks,\n      ...callbacks\n    };\n\n    // Initialize default callback functions if not already set\n    this.callbacks.onLocalStream = this.callbacks.onLocalStream || (() => {});\n    this.callbacks.onRemoteStream = this.callbacks.onRemoteStream || (() => {});\n    this.callbacks.onCallStarted = this.callbacks.onCallStarted || (() => {});\n    this.callbacks.onCallEnded = this.callbacks.onCallEnded || (() => {});\n    this.callbacks.onCallConnecting = this.callbacks.onCallConnecting || (() => {});\n    this.callbacks.onIncomingCall = this.callbacks.onIncomingCall || (() => {});\n    this.callbacks.onICEConnectionStateChange = this.callbacks.onICEConnectionStateChange || (() => {});\n    this.callbacks.onUserNotOnline = this.callbacks.onUserNotOnline || (() => {});\n    this.callbacks.onCallDeclined = this.callbacks.onCallDeclined || (() => {});\n    this.callbacks.onCallInProgress = this.callbacks.onCallInProgress || (() => {});\n\n    // Pass appropriate callbacks to managers\n    if (this.connectionManager) {\n      this.connectionManager.setCallbacks({\n        onRemoteStream: stream => {\n          // Ensure we update state to active when stream is received\n          this.forceStateUpdate('active');\n          this.callbacks.onRemoteStream(stream);\n        },\n        onICEConnectionStateChange: this.callbacks.onICEConnectionStateChange\n      });\n    }\n    if (this.mediaManager) {\n      this.mediaManager.setCallbacks({\n        onLocalStream: this.callbacks.onLocalStream\n      });\n    }\n  }\n\n  /**\n   * Check if a user is online with request ID for reliable responses\n   * @param {string} userId - ID of the user to check\n   * @returns {Promise<boolean>} - Whether the user is online\n   */\n  async checkUserOnline(userId) {\n    if (!this.signalingService || !this.signalingService.isConnected()) {\n      this.logger.log('Socket not connected, user is offline');\n      return false;\n    }\n    try {\n      return await this.signalingService.checkUserOnline(userId);\n    } catch (error) {\n      this.logger.log('Error checking if user is online:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Attempt to reconnect during call problems\n   * @param {boolean} aggressive - Whether to use more aggressive reconnection tactics\n   */\n  async attemptReconnection(aggressive = false) {\n    return this.connectionManager.attemptReconnection(aggressive);\n  }\n\n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // Check if the user is online first\n      const isOnline = await this.checkUserOnline(targetUserId);\n      if (!isOnline) {\n        this.logger.log('Cannot make call - user is not online:', targetUserId);\n        if (this.callbacks.onUserNotOnline) {\n          this.callbacks.onUserNotOnline(targetUserId);\n        } else {\n          this.updateCallState('ended');\n        }\n        return;\n      }\n\n      // If there's already an active call, end it first\n      if (this.isCallActive()) {\n        this.logger.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      this.logger.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.updateCallState('connecting');\n\n      // Make sure we have camera and microphone access\n      if (!this.mediaManager.hasLocalStream()) {\n        await this.getLocalMedia();\n      }\n\n      // Initialize the call\n      await this.connectionManager.initiateCall(this.userId, targetUserId);\n    } catch (error) {\n      this.handleError('making call', error, true);\n    }\n  }\n\n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    if (!this.targetUserId) {\n      this.logger.log('No incoming call to accept');\n      return;\n    }\n    try {\n      this.logger.log('Accepting incoming call from:', this.targetUserId);\n      this.updateCallState('connecting');\n\n      // Make sure we have camera and microphone access\n      if (!this.mediaManager.hasLocalStream()) {\n        await this.getLocalMedia();\n      }\n\n      // Accept the call\n      await this.connectionManager.acceptCall(this.targetUserId);\n    } catch (error) {\n      this.handleError('accepting call', error, true);\n    }\n  }\n\n  /**\n   * Decline an incoming call\n   */\n  declineCall() {\n    if (!this.targetUserId) {\n      this.logger.log('No incoming call to decline');\n      return;\n    }\n    this.logger.log('Declining call from:', this.targetUserId);\n    this.signalingService.send('call-declined', {\n      targetUserId: this.targetUserId\n    });\n    this.resetCallState();\n  }\n\n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    this.logger.log('Resetting call state');\n    this.targetUserId = null;\n    if (this.connectionManager) {\n      this.connectionManager.reset();\n    }\n  }\n\n  /**\n   * Get access to local camera and microphone\n   * @param {boolean|object} videoConstraints - Constraints for video\n   * @param {boolean|object} audioConstraints - Constraints for audio\n   * @returns {Promise<MediaStream>} - Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      const stream = await this.mediaManager.getLocalMedia(videoConstraints, audioConstraints);\n\n      // Add local stream to connection manager if it exists\n      if (this.connectionManager) {\n        this.connectionManager.setLocalStream(stream);\n      }\n      return stream;\n    } catch (error) {\n      this.handleError('accessing media devices', error, true);\n      throw error;\n    }\n  }\n\n  /**\n   * Toggle audio mute state\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    this.mediaManager.toggleAudio(muted);\n  }\n\n  /**\n   * Toggle video on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    this.mediaManager.toggleVideo(videoOff);\n  }\n\n  /**\n   * Unified error handling method\n   */\n  handleError(context, error, fatal = false) {\n    this.logger.error(`Error in ${context}:`, error.message);\n    console.error(`Error in ${context}:`, error);\n\n    // Emit error event for UI components to handle\n    this.eventEmitter.emit('error', {\n      context,\n      message: error.message,\n      fatal\n    });\n\n    // If it's a fatal error, end the call\n    if (fatal) {\n      this.updateCallState('ended');\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * Disconnect from signaling server and clean up resources\n   */\n  disconnect() {\n    this.logger.log('Disconnecting WebRTC service');\n\n    // End any active call\n    this.endCall(true);\n\n    // Clear state check interval\n    if (this.stateCheckInterval) {\n      clearInterval(this.stateCheckInterval);\n      this.stateCheckInterval = null;\n    }\n\n    // Clear connection monitor interval\n    if (this.connectionMonitorInterval) {\n      clearInterval(this.connectionMonitorInterval);\n      this.connectionMonitorInterval = null;\n    }\n\n    // Disconnect from signaling server\n    if (this.signalingService) {\n      this.signalingService.disconnect();\n    }\n\n    // Clean up managers\n    if (this.connectionManager) {\n      this.connectionManager.cleanup();\n    }\n    if (this.mediaManager) {\n      this.mediaManager.cleanup();\n    }\n\n    // Reset initialization status\n    this.isInitialized = false;\n\n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;","map":{"version":3,"names":["WebRTCEventEmitter","WebRTCConnectionManager","WebRTCMediaManager","WebRTCLogger","createSignalingService","WebRTCService","constructor","isCallActive","includes","callState","isCallConnected","hasRemoteStream","connectionManager","remoteStream","logger","eventEmitter","mediaManager","userId","targetUserId","signalingService","isInitialized","lastStateChangeTime","stateChangeDebounceMs","stateCheckInterval","on","event","callback","updateCallState","newState","now","Date","log","setTimeout","forceStateUpdate","emit","callbacks","onCallStarted","onCallEnded","onCallConnecting","logCallState","getTracks","length","iceConnectionState","initialize","serverUrl","updateCallbacks","disconnect","startConnectionStateMonitoring","process","env","REACT_APP_SIGNALING_SERVER","handleSignalingEvents","bind","socket","io","reconnection","reconnectionAttempts","reconnectionDelay","timeout","send","reason","originalTrackHandler","handleTrackEvent","call","track","kind","enabled","id","startStateCheck","clearInterval","setInterval","peerConnection","endCall","notifyOther","wasActive","closeConnection","console","attempts","sendEndCall","stopLocalStream","pendingOffer","isCallInitiator","data","handleIncomingCall","handleCallAnswered","handleCallDeclined","onCallInProgress","callerUserId","message","addRemoteIceCandidate","candidate","handleCallEnded","handleCallFailed","offerSDP","setPendingOffer","onIncomingCall","answerSDP","setRemoteDescription","checkConnectionStatus","onCallDeclined","checkCount","maxChecks","interval","_handlingCallEnd","window","dispatchEvent","CustomEvent","detail","timestamp","e","error","delays","forEach","delay","connectionMonitorInterval","connection","iceState","connState","connectionState","_disconnectionStartTime","undefined","disconnectionDuration","hasActiveTracks","some","readyState","_noMediaStartTime","noMediaDuration","onUserNotOnline","resetCallState","onLocalStream","onRemoteStream","onICEConnectionStateChange","setCallbacks","stream","checkUserOnline","isConnected","attemptReconnection","aggressive","makeCall","isOnline","hasLocalStream","getLocalMedia","initiateCall","handleError","acceptCall","declineCall","reset","videoConstraints","audioConstraints","setLocalStream","toggleAudio","muted","toggleVideo","videoOff","context","fatal","cleanup","webRTCService"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/services/WebRTCService.js"],"sourcesContent":["// Fixed WebRTCService.js with improved state management and event handling\nimport WebRTCEventEmitter from './WebRTCEventEmitter';\nimport WebRTCConnectionManager from './WebRTCConnectionManager';\nimport WebRTCMediaManager from './WebRTCMediaManager';\nimport WebRTCLogger from './WebRTCLogger';\nimport { createSignalingService } from './SignalingService';\n\n/**\n * Service that handles WebRTC connections for video calling\n * Enhanced with better state management and error handling\n */\nclass WebRTCService {\n  constructor() {\n    // Create logger\n    this.logger = new WebRTCLogger();\n    \n    // Create event emitter\n    this.eventEmitter = new WebRTCEventEmitter();\n    \n    // Create media manager\n    this.mediaManager = new WebRTCMediaManager(this.logger);\n    \n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n    \n    // Call state\n    this.callState = 'idle'; // idle, connecting, active, ended\n    \n    // Initialize subsystems\n    this.connectionManager = null;\n    this.signalingService = null;\n    \n    // Initialization state\n    this.isInitialized = false;\n    \n    // Track state change timestamps to prevent rapid transitions\n    this.lastStateChangeTime = 0;\n    this.stateChangeDebounceMs = 300; // Minimum time between state changes\n    \n    // Periodic state check\n    this.stateCheckInterval = null;\n  }\n  \n  // Public API: State Checking Methods\n  isCallActive = () => ['connecting', 'active'].includes(this.callState);\n  isCallConnected = () => this.callState === 'active';\n  hasRemoteStream = () => this.connectionManager && !!this.connectionManager.remoteStream;\n  \n  // Public API: Event Management\n  on(event, callback) {\n    return this.eventEmitter.on(event, callback);\n  }\n  \n  // Public API: Call State Management with debouncing\n  updateCallState(newState) {\n    const now = Date.now();\n    \n    // Always log state change requests\n    this.logger.log(`Call state change requested from ${this.callState} to ${newState}`);\n    \n    // Prevent rapid state changes (except for 'ended' which should always happen)\n    if (newState !== 'ended' && now - this.lastStateChangeTime < this.stateChangeDebounceMs) {\n      this.logger.log(`Call state change debounced (${now - this.lastStateChangeTime}ms < ${this.stateChangeDebounceMs}ms)`);\n      \n      // For 'active' state, schedule a delayed check to ensure it happens\n      if (newState === 'active' && this.callState !== 'active') {\n        setTimeout(() => {\n          if (this.callState !== 'active') {\n            this.logger.log('Delayed active state check - forcing state update');\n            this.forceStateUpdate('active');\n          }\n        }, this.stateChangeDebounceMs);\n      }\n      return;\n    }\n    \n    // Prevent going backwards from active to connecting\n    if (this.callState === 'active' && newState === 'connecting') {\n      this.logger.log('Preventing state regression from active to connecting');\n      return;\n    }\n    \n    if (this.callState !== newState) {\n      this.logger.log(`Call state changing from ${this.callState} to ${newState}`);\n      \n      // Set the state immediately\n      this.callState = newState;\n      this.lastStateChangeTime = now;\n      \n      // Sync the UI immediately\n      this.eventEmitter.emit('callStateChanged', newState);\n      \n      // For 'active' state, make extra sure all UI components know about it\n      if (newState === 'active') {\n        // Send additional update after short delay to ensure UI catches it\n        setTimeout(() => {\n          this.logger.log('Re-emitting active state after delay');\n          this.eventEmitter.emit('callStateChanged', 'active');\n          \n          // Notify all callbacks\n          if (this.callbacks.onCallStarted) {\n            this.callbacks.onCallStarted();\n          }\n        }, 500);\n        \n        // Also notify after longer delay as backup\n        setTimeout(() => {\n          this.eventEmitter.emit('callStateChanged', 'active');\n        }, 2000);\n      }\n      \n      // Trigger appropriate callbacks\n      if (newState === 'active' && this.callbacks.onCallStarted) this.callbacks.onCallStarted();\n      if (newState === 'ended' && this.callbacks.onCallEnded) this.callbacks.onCallEnded();\n      if (newState === 'connecting' && this.callbacks.onCallConnecting) this.callbacks.onCallConnecting();\n    } else if (newState === 'active') {\n      // Even if already in active state, re-emit to ensure UI sync\n      this.logger.log('Already in active state, but re-emitting to ensure UI sync');\n      this.eventEmitter.emit('callStateChanged', 'active');\n      \n      if (this.callbacks.onCallStarted) {\n        this.callbacks.onCallStarted();\n      }\n    }\n  }\n\n  // Force state update without debouncing\n  forceStateUpdate(newState) {\n    if (this.callState !== newState) {\n      this.logger.log(`Forcing call state from ${this.callState} to ${newState}`);\n      this.callState = newState;\n      this.lastStateChangeTime = Date.now();\n      this.eventEmitter.emit('callStateChanged', newState);\n      \n      // Trigger appropriate callbacks\n      if (newState === 'active' && this.callbacks.onCallStarted) this.callbacks.onCallStarted();\n      if (newState === 'ended' && this.callbacks.onCallEnded) this.callbacks.onCallEnded();\n    }\n  }\n\n  logCallState() {\n    this.logger.log(`Current call state: ${this.callState}`);\n    this.logger.log(`Is call active according to isCallActive(): ${this.isCallActive()}`);\n    this.logger.log(`Is call connected according to isCallConnected(): ${this.isCallConnected()}`);\n    \n    if (this.connectionManager) {\n      this.logger.log(`Connection manager remote stream: ${!!this.connectionManager.remoteStream}`);\n      if (this.connectionManager.remoteStream) {\n        this.logger.log(`Remote stream tracks: ${this.connectionManager.remoteStream.getTracks().length}`);\n      }\n      this.logger.log(`ICE Connection state: ${this.connectionManager.iceConnectionState}`);\n    }\n    \n    // Forced re-emission of state\n    this.eventEmitter.emit('callStateChanged', this.callState);\n  }\n  \n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    // If already initialized with the same ID, just update callbacks\n    if (this.isInitialized && this.userId === userId) {\n      this.logger.log('WebRTC service already initialized for user:', userId, '- updating callbacks only');\n      this.updateCallbacks(callbacks);\n      return;\n    }\n\n    // If initialized with a different ID, disconnect first\n    if (this.isInitialized && this.userId !== userId) {\n      this.logger.log('Reinitializing with new user ID - disconnecting first');\n      this.disconnect();\n    }\n    \n    this.logger.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n    this.startConnectionStateMonitoring();\n    \n    // Set up callbacks\n    this.callbacks = {};\n    this.updateCallbacks(callbacks);\n    \n    // Create signaling service - ONLY ONCE\n    this.signalingService = createSignalingService(\n      serverUrl || process.env.REACT_APP_SIGNALING_SERVER || 'http://localhost:3001',\n      userId,\n      this.handleSignalingEvents.bind(this)\n    );\n    \n    // Configure socket settings for better reliability\n    if (this.signalingService && this.signalingService.socket) {\n      // Prevent disconnections\n      this.signalingService.socket.io.reconnection(true);\n      this.signalingService.socket.io.reconnectionAttempts(10);\n      this.signalingService.socket.io.reconnectionDelay(1000);\n      this.signalingService.socket.io.timeout(10000);\n      \n      // Debug connection issues\n      this.signalingService.socket.on('connect', () => {\n        this.logger.log('Socket connected successfully!');\n        // Immediately register user ID again after reconnection\n        this.signalingService.send('register', userId);\n      });\n      \n      this.signalingService.socket.on('disconnect', (reason) => {\n        this.logger.log('Socket disconnected, reason:', reason);\n      });\n    }\n    \n    // Create connection manager with enhanced track handling\n    this.connectionManager = new WebRTCConnectionManager(\n      this.signalingService,\n      this.mediaManager,\n      this.eventEmitter,\n      this.logger,\n      this.updateCallState.bind(this)\n    );\n    \n    // Set up enhanced track detection\n    if (this.connectionManager) {\n      // Original handleTrackEvent had issues; patch it to ensure it emits events\n      const originalTrackHandler = this.connectionManager.handleTrackEvent;\n      this.connectionManager.handleTrackEvent = (event) => {\n        // Call the original handler\n        originalTrackHandler.call(this.connectionManager, event);\n        \n        // Additional logging\n        this.logger.log(`Track received: ${event.track.kind}`);\n        \n        // Emit track added event\n        this.eventEmitter.emit('remoteTrackAdded', {\n          kind: event.track.kind,\n          enabled: event.track.enabled,\n          id: event.track.id\n        });\n        \n        // Force call to active state when tracks are received\n        this.updateCallState('active');\n      };\n    }\n    \n    // Set up periodic state check\n    this.startStateCheck();\n    \n    this.isInitialized = true;\n  }\n\n  // Start periodic state check\n  startStateCheck() {\n    if (this.stateCheckInterval) {\n      clearInterval(this.stateCheckInterval);\n    }\n    \n    this.stateCheckInterval = setInterval(() => {\n      // Check if we should be in active state but aren't\n      if (this.connectionManager && \n          this.connectionManager.remoteStream && \n          this.connectionManager.remoteStream.getTracks().length > 0 && \n          this.callState !== 'active') {\n        this.logger.log('State check: Remote tracks detected but state is not active, forcing update');\n        this.forceStateUpdate('active');\n      }\n      \n      // Check ICE connection state\n      if (this.connectionManager && \n          this.connectionManager.peerConnection &&\n          ['connected', 'completed'].includes(this.connectionManager.peerConnection.iceConnectionState) &&\n          this.callState !== 'active') {\n        this.logger.log('State check: ICE connected but state is not active, forcing update');\n        this.forceStateUpdate('active');\n      }\n    }, 1000);\n  }\n\n  endCall(notifyOther = true) {\n    const wasActive = this.callState !== 'idle' && this.callState !== 'ended';\n    this.callState = 'ended';\n    \n    // Update UI state\n    this.eventEmitter.emit('callStateChanged', 'ended');\n    \n    // Clean up connection\n    if (this.connectionManager) {\n      this.connectionManager.closeConnection();\n    }\n    \n    // Make sure we notify the other user about call ending\n    if (notifyOther && wasActive && this.signalingService && this.targetUserId) {\n      console.log('Sending end-call signal to:', this.targetUserId);\n      \n      // Send the end call signal - retry up to 3 times\n      let attempts = 0;\n      const sendEndCall = () => {\n        attempts++;\n        this.signalingService.send('end-call', {\n          targetUserId: this.targetUserId\n        });\n        \n        if (attempts < 3) {\n          setTimeout(sendEndCall, 500); // Retry after 500ms\n        }\n      };\n      \n      sendEndCall();\n    }\n    \n    // IMPORTANT: Stop the camera and microphone to release resources\n    if (this.mediaManager) {\n      this.mediaManager.stopLocalStream();\n      this.logger.log('Camera and microphone stopped after call ended');\n    }\n    \n    // Reset state\n    this.pendingOffer = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n  }\n  \n  /**\n   * Handle all signaling events\n   */\n  handleSignalingEvents(event, data) {\n    this.logger.log(`Received signaling event: ${event}`, data);\n    switch (event) {\n      case 'incoming-call':\n        this.handleIncomingCall(data);\n        break;\n      case 'call-answered':\n        this.handleCallAnswered(data);\n        break;\n      case 'call-declined':\n        this.handleCallDeclined(data);\n        break;\n      case 'call-in-progress':\n          this.updateCallState('ended'); // Add this line to end the call explicitly\n          if (this.callbacks.onCallInProgress) {\n            this.callbacks.onCallInProgress(data.callerUserId, data.message);\n          }\n          break;\n      case 'ice-candidate':\n        this.connectionManager.addRemoteIceCandidate(data.candidate);\n        break;\n      case 'media-connected':\n        this.logger.log('Remote peer reports media connected');\n        this.forceStateUpdate('active'); // Use force update to bypass debouncing\n        \n        // Force update UI regardless of previous state\n        if (this.callbacks.onCallStarted) {\n          this.callbacks.onCallStarted();\n        }\n        \n        // Ensure connection manager is also updated\n        if (this.connectionManager && this.connectionManager.remoteStream) {\n          this.logger.log('We have remote media and received media-connected signal, enforcing active state');\n          this.forceStateUpdate('active');\n        }\n        break;\n      case 'call-ended':\n        this.handleCallEnded();\n        break;\n      case 'call-failed':\n        this.handleCallFailed(data);\n        break;\n      default:\n        this.logger.log('Unknown signaling event:', event, data);\n    }\n  }\n  \n  /**\n   * Handle incoming call event\n   */\n  handleIncomingCall(data) {\n    const { callerUserId, offerSDP } = data;\n    this.logger.log('Incoming call from:', callerUserId);\n    \n    // If there's already an active call, ignore this one\n    if (this.isCallActive() || this.callState === 'active' || this.callState === 'connecting') {\n      this.logger.log('Already in a call, ignoring incoming call');\n      // Explicitly decline the call so the caller knows\n      this.signalingService.send('call-declined', { targetUserId: callerUserId });\n      return;\n    }\n    \n    this.targetUserId = callerUserId;\n    \n    // Store the offer to use when call is accepted\n    this.connectionManager.setPendingOffer(offerSDP);\n    \n    // Update call state\n    this.updateCallState('connecting');\n    \n    // Notify the application of the incoming call\n    if (this.callbacks.onIncomingCall) {\n      this.callbacks.onIncomingCall(callerUserId);\n    }\n  }\n  \n  /**\n   * Handle call answered event\n   */\n  handleCallAnswered(data) {\n    const { answerSDP } = data;\n    this.logger.log('Call was answered, setting remote description');\n    this.connectionManager.setRemoteDescription(answerSDP);\n    \n    // Start connection status checker\n    this.checkConnectionStatus();\n  }\n  \n  /**\n   * Handle call declined event\n   */\n  handleCallDeclined() {\n    this.logger.log('Call was declined by the recipient');\n    this.updateCallState('ended');\n    this.endCall(false); // Don't notify the other person since they declined it\n    \n    // Notify the application\n    if (this.callbacks.onCallDeclined) {\n      this.callbacks.onCallDeclined();\n    }\n  }\n\n  checkConnectionStatus() {\n    let checkCount = 0;\n    const maxChecks = 10;\n    \n    const interval = setInterval(() => {\n      checkCount++;\n      \n      // If we have a remote stream but UI still shows connecting\n      if (this.connectionManager && \n          this.connectionManager.remoteStream &&\n          this.connectionManager.remoteStream.getTracks().length > 0 &&\n          this.callState === 'connecting') {\n        \n        this.logger.log('Media detected but call not active, forcing state update');\n        this.forceStateUpdate('active');\n      }\n      \n      if (checkCount >= maxChecks || this.callState === 'active' || this.callState === 'ended') {\n        clearInterval(interval);\n      }\n    }, 1000);\n  }\n  \n  /**\n   * Handle call ended event\n   */\n  handleCallEnded() {\n    this.logger.log('Call ended remotely');\n    \n    // Set a flag to prevent multiple handlers\n    if (this._handlingCallEnd) {\n      this.logger.log('Already handling call end, ignoring duplicate event');\n      return;\n    }\n    this._handlingCallEnd = true;\n    \n    // IMPROVED: Force ended state directly to avoid state transition issues\n    this.callState = 'ended';\n    \n    // Immediately notify UI with multiple events for redundancy\n    this.eventEmitter.emit('callStateChanged', 'ended');\n    this.eventEmitter.emit('call-ended'); // Direct event that VideoCallScreen listens for\n    \n    // Also broadcast a global window event as an additional backup mechanism\n    try {\n      window.dispatchEvent(new CustomEvent('webrtc-call-ended', { \n        detail: { timestamp: Date.now() } \n      }));\n    } catch (e) {\n      this.logger.error('Error dispatching global event:', e);\n    }\n    \n    // Log to help with debugging\n    this.logger.log('CRITICAL: Emitted call-ended event. UI should now update.');\n    \n    // Stop the camera and microphone immediately\n    if (this.mediaManager) {\n      this.mediaManager.stopLocalStream();\n      this.logger.log('Camera and microphone stopped after remote end');\n    }\n    \n    // Clean up connection\n    if (this.connectionManager) {\n      this.connectionManager.closeConnection();\n      this.logger.log('Connection closed after remote end');\n    }\n    \n    // MULTIPLE redundant notifications with increasing delays\n    // This ensures at least one gets through even if the app is busy\n    const delays = [100, 300, 500, 1000, 1500, 2000];\n    delays.forEach(delay => {\n      setTimeout(() => {\n        this.eventEmitter.emit('callStateChanged', 'ended');\n        this.eventEmitter.emit('call-ended');\n        this.logger.log(`Sent follow-up call-ended signals (${delay}ms)`);\n        \n        if (delay === delays[delays.length - 1]) {\n          this._handlingCallEnd = false; // Reset the flag on the last notification\n        }\n      }, delay);\n    });\n    \n    // Reset state\n    this.targetUserId = null;\n    this.pendingOffer = null;\n    this.isCallInitiator = false;\n  }\n  \n  /**\n * Start monitoring connection state\n * This adds an extra layer of reliability for detecting disconnections\n */\nstartConnectionStateMonitoring() {\n  // Clear any existing interval\n  if (this.connectionMonitorInterval) {\n    clearInterval(this.connectionMonitorInterval);\n  }\n  \n  this.connectionMonitorInterval = setInterval(() => {\n    // Only check when in an active call\n    if (this.callState !== 'active' && this.callState !== 'connecting') {\n      return;\n    }\n    \n    // Check peer connection state\n    if (this.connectionManager && this.connectionManager.peerConnection) {\n      const connection = this.connectionManager.peerConnection;\n      const iceState = connection.iceConnectionState;\n      const connState = connection.connectionState;\n      \n      this.logger.log(`Connection monitor - ICE: ${iceState}, Connection: ${connState}`);\n      \n      // Detect disconnected or failed states\n      if ((iceState === 'disconnected' || iceState === 'failed' || \n           connState === 'disconnected' || connState === 'failed') && \n          this._disconnectionStartTime === undefined) {\n        \n        // Start tracking disconnection time\n        this._disconnectionStartTime = Date.now();\n        this.logger.log('Detected potential disconnection, starting timer');\n        \n      } else if ((iceState === 'disconnected' || iceState === 'failed' || \n                 connState === 'disconnected' || connState === 'failed') && \n                this._disconnectionStartTime !== undefined) {\n        \n        // Check if disconnection has lasted too long (8 seconds)\n        const disconnectionDuration = Date.now() - this._disconnectionStartTime;\n        if (disconnectionDuration > 8000) {\n          this.logger.log(`Disconnection lasted ${disconnectionDuration}ms, ending call`);\n          this._disconnectionStartTime = undefined;\n          \n          // Force end the call\n          this.handleCallEnded();\n        }\n        \n      } else if ((iceState === 'connected' || iceState === 'completed' || \n                 connState === 'connected') && \n                this._disconnectionStartTime !== undefined) {\n        \n        // Connection restored\n        this.logger.log('Connection restored after temporary disconnection');\n        this._disconnectionStartTime = undefined;\n      }\n      \n      // Also check if we have any media flowing\n      if (this.connectionManager.remoteStream) {\n        const hasActiveTracks = this.connectionManager.remoteStream.getTracks().some(\n          track => track.readyState === 'live'\n        );\n        \n        if (!hasActiveTracks && this._noMediaStartTime === undefined) {\n          this._noMediaStartTime = Date.now();\n          this.logger.log('No active media tracks detected, starting timer');\n        } else if (!hasActiveTracks && this._noMediaStartTime !== undefined) {\n          const noMediaDuration = Date.now() - this._noMediaStartTime;\n          if (noMediaDuration > 10000) {\n            this.logger.log(`No media for ${noMediaDuration}ms, ending call`);\n            this._noMediaStartTime = undefined;\n            this.handleCallEnded();\n          }\n        } else if (hasActiveTracks && this._noMediaStartTime !== undefined) {\n          this.logger.log('Media tracks restored');\n          this._noMediaStartTime = undefined;\n        }\n      }\n    }\n  }, 2000); // Check every 2 seconds\n}\n\n  /**\n   * Handle call failed event\n   */\n  handleCallFailed(data) {\n    const { message, targetUserId } = data;\n    this.logger.log('Call failed:', message);\n    \n    // Handle user not online case\n    if (message === 'User is not online') {\n      if (this.callbacks.onUserNotOnline) {\n        this.callbacks.onUserNotOnline(targetUserId);\n      } else {\n        this.updateCallState('ended');\n      }\n    } else {\n      this.updateCallState('ended');\n    }\n    \n    this.resetCallState();\n  }\n  \n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    this.callbacks = {\n      ...this.callbacks,\n      ...callbacks\n    };\n    \n    // Initialize default callback functions if not already set\n    this.callbacks.onLocalStream = this.callbacks.onLocalStream || (() => {});\n    this.callbacks.onRemoteStream = this.callbacks.onRemoteStream || (() => {});\n    this.callbacks.onCallStarted = this.callbacks.onCallStarted || (() => {});\n    this.callbacks.onCallEnded = this.callbacks.onCallEnded || (() => {});\n    this.callbacks.onCallConnecting = this.callbacks.onCallConnecting || (() => {});\n    this.callbacks.onIncomingCall = this.callbacks.onIncomingCall || (() => {});\n    this.callbacks.onICEConnectionStateChange = this.callbacks.onICEConnectionStateChange || (() => {});\n    this.callbacks.onUserNotOnline = this.callbacks.onUserNotOnline || (() => {});\n    this.callbacks.onCallDeclined = this.callbacks.onCallDeclined || (() => {});\n    this.callbacks.onCallInProgress = this.callbacks.onCallInProgress || (() => {});\n    \n    // Pass appropriate callbacks to managers\n    if (this.connectionManager) {\n      this.connectionManager.setCallbacks({\n        onRemoteStream: stream => {\n          // Ensure we update state to active when stream is received\n          this.forceStateUpdate('active');\n          this.callbacks.onRemoteStream(stream);\n        },\n        onICEConnectionStateChange: this.callbacks.onICEConnectionStateChange\n      });\n    }\n    \n    if (this.mediaManager) {\n      this.mediaManager.setCallbacks({\n        onLocalStream: this.callbacks.onLocalStream\n      });\n    }\n  }\n  \n  /**\n   * Check if a user is online with request ID for reliable responses\n   * @param {string} userId - ID of the user to check\n   * @returns {Promise<boolean>} - Whether the user is online\n   */\n  async checkUserOnline(userId) {\n    if (!this.signalingService || !this.signalingService.isConnected()) {\n      this.logger.log('Socket not connected, user is offline');\n      return false;\n    }\n    \n    try {\n      return await this.signalingService.checkUserOnline(userId);\n    } catch (error) {\n      this.logger.log('Error checking if user is online:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Attempt to reconnect during call problems\n   * @param {boolean} aggressive - Whether to use more aggressive reconnection tactics\n   */\n  async attemptReconnection(aggressive = false) {\n    return this.connectionManager.attemptReconnection(aggressive);\n  }\n  \n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // Check if the user is online first\n      const isOnline = await this.checkUserOnline(targetUserId);\n      \n      if (!isOnline) {\n        this.logger.log('Cannot make call - user is not online:', targetUserId);\n        \n        if (this.callbacks.onUserNotOnline) {\n          this.callbacks.onUserNotOnline(targetUserId);\n        } else {\n          this.updateCallState('ended');\n        }\n        \n        return;\n      }\n      \n      // If there's already an active call, end it first\n      if (this.isCallActive()) {\n        this.logger.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      \n      this.logger.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.updateCallState('connecting');\n      \n      // Make sure we have camera and microphone access\n      if (!this.mediaManager.hasLocalStream()) {\n        await this.getLocalMedia();\n      }\n      \n      // Initialize the call\n      await this.connectionManager.initiateCall(this.userId, targetUserId);\n    } catch (error) {\n      this.handleError('making call', error, true);\n    }\n  }\n  \n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    if (!this.targetUserId) {\n      this.logger.log('No incoming call to accept');\n      return;\n    }\n    \n    try {\n      this.logger.log('Accepting incoming call from:', this.targetUserId);\n      this.updateCallState('connecting');\n      \n      // Make sure we have camera and microphone access\n      if (!this.mediaManager.hasLocalStream()) {\n        await this.getLocalMedia();\n      }\n      \n      // Accept the call\n      await this.connectionManager.acceptCall(this.targetUserId);\n    } catch (error) {\n      this.handleError('accepting call', error, true);\n    }\n  }\n  \n  /**\n   * Decline an incoming call\n   */\n  declineCall() {\n    if (!this.targetUserId) {\n      this.logger.log('No incoming call to decline');\n      return;\n    }\n    \n    this.logger.log('Declining call from:', this.targetUserId);\n    this.signalingService.send('call-declined', { targetUserId: this.targetUserId });\n    this.resetCallState();\n  }\n  \n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    this.logger.log('Resetting call state');\n    this.targetUserId = null;\n    \n    if (this.connectionManager) {\n      this.connectionManager.reset();\n    }\n  }\n  \n  /**\n   * Get access to local camera and microphone\n   * @param {boolean|object} videoConstraints - Constraints for video\n   * @param {boolean|object} audioConstraints - Constraints for audio\n   * @returns {Promise<MediaStream>} - Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      const stream = await this.mediaManager.getLocalMedia(videoConstraints, audioConstraints);\n      \n      // Add local stream to connection manager if it exists\n      if (this.connectionManager) {\n        this.connectionManager.setLocalStream(stream);\n      }\n      \n      return stream;\n    } catch (error) {\n      this.handleError('accessing media devices', error, true);\n      throw error;\n    }\n  }\n  \n  /**\n   * Toggle audio mute state\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    this.mediaManager.toggleAudio(muted);\n  }\n  \n  /**\n   * Toggle video on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    this.mediaManager.toggleVideo(videoOff);\n  }\n  \n  /**\n   * Unified error handling method\n   */\n  handleError(context, error, fatal = false) {\n    this.logger.error(`Error in ${context}:`, error.message);\n    console.error(`Error in ${context}:`, error);\n    \n    // Emit error event for UI components to handle\n    this.eventEmitter.emit('error', {\n      context,\n      message: error.message,\n      fatal\n    });\n    \n    // If it's a fatal error, end the call\n    if (fatal) {\n      this.updateCallState('ended');\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * Disconnect from signaling server and clean up resources\n   */\n  disconnect() {\n    this.logger.log('Disconnecting WebRTC service');\n  \n  // End any active call\n  this.endCall(true);\n  \n  // Clear state check interval\n  if (this.stateCheckInterval) {\n    clearInterval(this.stateCheckInterval);\n    this.stateCheckInterval = null;\n  }\n  \n  // Clear connection monitor interval\n  if (this.connectionMonitorInterval) {\n    clearInterval(this.connectionMonitorInterval);\n    this.connectionMonitorInterval = null;\n  }\n    \n    // Disconnect from signaling server\n    if (this.signalingService) {\n      this.signalingService.disconnect();\n    }\n    \n    // Clean up managers\n    if (this.connectionManager) {\n      this.connectionManager.cleanup();\n    }\n    \n    if (this.mediaManager) {\n      this.mediaManager.cleanup();\n    }\n    \n    // Reset initialization status\n    this.isInitialized = false;\n    \n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}