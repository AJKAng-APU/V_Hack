{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\n// Fixed VideoCallScreen.jsx without infinite loop\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre2, _remoteVideoRef$curre4;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n\n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n\n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n\n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n\n  // Enhanced logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      log(`Remote video has ${tracks.length} tracks`);\n      if (tracks.length > 0) {\n        log('Tracks detected, should force active UI state');\n        shouldSetActive = true;\n\n        // Try to play the video if paused\n        if (remoteVideoRef.current.paused) {\n          log('Video is paused, attempting to play');\n          remoteVideoRef.current.play().catch(e => {\n            log(`Auto-play failed: ${e.message}`);\n          });\n        }\n      }\n    }\n\n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n\n    // Check for connection manager remote stream\n    if (webRTCService.hasRemoteStream && webRTCService.hasRemoteStream()) {\n      log('WebRTC has remote stream, should force active state');\n      shouldSetActive = true;\n    }\n\n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n\n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && Date.now() - activeSinceRef.current > 5000) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n\n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n    }\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n\n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n\n    // Set up callbacks\n    const callbacks = {\n      onLocalStream: stream => {\n        log(`Got local stream with ${stream.getTracks().length} tracks`);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          log('Set local video source');\n        }\n      },\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n\n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state changed to: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    }\n\n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n\n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [setTimeout(() => forceVideoStateCheck(), 2000), setTimeout(() => forceVideoStateCheck(), 5000), setTimeout(() => forceVideoStateCheck(), 8000),\n    // Force active state after 10 seconds\n    setTimeout(() => {\n      if (callStatusRef.current === 'connecting') {\n        log('10 seconds passed, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n      }\n    }, 10000)];\n\n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n\n      // Never go backwards from active to connecting\n      if (state === 'active' || state === 'connecting' && callStatusRef.current !== 'active') {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', error => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n    });\n\n    // Set up mouse movement tracker for controls\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(mouseMoveTimer);\n        mouseMoveTimer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    let mouseMoveTimer;\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n      }\n    }, 1000);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren, _remoteVideoRef$curre;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(mouseMoveTimer);\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  useEffect(() => {\n    if (callStatus === 'active' || remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      // Force the active state flag to true\n      forceActiveRef.current = true;\n\n      // Also ensure video elements are visible\n      if (localVideoRef.current) {\n        localVideoRef.current.style.display = 'block';\n      }\n    }\n  }, [callStatus, (_remoteVideoRef$curre2 = remoteVideoRef.current) === null || _remoteVideoRef$curre2 === void 0 ? void 0 : _remoteVideoRef$curre2.srcObject]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    var _remoteVideoRef$curre3;\n    if ((_remoteVideoRef$curre3 = remoteVideoRef.current) !== null && _remoteVideoRef$curre3 !== void 0 && _remoteVideoRef$curre3.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n          return true;\n        }\n        return false;\n      };\n      if (checkForTracks()) return; // Tracks already present\n\n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n      };\n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n\n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) {\n        // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [(_remoteVideoRef$curre4 = remoteVideoRef.current) === null || _remoteVideoRef$curre4 === void 0 ? void 0 : _remoteVideoRef$curre4.srcObject]);\n\n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n      }, 15000); // Force active after 15 seconds max\n\n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Using the improved VideoDisplay component for active call\n      _jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        callStatus: callStatus,\n        forceActiveState: forceActiveRef.current,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full\",\n          style: {\n            zIndex: 500\n          },\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"5ratSZbK1XiBNYHN1engWZboMQU=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","VideoDisplay","Users","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre2","_remoteVideoRef$curre4","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","streamReady","setStreamReady","forceActiveRef","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","stateCheckerInterval","stateCheckTimeouts","activeSinceRef","callStatusRef","current","log","message","console","forceVideoStateCheck","shouldSetActive","srcObject","tracks","getTracks","length","paused","play","catch","e","isCallActive","hasRemoteStream","Date","now","toggleVideo","videoOff","mediaManager","hasLocalStream","handleEndCall","endCall","name","callbacks","onLocalStream","stream","onRemoteStream","muted","err","clearInterval","setInterval","prev","onCallStarted","onCallEnded","setTimeout","onICEConnectionStateChange","state","updateCallbacks","getLocalMedia","error","unsubscribeCallState","on","unsubscribeError","fatal","unsubscribeTrackAdded","handleMouseMove","clearTimeout","mouseMoveTimer","window","addEventListener","_localVideoRef$curren","_remoteVideoRef$curre","forEach","timeout","removeEventListener","track","stop","toggleAudio","style","display","formatTime","seconds","mins","Math","floor","secs","toString","padStart","_remoteVideoRef$curre3","checkForTracks","handleCanPlay","handleLoadedMetadata","readyState","className","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","forceActiveState","zIndex","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["// Fixed VideoCallScreen.jsx without infinite loop\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  \n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n  \n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  \n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n  \n  // Enhanced logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    \n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    \n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      log(`Remote video has ${tracks.length} tracks`);\n      \n      if (tracks.length > 0) {\n        log('Tracks detected, should force active UI state');\n        shouldSetActive = true;\n        \n        // Try to play the video if paused\n        if (remoteVideoRef.current.paused) {\n          log('Video is paused, attempting to play');\n          remoteVideoRef.current.play().catch(e => {\n            log(`Auto-play failed: ${e.message}`);\n          });\n        }\n      }\n    }\n    \n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n    \n    // Check for connection manager remote stream\n    if (webRTCService.hasRemoteStream && webRTCService.hasRemoteStream()) {\n      log('WebRTC has remote stream, should force active state');\n      shouldSetActive = true;\n    }\n    \n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n    \n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && (Date.now() - activeSinceRef.current > 5000)) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n    \n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n    }\n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n  \n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n    \n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n    \n    // Set up callbacks\n    const callbacks = {\n      onLocalStream: (stream) => {\n        log(`Got local stream with ${stream.getTracks().length} tracks`);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          log('Set local video source');\n        }\n      },\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n          \n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state changed to: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    }\n    \n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n    \n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [\n      setTimeout(() => forceVideoStateCheck(), 2000),\n      setTimeout(() => forceVideoStateCheck(), 5000),\n      setTimeout(() => forceVideoStateCheck(), 8000),\n      // Force active state after 10 seconds\n      setTimeout(() => {\n        if (callStatusRef.current === 'connecting') {\n          log('10 seconds passed, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          forceActiveRef.current = true;\n        }\n      }, 10000)\n    ];\n    \n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n      \n      // Never go backwards from active to connecting\n      if (state === 'active' || (state === 'connecting' && callStatusRef.current !== 'active')) {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', (error) => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      \n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n    });\n    \n    // Set up mouse movement tracker for controls\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(mouseMoveTimer);\n        mouseMoveTimer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    let mouseMoveTimer;\n    window.addEventListener('mousemove', handleMouseMove);\n    \n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n      }\n    }, 1000);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      \n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      \n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      \n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(mouseMoveTimer);\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  useEffect(() => {\n    if (callStatus === 'active' || (remoteVideoRef.current && remoteVideoRef.current.srcObject)) {\n      // Force the active state flag to true\n      forceActiveRef.current = true;\n      \n      // Also ensure video elements are visible\n      if (localVideoRef.current) {\n        localVideoRef.current.style.display = 'block';\n      }\n    }\n  }, [callStatus, remoteVideoRef.current?.srcObject]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    if (remoteVideoRef.current?.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n          return true;\n        }\n        return false;\n      };\n      \n      if (checkForTracks()) return; // Tracks already present\n      \n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n      };\n      \n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      \n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n      \n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) { // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      \n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n      }, 15000); // Force active after 15 seconds max\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          // Using the improved VideoDisplay component for active call\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n            callStatus={callStatus}\n            forceActiveState={forceActiveRef.current}\n          >\n            {/* Render header and connection status inside VideoDisplay */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls}\n            />\n            \n            {/* Active call visual indicator */}\n            <div \n              className=\"absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full\"\n              style={{ zIndex: 500 }}\n            >\n              Active\n            </div>\n          </VideoDisplay>\n        )}\n        \n        {/* Controls - always visible */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n\n\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}