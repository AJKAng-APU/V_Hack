{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // Control visibility preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n\n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n\n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const lastTapTimeRef = useRef(0); // Store the time of the last tap for double-tap detection\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null);\n\n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n\n  // Enhanced logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n\n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n\n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      if (!alwaysShowControls) {\n        mouseMoveTimerRef.current = setTimeout(() => {\n          setShowControls(false);\n        }, 15000); // 15 seconds for initial call activation\n      }\n    }\n  }, [callStatus, alwaysShowControls]);\n\n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n\n  // Function to reset the controls hide timer\n  const resetControlsTimer = () => {\n    // Show controls immediately\n    setShowControls(true);\n\n    // Clear any existing timer\n    if (mouseMoveTimerRef.current) {\n      clearTimeout(mouseMoveTimerRef.current);\n      mouseMoveTimerRef.current = null;\n    }\n\n    // Only set a new timer if not in \"always show\" mode\n    if (!alwaysShowControls) {\n      mouseMoveTimerRef.current = setTimeout(() => {\n        setShowControls(false);\n      }, 10000); // 10 seconds before hiding again\n    }\n  };\n\n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    var _webRTCService$connec2;\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    log('Performing forced video state check');\n    let shouldSetActive = false;\n\n    // IMPROVED: Better remote video stream checking\n    if (remoteVideoRef.current) {\n      var _webRTCService$connec;\n      // Check if we need to attach the remote stream from webRTCService\n      if (!remoteVideoRef.current.srcObject && (_webRTCService$connec = webRTCService.connectionManager) !== null && _webRTCService$connec !== void 0 && _webRTCService$connec.remoteStream) {\n        log('Remote video has no srcObject but webRTCService has remote stream, attaching it now');\n        remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n        try {\n          remoteVideoRef.current.play().catch(e => {\n            log(`Remote video play error: ${e.message}`);\n          });\n        } catch (err) {\n          log(`Error playing remote video: ${err.message}`);\n        }\n\n        // Since we found and attached a stream, we should be active\n        shouldSetActive = true;\n      }\n\n      // Check existing stream for tracks\n      if (remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        log(`Remote video has ${tracks.length} tracks`);\n\n        // Log specific track info for debugging\n        tracks.forEach(track => {\n          log(`Track: ${track.kind}, ID: ${track.id}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n        });\n        if (tracks.length > 0) {\n          log('Tracks detected, should force active UI state');\n          shouldSetActive = true;\n\n          // Try to play the video if paused\n          if (remoteVideoRef.current.paused) {\n            log('Video is paused, attempting to play');\n            remoteVideoRef.current.play().catch(e => {\n              log(`Auto-play failed: ${e.message}`);\n            });\n          }\n        }\n      }\n    }\n\n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n\n    // IMPROVED: More aggressive check for remote stream\n    if ((_webRTCService$connec2 = webRTCService.connectionManager) !== null && _webRTCService$connec2 !== void 0 && _webRTCService$connec2.remoteStream) {\n      log('WebRTC has remote stream, force attaching to video element and setting active state');\n\n      // Always re-attach the stream to ensure it's the latest\n      if (remoteVideoRef.current) {\n        if (remoteVideoRef.current.srcObject !== webRTCService.connectionManager.remoteStream) {\n          log('Updating remote video with current stream from connectionManager');\n          remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n          try {\n            remoteVideoRef.current.play().catch(e => {\n              log(`Remote video play error: ${e.message}`);\n            });\n          } catch (err) {\n            log(`Error playing remote video: ${err.message}`);\n          }\n        }\n      }\n      shouldSetActive = true;\n    }\n\n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n\n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && Date.now() - activeSinceRef.current > 5000) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n\n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n\n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n\n    // IMPROVED: Local video checking and attachment\n    if (localVideoRef.current) {\n      var _webRTCService$mediaM;\n      if (!localVideoRef.current.srcObject && (_webRTCService$mediaM = webRTCService.mediaManager) !== null && _webRTCService$mediaM !== void 0 && _webRTCService$mediaM.localStream) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n\n        // Trigger a play with better error handling\n        try {\n          localVideoRef.current.play().catch(e => {\n            log(`Local play error: ${e.message}`);\n            // Try muted playback as a fallback (helps with autoplay restrictions)\n            localVideoRef.current.muted = true;\n            localVideoRef.current.play().catch(innerErr => {\n              log(`Local muted play also failed: ${innerErr.message}`);\n            });\n          });\n        } catch (err) {\n          log(`Error during local play: ${err.message}`);\n        }\n      } else if (localVideoRef.current.srcObject) {\n        // Check if tracks are enabled\n        const videoTracks = localVideoRef.current.srcObject.getVideoTracks();\n        if (videoTracks.length > 0) {\n          log(`Local video has ${videoTracks.length} video tracks`);\n          videoTracks.forEach(track => {\n            log(`Local track: ${track.kind}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n\n            // If video is not disabled by user but track is disabled, enable it\n            if (!isVideoOff && !track.enabled) {\n              log('Local track was disabled but should be enabled, enabling it now');\n              track.enabled = true;\n            }\n          });\n        } else {\n          log('Local video has no video tracks, only audio');\n        }\n      }\n    }\n  };\n\n  // Function to safely toggle video state\n  // IMPORTANT: This is the key function that needs to be fixed\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n\n    // First update the state\n    setIsVideoOff(videoOff);\n\n    // CRITICAL: Always show controls when toggling video\n    setShowControls(true);\n\n    // Reset the hide timer\n    if (mouseMoveTimerRef.current) {\n      clearTimeout(mouseMoveTimerRef.current);\n      mouseMoveTimerRef.current = null;\n    }\n\n    // If always show controls is off, set a new timer\n    if (!alwaysShowControls) {\n      mouseMoveTimerRef.current = setTimeout(() => {\n        setShowControls(false);\n      }, 15000); // Longer timeout (15s) after toggling camera\n    }\n\n    // Toggle the video in WebRTC\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n\n      // Add a delay to ensure the video state has been processed\n      setTimeout(() => {\n        // This will force a state check to update UI if needed\n        forceVideoStateCheck();\n      }, 500);\n    }\n  };\n\n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n\n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n\n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        } else if (mouseMoveTimerRef.current === null) {\n          // If disabling and no timer exists, create one\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000);\n        }\n\n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        return newValue;\n      });\n\n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n\n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n\n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = stream => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n\n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n\n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n\n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n\n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Make sure controls are visible when call starts\n        setShowControls(true);\n\n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state changed to: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).then(stream => {\n        log(`Local media access granted with ${stream.getTracks().length} tracks`);\n        // Explicitly set local video source here as well for redundancy\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n\n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n\n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [setTimeout(() => forceVideoStateCheck(), 2000), setTimeout(() => forceVideoStateCheck(), 5000), setTimeout(() => forceVideoStateCheck(), 8000),\n    // Force active state after 10 seconds\n    setTimeout(() => {\n      if (callStatusRef.current === 'connecting') {\n        log('10 seconds passed, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Show controls again when forcing active state\n        setShowControls(true);\n      }\n    }, 10000)];\n\n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n\n      // Never go backwards from active to connecting\n      if (state === 'active' || state === 'connecting' && callStatusRef.current !== 'active') {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n\n        // Show controls on state change\n        setShowControls(true);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n\n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            // Check if we're still active before hiding controls\n            if (callStatusRef.current === 'active') {\n              setShowControls(false);\n            }\n          }, 10000); // 10 seconds\n        }\n      }\n    };\n\n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n\n    // Double-tap handler to toggle persistent controls\n    const handleDoubleTap = e => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n\n      if (now - lastTapTimeRef.current < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      lastTapTimeRef.current = now;\n    };\n\n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren, _remoteVideoRef$curre;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls, isSpeakerOff]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        callStatus: callStatus,\n        forceActiveState: forceActiveRef.current,\n        onClick: () => {\n          // Show controls when clicking anywhere on the video\n          setShowControls(true);\n\n          // Reset the hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n          }\n\n          // Only set a new timer if not in \"always show\" mode\n          if (!alwaysShowControls) {\n            mouseMoveTimerRef.current = setTimeout(() => {\n              setShowControls(false);\n            }, 10000); // 10 seconds before hiding again\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls || connectionQuality !== 'good' // Always show when connection is not good\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`,\n          style: {\n            zIndex: 500\n          },\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        setShowControls: setShowControls // Pass the setter directly\n        ,\n        resetControlsTimer: resetControlsTimer // Pass the reset function\n        ,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 672,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"AcBhlpp6aK310veA6YUgpwhePo4=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","VideoDisplay","Users","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","alwaysShowControls","setAlwaysShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","streamReady","setStreamReady","forceActiveRef","localVideoRef","remoteVideoRef","lastMoveTimeRef","lastTapTimeRef","callDurationTimer","stateCheckerInterval","stateCheckTimeouts","activeSinceRef","callStatusRef","mouseMoveTimerRef","current","log","message","console","clearTimeout","setTimeout","savedPreference","localStorage","getItem","e","resetControlsTimer","forceVideoStateCheck","_webRTCService$connec2","shouldSetActive","_webRTCService$connec","srcObject","connectionManager","remoteStream","play","catch","err","tracks","getTracks","length","forEach","track","kind","id","enabled","readyState","paused","isCallActive","Date","now","_webRTCService$mediaM","mediaManager","localStream","muted","innerErr","videoTracks","getVideoTracks","toggleVideo","videoOff","hasLocalStream","toggleAlwaysShowControls","prevValue","newValue","setItem","error","handleEndCall","endCall","name","handleLocalStream","stream","callbacks","onLocalStream","onRemoteStream","clearInterval","setInterval","prev","onCallStarted","onCallEnded","onICEConnectionStateChange","state","updateCallbacks","getLocalMedia","then","unsubscribeCallState","on","handleUserActivity","window","addEventListener","handleDoubleTap","DOUBLE_TAP_THRESHOLD","preventDefault","_localVideoRef$curren","_remoteVideoRef$curre","timeout","removeEventListener","stop","toggleAudio","formatTime","seconds","mins","Math","floor","secs","toString","padStart","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","forceActiveState","onClick","zIndex","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // Control visibility preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  \n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n  \n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const lastTapTimeRef = useRef(0); // Store the time of the last tap for double-tap detection\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null);\n  \n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n  \n  // Enhanced logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n      \n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      if (!alwaysShowControls) {\n        mouseMoveTimerRef.current = setTimeout(() => {\n          setShowControls(false);\n        }, 15000); // 15 seconds for initial call activation\n      }\n    }\n  }, [callStatus, alwaysShowControls]);\n  \n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n  \n  // Function to reset the controls hide timer\n  const resetControlsTimer = () => {\n    // Show controls immediately\n    setShowControls(true);\n    \n    // Clear any existing timer\n    if (mouseMoveTimerRef.current) {\n      clearTimeout(mouseMoveTimerRef.current);\n      mouseMoveTimerRef.current = null;\n    }\n    \n    // Only set a new timer if not in \"always show\" mode\n    if (!alwaysShowControls) {\n      mouseMoveTimerRef.current = setTimeout(() => {\n        setShowControls(false);\n      }, 10000); // 10 seconds before hiding again\n    }\n  };\n  \n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    \n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    \n    // IMPROVED: Better remote video stream checking\n    if (remoteVideoRef.current) {\n      // Check if we need to attach the remote stream from webRTCService\n      if (!remoteVideoRef.current.srcObject && webRTCService.connectionManager?.remoteStream) {\n        log('Remote video has no srcObject but webRTCService has remote stream, attaching it now');\n        remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n        \n        try {\n          remoteVideoRef.current.play().catch(e => {\n            log(`Remote video play error: ${e.message}`);\n          });\n        } catch (err) {\n          log(`Error playing remote video: ${err.message}`);\n        }\n        \n        // Since we found and attached a stream, we should be active\n        shouldSetActive = true;\n      }\n      \n      // Check existing stream for tracks\n      if (remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        log(`Remote video has ${tracks.length} tracks`);\n        \n        // Log specific track info for debugging\n        tracks.forEach(track => {\n          log(`Track: ${track.kind}, ID: ${track.id}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n        });\n        \n        if (tracks.length > 0) {\n          log('Tracks detected, should force active UI state');\n          shouldSetActive = true;\n          \n          // Try to play the video if paused\n          if (remoteVideoRef.current.paused) {\n            log('Video is paused, attempting to play');\n            remoteVideoRef.current.play().catch(e => {\n              log(`Auto-play failed: ${e.message}`);\n            });\n          }\n        }\n      }\n    }\n    \n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n    \n    // IMPROVED: More aggressive check for remote stream\n    if (webRTCService.connectionManager?.remoteStream) {\n      log('WebRTC has remote stream, force attaching to video element and setting active state');\n      \n      // Always re-attach the stream to ensure it's the latest\n      if (remoteVideoRef.current) {\n        if (remoteVideoRef.current.srcObject !== webRTCService.connectionManager.remoteStream) {\n          log('Updating remote video with current stream from connectionManager');\n          remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n          \n          try {\n            remoteVideoRef.current.play().catch(e => {\n              log(`Remote video play error: ${e.message}`);\n            });\n          } catch (err) {\n            log(`Error playing remote video: ${err.message}`);\n          }\n        }\n      }\n      \n      shouldSetActive = true;\n    }\n    \n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n    \n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && (Date.now() - activeSinceRef.current > 5000)) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n    \n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n      \n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n  \n    // IMPROVED: Local video checking and attachment\n    if (localVideoRef.current) {\n      if (!localVideoRef.current.srcObject && webRTCService.mediaManager?.localStream) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        \n        // Trigger a play with better error handling\n        try {\n          localVideoRef.current.play().catch(e => {\n            log(`Local play error: ${e.message}`);\n            // Try muted playback as a fallback (helps with autoplay restrictions)\n            localVideoRef.current.muted = true;\n            localVideoRef.current.play().catch(innerErr => {\n              log(`Local muted play also failed: ${innerErr.message}`);\n            });\n          });\n        } catch (err) {\n          log(`Error during local play: ${err.message}`);\n        }\n      } else if (localVideoRef.current.srcObject) {\n        // Check if tracks are enabled\n        const videoTracks = localVideoRef.current.srcObject.getVideoTracks();\n        if (videoTracks.length > 0) {\n          log(`Local video has ${videoTracks.length} video tracks`);\n          videoTracks.forEach(track => {\n            log(`Local track: ${track.kind}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n            \n            // If video is not disabled by user but track is disabled, enable it\n            if (!isVideoOff && !track.enabled) {\n              log('Local track was disabled but should be enabled, enabling it now');\n              track.enabled = true;\n            }\n          });\n        } else {\n          log('Local video has no video tracks, only audio');\n        }\n      }\n    }  \n  };\n  \n  // Function to safely toggle video state\n  // IMPORTANT: This is the key function that needs to be fixed\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    \n    // First update the state\n    setIsVideoOff(videoOff);\n    \n    // CRITICAL: Always show controls when toggling video\n    setShowControls(true);\n    \n    // Reset the hide timer\n    if (mouseMoveTimerRef.current) {\n      clearTimeout(mouseMoveTimerRef.current);\n      mouseMoveTimerRef.current = null;\n    }\n    \n    // If always show controls is off, set a new timer\n    if (!alwaysShowControls) {\n      mouseMoveTimerRef.current = setTimeout(() => {\n        setShowControls(false);\n      }, 15000); // Longer timeout (15s) after toggling camera\n    }\n    \n    // Toggle the video in WebRTC\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n      \n      // Add a delay to ensure the video state has been processed\n      setTimeout(() => {\n        // This will force a state check to update UI if needed\n        forceVideoStateCheck();\n      }, 500);\n    }\n  };\n  \n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n        \n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n          \n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        } else if (mouseMoveTimerRef.current === null) {\n          // If disabling and no timer exists, create one\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000);\n        }\n        \n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        \n        return newValue;\n      });\n      \n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n  \n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n    \n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n    \n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = (stream) => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n        \n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n        \n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            \n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n    \n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n          \n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Make sure controls are visible when call starts\n        setShowControls(true);\n        \n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state changed to: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .then(stream => {\n          log(`Local media access granted with ${stream.getTracks().length} tracks`);\n          // Explicitly set local video source here as well for redundancy\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n          }\n        })\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n    \n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n    \n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [\n      setTimeout(() => forceVideoStateCheck(), 2000),\n      setTimeout(() => forceVideoStateCheck(), 5000),\n      setTimeout(() => forceVideoStateCheck(), 8000),\n      // Force active state after 10 seconds\n      setTimeout(() => {\n        if (callStatusRef.current === 'connecting') {\n          log('10 seconds passed, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          forceActiveRef.current = true;\n          \n          // Show controls again when forcing active state\n          setShowControls(true);\n        }\n      }, 10000)\n    ];\n    \n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n      \n      // Never go backwards from active to connecting\n      if (state === 'active' || (state === 'connecting' && callStatusRef.current !== 'active')) {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n        \n        // Show controls on state change\n        setShowControls(true);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            // Check if we're still active before hiding controls\n            if (callStatusRef.current === 'active') {\n              setShowControls(false);\n            }\n          }, 10000); // 10 seconds\n        }\n      }\n    };\n    \n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n    \n    // Double-tap handler to toggle persistent controls\n    const handleDoubleTap = (e) => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n      \n      if (now - lastTapTimeRef.current < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      \n      lastTapTimeRef.current = now;\n    };\n    \n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      \n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      \n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      \n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      \n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls, isSpeakerOff]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    \n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n            callStatus={callStatus}\n            forceActiveState={forceActiveRef.current}\n            onClick={() => {\n              // Show controls when clicking anywhere on the video\n              setShowControls(true);\n              \n              // Reset the hide timer\n              if (mouseMoveTimerRef.current) {\n                clearTimeout(mouseMoveTimerRef.current);\n              }\n              \n              // Only set a new timer if not in \"always show\" mode\n              if (!alwaysShowControls) {\n                mouseMoveTimerRef.current = setTimeout(() => {\n                  setShowControls(false);\n                }, 10000); // 10 seconds before hiding again\n              }\n            }}\n          >\n            {/* Render header and connection status inside VideoDisplay */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls || connectionQuality !== 'good'} // Always show when connection is not good\n            />\n            \n            {/* Active call visual indicator */}\n            <div \n              className={`absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`}\n              style={{ zIndex: 500 }}\n            >\n              Active\n            </div>\n          </VideoDisplay>\n        )}\n        \n        {/* Controls - IMPORTANT: Use the resetControlsTimer function */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          setShowControls={setShowControls}  // Pass the setter directly\n          resetControlsTimer={resetControlsTimer}  // Pass the reset function\n          colors={colors}\n          callStatus={callStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}