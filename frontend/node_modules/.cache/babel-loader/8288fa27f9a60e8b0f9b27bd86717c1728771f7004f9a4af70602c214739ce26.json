{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport supabase from './supabaseClient';\nimport { useAuth } from './AuthProvider';\n\n/**\n * Custom hook for managing medications with Supabase\n * Handles fetching, creating, updating, and deleting medications\n */\nexport const useMedications = () => {\n  _s();\n  const [medications, setMedications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n\n  // Fetch medications and related data\n  const fetchMedications = async () => {\n    if (!user) {\n      setMedications([]);\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n\n      // Fetch user medications\n      const {\n        data: medicationsData,\n        error: medicationsError\n      } = await supabase.from('user_medications').select('*').eq('user_id', user.id);\n      if (medicationsError) throw medicationsError;\n\n      // Fetch medication schedules for each medication\n      const medicationsWithSchedules = await Promise.all(medicationsData.map(async med => {\n        const {\n          data: scheduleData,\n          error: scheduleError\n        } = await supabase.from('medication_schedule').select('*').eq('medication_id', med.medication_id);\n        if (scheduleError) throw scheduleError;\n\n        // Format schedule data to match the application's format\n        const formattedSchedules = scheduleData.map(schedule => ({\n          time: schedule.time,\n          status: schedule.status,\n          day: schedule.day_reference\n        }));\n\n        // Fetch side effects\n        const {\n          data: sideEffectsData,\n          error: sideEffectsError\n        } = await supabase.from('medication_side_effects').select('*').eq('medication_id', med.medication_id);\n        if (sideEffectsError) throw sideEffectsError;\n        const sideEffects = sideEffectsData.map(effect => effect.effect_text);\n\n        // Fetch interactions\n        const {\n          data: interactionsData,\n          error: interactionsError\n        } = await supabase.from('medication_interactions').select('*').eq('medication_id', med.medication_id);\n        if (interactionsError) throw interactionsError;\n\n        // Fetch medication history logs\n        const {\n          data: historyData,\n          error: historyError\n        } = await supabase.from('medication_history_logs').select('*').eq('medication_id', med.medication_id).order('log_date', {\n          ascending: false\n        });\n        if (historyError) throw historyError;\n\n        // Format history data\n        const formattedHistory = historyData.map(history => ({\n          date: history.log_date,\n          time: history.log_time,\n          status: history.status,\n          delay: history.delay_note\n        }));\n\n        // Calculate adherence rate based on history\n        const totalDoses = formattedHistory.length;\n        const takenDoses = formattedHistory.filter(h => h.status === 'taken').length;\n        const adherenceRate = totalDoses > 0 ? Math.round(takenDoses / totalDoses * 100) : 100;\n        const missedDoses = totalDoses - takenDoses;\n\n        // Return complete medication object with related data\n        return {\n          id: med.medication_id,\n          name: med.name,\n          dosage: med.dosage,\n          form: med.form,\n          purpose: med.purpose,\n          instructions: med.instructions,\n          category: med.category,\n          prescribedBy: med.prescribed_by,\n          startDate: med.start_date,\n          refillDate: med.refill_date,\n          refillRemaining: med.refill_remaining,\n          adherenceRate: adherenceRate,\n          missedDoses: missedDoses,\n          schedule: formattedSchedules,\n          sideEffects: sideEffects,\n          interactions: interactionsData.map(interaction => ({\n            medication: interaction.conflict_with,\n            severity: interaction.severity,\n            description: interaction.description\n          })),\n          history: formattedHistory\n        };\n      }));\n      setMedications(medicationsWithSchedules);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching medications:', error.message);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new medication\n  const addMedication = async medicationData => {\n    if (!user) return {\n      success: false,\n      error: 'User not authenticated'\n    };\n    try {\n      // First, insert the medication\n      const {\n        data: newMedication,\n        error: medicationError\n      } = await supabase.from('user_medications').insert({\n        user_id: user.id,\n        name: medicationData.name,\n        dosage: medicationData.dosage,\n        form: medicationData.form,\n        purpose: medicationData.purpose,\n        instructions: medicationData.instructions,\n        category: medicationData.category || 'general',\n        prescribed_by: medicationData.prescribedBy,\n        start_date: medicationData.startDate,\n        refill_date: medicationData.refillDate,\n        refill_remaining: medicationData.refillRemaining,\n        missed_doses: 0,\n        created_at: new Date().toISOString()\n      }).select();\n      if (medicationError) throw medicationError;\n\n      // Then, insert the schedule entries\n      if (medicationData.schedule && medicationData.schedule.length > 0) {\n        const scheduleEntries = medicationData.schedule.map(schedule => ({\n          medication_id: newMedication[0].medication_id,\n          time: schedule.time,\n          status: schedule.status || 'upcoming',\n          day_reference: schedule.day || 'today'\n        }));\n        const {\n          error: scheduleError\n        } = await supabase.from('medication_schedule').insert(scheduleEntries);\n        if (scheduleError) throw scheduleError;\n      }\n\n      // Insert side effects\n      if (medicationData.sideEffects && medicationData.sideEffects.length > 0) {\n        const sideEffectsEntries = medicationData.sideEffects.map(effect => ({\n          medication_id: newMedication[0].medication_id,\n          effect_text: effect\n        }));\n        const {\n          error: sideEffectsError\n        } = await supabase.from('medication_side_effects').insert(sideEffectsEntries);\n        if (sideEffectsError) throw sideEffectsError;\n      }\n\n      // Insert interactions\n      if (medicationData.interactions && medicationData.interactions.length > 0) {\n        const interactionsEntries = medicationData.interactions.map(interaction => ({\n          medication_id: newMedication[0].medication_id,\n          conflict_with: interaction.medication,\n          severity: interaction.severity,\n          description: interaction.description\n        }));\n        const {\n          error: interactionsError\n        } = await supabase.from('medication_interactions').insert(interactionsEntries);\n        if (interactionsError) throw interactionsError;\n      }\n\n      // Refresh medications list\n      await fetchMedications();\n      return {\n        success: true,\n        medicationId: newMedication[0].medication_id\n      };\n    } catch (error) {\n      console.error('Error adding medication:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Update medication\n  const updateMedication = async (medicationId, medicationData) => {\n    if (!user) return {\n      success: false,\n      error: 'User not authenticated'\n    };\n    try {\n      // Update medication record\n      const {\n        error: medicationError\n      } = await supabase.from('user_medications').update({\n        name: medicationData.name,\n        dosage: medicationData.dosage,\n        form: medicationData.form,\n        purpose: medicationData.purpose,\n        instructions: medicationData.instructions,\n        category: medicationData.category,\n        prescribed_by: medicationData.prescribedBy,\n        start_date: medicationData.startDate,\n        refill_date: medicationData.refillDate,\n        refill_remaining: medicationData.refillRemaining\n      }).eq('medication_id', medicationId).eq('user_id', user.id);\n      if (medicationError) throw medicationError;\n\n      // Update schedule - delete old entries and insert new ones\n      if (medicationData.schedule && medicationData.schedule.length > 0) {\n        // Delete existing schedules\n        const {\n          error: deleteScheduleError\n        } = await supabase.from('medication_schedule').delete().eq('medication_id', medicationId);\n        if (deleteScheduleError) throw deleteScheduleError;\n\n        // Insert new schedules\n        const scheduleEntries = medicationData.schedule.map(schedule => ({\n          medication_id: medicationId,\n          time: schedule.time,\n          status: schedule.status || 'upcoming',\n          day_reference: schedule.day || 'today'\n        }));\n        const {\n          error: scheduleError\n        } = await supabase.from('medication_schedule').insert(scheduleEntries);\n        if (scheduleError) throw scheduleError;\n      }\n\n      // Update side effects - delete old entries and insert new ones\n      if (medicationData.sideEffects && medicationData.sideEffects.length > 0) {\n        // Delete existing side effects\n        const {\n          error: deleteSideEffectsError\n        } = await supabase.from('medication_side_effects').delete().eq('medication_id', medicationId);\n        if (deleteSideEffectsError) throw deleteSideEffectsError;\n\n        // Insert new side effects\n        const sideEffectsEntries = medicationData.sideEffects.map(effect => ({\n          medication_id: medicationId,\n          effect_text: effect\n        }));\n        const {\n          error: sideEffectsError\n        } = await supabase.from('medication_side_effects').insert(sideEffectsEntries);\n        if (sideEffectsError) throw sideEffectsError;\n      }\n\n      // Update interactions - delete old entries and insert new ones\n      if (medicationData.interactions && medicationData.interactions.length > 0) {\n        // Delete existing interactions\n        const {\n          error: deleteInteractionsError\n        } = await supabase.from('medication_interactions').delete().eq('medication_id', medicationId);\n        if (deleteInteractionsError) throw deleteInteractionsError;\n\n        // Insert new interactions\n        const interactionsEntries = medicationData.interactions.map(interaction => ({\n          medication_id: medicationId,\n          conflict_with: interaction.medication,\n          severity: interaction.severity,\n          description: interaction.description\n        }));\n        const {\n          error: interactionsError\n        } = await supabase.from('medication_interactions').insert(interactionsEntries);\n        if (interactionsError) throw interactionsError;\n      }\n\n      // Refresh medications list\n      await fetchMedications();\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating medication:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Delete medication\n  const deleteMedication = async medicationId => {\n    if (!user) return {\n      success: false,\n      error: 'User not authenticated'\n    };\n    try {\n      // Delete related records first to maintain referential integrity\n\n      // Delete schedule entries\n      const {\n        error: scheduleError\n      } = await supabase.from('medication_schedule').delete().eq('medication_id', medicationId);\n      if (scheduleError) throw scheduleError;\n\n      // Delete side effects\n      const {\n        error: sideEffectsError\n      } = await supabase.from('medication_side_effects').delete().eq('medication_id', medicationId);\n      if (sideEffectsError) throw sideEffectsError;\n\n      // Delete interactions\n      const {\n        error: interactionsError\n      } = await supabase.from('medication_interactions').delete().eq('medication_id', medicationId);\n      if (interactionsError) throw interactionsError;\n\n      // Delete history logs\n      const {\n        error: historyError\n      } = await supabase.from('medication_history_logs').delete().eq('medication_id', medicationId);\n      if (historyError) throw historyError;\n\n      // Delete the medication\n      const {\n        error: medicationError\n      } = await supabase.from('user_medications').delete().eq('medication_id', medicationId).eq('user_id', user.id);\n      if (medicationError) throw medicationError;\n\n      // Refresh medications list\n      await fetchMedications();\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting medication:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Log medication status (taken, missed, etc.)\n  const logMedicationStatus = async (medicationId, scheduleTime, status) => {\n    if (!user) return {\n      success: false,\n      error: 'User not authenticated'\n    };\n    try {\n      // Update the schedule status\n      const {\n        error: scheduleError\n      } = await supabase.from('medication_schedule').update({\n        status\n      }).eq('medication_id', medicationId).eq('time', scheduleTime);\n      if (scheduleError) throw scheduleError;\n\n      // Get current time\n      const now = new Date();\n      const formattedTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n\n      // Calculate delay\n      const scheduleParts = scheduleTime.split(/[:\\s]/);\n      let scheduleHour = parseInt(scheduleParts[0]);\n      const scheduleMinute = parseInt(scheduleParts[1] || 0);\n\n      // Adjust for AM/PM if present\n      if (scheduleTime.includes('PM') && scheduleHour < 12) {\n        scheduleHour += 12;\n      } else if (scheduleTime.includes('AM') && scheduleHour === 12) {\n        scheduleHour = 0;\n      }\n      const scheduleDate = new Date();\n      scheduleDate.setHours(scheduleHour, scheduleMinute, 0, 0);\n      const diffMinutes = Math.round((now - scheduleDate) / (1000 * 60));\n      let delayNote;\n      if (status === 'missed') {\n        delayNote = 'missed';\n      } else if (Math.abs(diffMinutes) <= 5) {\n        delayNote = 'on time';\n      } else if (diffMinutes > 0) {\n        delayNote = `${diffMinutes} min late`;\n      } else {\n        delayNote = `${Math.abs(diffMinutes)} min early`;\n      }\n\n      // Add to history log\n      const {\n        error: historyError\n      } = await supabase.from('medication_history_logs').insert({\n        medication_id: medicationId,\n        log_date: now.toISOString().split('T')[0],\n        log_time: formattedTime,\n        status,\n        delay_note: delayNote\n      });\n      if (historyError) throw historyError;\n\n      // Update adherence metrics in the medication record\n      const {\n        data: historyData,\n        error: fetchHistoryError\n      } = await supabase.from('medication_history_logs').select('*').eq('medication_id', medicationId);\n      if (fetchHistoryError) throw fetchHistoryError;\n\n      // Calculate new adherence rate\n      const totalDoses = historyData.length;\n      const takenDoses = historyData.filter(h => h.status === 'taken').length;\n      const adherenceRate = totalDoses > 0 ? Math.round(takenDoses / totalDoses * 100) : 100;\n      const missedDoses = totalDoses - takenDoses;\n\n      // Update medication record\n      const {\n        error: updateMedicationError\n      } = await supabase.from('user_medications').update({\n        adherence_rate: adherenceRate,\n        missed_doses: missedDoses\n      }).eq('medication_id', medicationId);\n      if (updateMedicationError) throw updateMedicationError;\n\n      // Refresh medications list\n      await fetchMedications();\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error logging medication status:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Add biorhythm optimization data\n  const updateMedicationWithBiorhythm = async (medicationId, biorhythmData) => {\n    if (!user) return {\n      success: false,\n      error: 'User not authenticated'\n    };\n    try {\n      // Find the medication in local state\n      const medicationIndex = medications.findIndex(med => med.id === medicationId);\n      if (medicationIndex === -1) {\n        return {\n          success: false,\n          error: 'Medication not found'\n        };\n      }\n\n      // Update the medication in local state with biorhythm data\n      const updatedMedications = [...medications];\n      updatedMedications[medicationIndex] = {\n        ...updatedMedications[medicationIndex],\n        biorhythmData\n      };\n      setMedications(updatedMedications);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating medication with biorhythm data:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Initial fetch on mount\n  useEffect(() => {\n    fetchMedications();\n  }, [user]);\n  return {\n    medications,\n    loading,\n    error,\n    fetchMedications,\n    addMedication,\n    updateMedication,\n    deleteMedication,\n    logMedicationStatus,\n    updateMedicationWithBiorhythm\n  };\n};\n_s(useMedications, \"4Orq4dEzCYrJxcQ/pCTL7A2YqhE=\", false, function () {\n  return [useAuth];\n});\nexport default useMedications;","map":{"version":3,"names":["useState","useEffect","supabase","useAuth","useMedications","_s","medications","setMedications","loading","setLoading","error","setError","user","fetchMedications","data","medicationsData","medicationsError","from","select","eq","id","medicationsWithSchedules","Promise","all","map","med","scheduleData","scheduleError","medication_id","formattedSchedules","schedule","time","status","day","day_reference","sideEffectsData","sideEffectsError","sideEffects","effect","effect_text","interactionsData","interactionsError","historyData","historyError","order","ascending","formattedHistory","history","date","log_date","log_time","delay","delay_note","totalDoses","length","takenDoses","filter","h","adherenceRate","Math","round","missedDoses","name","dosage","form","purpose","instructions","category","prescribedBy","prescribed_by","startDate","start_date","refillDate","refill_date","refillRemaining","refill_remaining","interactions","interaction","medication","conflict_with","severity","description","console","message","addMedication","medicationData","success","newMedication","medicationError","insert","user_id","missed_doses","created_at","Date","toISOString","scheduleEntries","sideEffectsEntries","interactionsEntries","medicationId","updateMedication","update","deleteScheduleError","delete","deleteSideEffectsError","deleteInteractionsError","deleteMedication","logMedicationStatus","scheduleTime","now","formattedTime","getHours","toString","padStart","getMinutes","scheduleParts","split","scheduleHour","parseInt","scheduleMinute","includes","scheduleDate","setHours","diffMinutes","delayNote","abs","fetchHistoryError","updateMedicationError","adherence_rate","updateMedicationWithBiorhythm","biorhythmData","medicationIndex","findIndex","updatedMedications"],"sources":["/Users/ang/V_Hack_Ver4_2/frontend2/src/components/useMedications.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport supabase from './supabaseClient';\nimport { useAuth } from './AuthProvider';\n\n/**\n * Custom hook for managing medications with Supabase\n * Handles fetching, creating, updating, and deleting medications\n */\nexport const useMedications = () => {\n  const [medications, setMedications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user } = useAuth();\n\n  // Fetch medications and related data\n  const fetchMedications = async () => {\n    if (!user) {\n      setMedications([]);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      // Fetch user medications\n      const { data: medicationsData, error: medicationsError } = await supabase\n        .from('user_medications')\n        .select('*')\n        .eq('user_id', user.id);\n        \n      if (medicationsError) throw medicationsError;\n      \n      // Fetch medication schedules for each medication\n      const medicationsWithSchedules = await Promise.all(medicationsData.map(async (med) => {\n        const { data: scheduleData, error: scheduleError } = await supabase\n          .from('medication_schedule')\n          .select('*')\n          .eq('medication_id', med.medication_id);\n          \n        if (scheduleError) throw scheduleError;\n        \n        // Format schedule data to match the application's format\n        const formattedSchedules = scheduleData.map(schedule => ({\n          time: schedule.time,\n          status: schedule.status,\n          day: schedule.day_reference\n        }));\n        \n        // Fetch side effects\n        const { data: sideEffectsData, error: sideEffectsError } = await supabase\n          .from('medication_side_effects')\n          .select('*')\n          .eq('medication_id', med.medication_id);\n          \n        if (sideEffectsError) throw sideEffectsError;\n        \n        const sideEffects = sideEffectsData.map(effect => effect.effect_text);\n        \n        // Fetch interactions\n        const { data: interactionsData, error: interactionsError } = await supabase\n          .from('medication_interactions')\n          .select('*')\n          .eq('medication_id', med.medication_id);\n          \n        if (interactionsError) throw interactionsError;\n        \n        // Fetch medication history logs\n        const { data: historyData, error: historyError } = await supabase\n          .from('medication_history_logs')\n          .select('*')\n          .eq('medication_id', med.medication_id)\n          .order('log_date', { ascending: false });\n          \n        if (historyError) throw historyError;\n        \n        // Format history data\n        const formattedHistory = historyData.map(history => ({\n          date: history.log_date,\n          time: history.log_time,\n          status: history.status,\n          delay: history.delay_note\n        }));\n        \n        // Calculate adherence rate based on history\n        const totalDoses = formattedHistory.length;\n        const takenDoses = formattedHistory.filter(h => h.status === 'taken').length;\n        const adherenceRate = totalDoses > 0 ? Math.round((takenDoses / totalDoses) * 100) : 100;\n        const missedDoses = totalDoses - takenDoses;\n        \n        // Return complete medication object with related data\n        return {\n          id: med.medication_id,\n          name: med.name,\n          dosage: med.dosage,\n          form: med.form,\n          purpose: med.purpose,\n          instructions: med.instructions,\n          category: med.category,\n          prescribedBy: med.prescribed_by,\n          startDate: med.start_date,\n          refillDate: med.refill_date,\n          refillRemaining: med.refill_remaining,\n          adherenceRate: adherenceRate,\n          missedDoses: missedDoses,\n          schedule: formattedSchedules,\n          sideEffects: sideEffects,\n          interactions: interactionsData.map(interaction => ({\n            medication: interaction.conflict_with,\n            severity: interaction.severity,\n            description: interaction.description\n          })),\n          history: formattedHistory\n        };\n      }));\n      \n      setMedications(medicationsWithSchedules);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching medications:', error.message);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new medication\n  const addMedication = async (medicationData) => {\n    if (!user) return { success: false, error: 'User not authenticated' };\n    \n    try {\n      // First, insert the medication\n      const { data: newMedication, error: medicationError } = await supabase\n        .from('user_medications')\n        .insert({\n          user_id: user.id,\n          name: medicationData.name,\n          dosage: medicationData.dosage,\n          form: medicationData.form,\n          purpose: medicationData.purpose,\n          instructions: medicationData.instructions,\n          category: medicationData.category || 'general',\n          prescribed_by: medicationData.prescribedBy,\n          start_date: medicationData.startDate,\n          refill_date: medicationData.refillDate,\n          refill_remaining: medicationData.refillRemaining,\n          missed_doses: 0,\n          created_at: new Date().toISOString()\n        })\n        .select();\n        \n      if (medicationError) throw medicationError;\n      \n      // Then, insert the schedule entries\n      if (medicationData.schedule && medicationData.schedule.length > 0) {\n        const scheduleEntries = medicationData.schedule.map(schedule => ({\n          medication_id: newMedication[0].medication_id,\n          time: schedule.time,\n          status: schedule.status || 'upcoming',\n          day_reference: schedule.day || 'today'\n        }));\n        \n        const { error: scheduleError } = await supabase\n          .from('medication_schedule')\n          .insert(scheduleEntries);\n          \n        if (scheduleError) throw scheduleError;\n      }\n      \n      // Insert side effects\n      if (medicationData.sideEffects && medicationData.sideEffects.length > 0) {\n        const sideEffectsEntries = medicationData.sideEffects.map(effect => ({\n          medication_id: newMedication[0].medication_id,\n          effect_text: effect\n        }));\n        \n        const { error: sideEffectsError } = await supabase\n          .from('medication_side_effects')\n          .insert(sideEffectsEntries);\n          \n        if (sideEffectsError) throw sideEffectsError;\n      }\n      \n      // Insert interactions\n      if (medicationData.interactions && medicationData.interactions.length > 0) {\n        const interactionsEntries = medicationData.interactions.map(interaction => ({\n          medication_id: newMedication[0].medication_id,\n          conflict_with: interaction.medication,\n          severity: interaction.severity,\n          description: interaction.description\n        }));\n        \n        const { error: interactionsError } = await supabase\n          .from('medication_interactions')\n          .insert(interactionsEntries);\n          \n        if (interactionsError) throw interactionsError;\n      }\n      \n      // Refresh medications list\n      await fetchMedications();\n      \n      return { success: true, medicationId: newMedication[0].medication_id };\n    } catch (error) {\n      console.error('Error adding medication:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Update medication\n  const updateMedication = async (medicationId, medicationData) => {\n    if (!user) return { success: false, error: 'User not authenticated' };\n    \n    try {\n      // Update medication record\n      const { error: medicationError } = await supabase\n        .from('user_medications')\n        .update({\n          name: medicationData.name,\n          dosage: medicationData.dosage,\n          form: medicationData.form,\n          purpose: medicationData.purpose,\n          instructions: medicationData.instructions,\n          category: medicationData.category,\n          prescribed_by: medicationData.prescribedBy,\n          start_date: medicationData.startDate,\n          refill_date: medicationData.refillDate,\n          refill_remaining: medicationData.refillRemaining\n        })\n        .eq('medication_id', medicationId)\n        .eq('user_id', user.id);\n        \n      if (medicationError) throw medicationError;\n      \n      // Update schedule - delete old entries and insert new ones\n      if (medicationData.schedule && medicationData.schedule.length > 0) {\n        // Delete existing schedules\n        const { error: deleteScheduleError } = await supabase\n          .from('medication_schedule')\n          .delete()\n          .eq('medication_id', medicationId);\n          \n        if (deleteScheduleError) throw deleteScheduleError;\n        \n        // Insert new schedules\n        const scheduleEntries = medicationData.schedule.map(schedule => ({\n          medication_id: medicationId,\n          time: schedule.time,\n          status: schedule.status || 'upcoming',\n          day_reference: schedule.day || 'today'\n        }));\n        \n        const { error: scheduleError } = await supabase\n          .from('medication_schedule')\n          .insert(scheduleEntries);\n          \n        if (scheduleError) throw scheduleError;\n      }\n      \n      // Update side effects - delete old entries and insert new ones\n      if (medicationData.sideEffects && medicationData.sideEffects.length > 0) {\n        // Delete existing side effects\n        const { error: deleteSideEffectsError } = await supabase\n          .from('medication_side_effects')\n          .delete()\n          .eq('medication_id', medicationId);\n          \n        if (deleteSideEffectsError) throw deleteSideEffectsError;\n        \n        // Insert new side effects\n        const sideEffectsEntries = medicationData.sideEffects.map(effect => ({\n          medication_id: medicationId,\n          effect_text: effect\n        }));\n        \n        const { error: sideEffectsError } = await supabase\n          .from('medication_side_effects')\n          .insert(sideEffectsEntries);\n          \n        if (sideEffectsError) throw sideEffectsError;\n      }\n      \n      // Update interactions - delete old entries and insert new ones\n      if (medicationData.interactions && medicationData.interactions.length > 0) {\n        // Delete existing interactions\n        const { error: deleteInteractionsError } = await supabase\n          .from('medication_interactions')\n          .delete()\n          .eq('medication_id', medicationId);\n          \n        if (deleteInteractionsError) throw deleteInteractionsError;\n        \n        // Insert new interactions\n        const interactionsEntries = medicationData.interactions.map(interaction => ({\n          medication_id: medicationId,\n          conflict_with: interaction.medication,\n          severity: interaction.severity,\n          description: interaction.description\n        }));\n        \n        const { error: interactionsError } = await supabase\n          .from('medication_interactions')\n          .insert(interactionsEntries);\n          \n        if (interactionsError) throw interactionsError;\n      }\n      \n      // Refresh medications list\n      await fetchMedications();\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating medication:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Delete medication\n  const deleteMedication = async (medicationId) => {\n    if (!user) return { success: false, error: 'User not authenticated' };\n    \n    try {\n      // Delete related records first to maintain referential integrity\n      \n      // Delete schedule entries\n      const { error: scheduleError } = await supabase\n        .from('medication_schedule')\n        .delete()\n        .eq('medication_id', medicationId);\n        \n      if (scheduleError) throw scheduleError;\n      \n      // Delete side effects\n      const { error: sideEffectsError } = await supabase\n        .from('medication_side_effects')\n        .delete()\n        .eq('medication_id', medicationId);\n        \n      if (sideEffectsError) throw sideEffectsError;\n      \n      // Delete interactions\n      const { error: interactionsError } = await supabase\n        .from('medication_interactions')\n        .delete()\n        .eq('medication_id', medicationId);\n        \n      if (interactionsError) throw interactionsError;\n      \n      // Delete history logs\n      const { error: historyError } = await supabase\n        .from('medication_history_logs')\n        .delete()\n        .eq('medication_id', medicationId);\n        \n      if (historyError) throw historyError;\n      \n      // Delete the medication\n      const { error: medicationError } = await supabase\n        .from('user_medications')\n        .delete()\n        .eq('medication_id', medicationId)\n        .eq('user_id', user.id);\n        \n      if (medicationError) throw medicationError;\n      \n      // Refresh medications list\n      await fetchMedications();\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error deleting medication:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n  \n  // Log medication status (taken, missed, etc.)\n  const logMedicationStatus = async (medicationId, scheduleTime, status) => {\n    if (!user) return { success: false, error: 'User not authenticated' };\n    \n    try {\n      // Update the schedule status\n      const { error: scheduleError } = await supabase\n        .from('medication_schedule')\n        .update({ status })\n        .eq('medication_id', medicationId)\n        .eq('time', scheduleTime);\n        \n      if (scheduleError) throw scheduleError;\n      \n      // Get current time\n      const now = new Date();\n      const formattedTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      \n      // Calculate delay\n      const scheduleParts = scheduleTime.split(/[:\\s]/);\n      let scheduleHour = parseInt(scheduleParts[0]);\n      const scheduleMinute = parseInt(scheduleParts[1] || 0);\n      \n      // Adjust for AM/PM if present\n      if (scheduleTime.includes('PM') && scheduleHour < 12) {\n        scheduleHour += 12;\n      } else if (scheduleTime.includes('AM') && scheduleHour === 12) {\n        scheduleHour = 0;\n      }\n      \n      const scheduleDate = new Date();\n      scheduleDate.setHours(scheduleHour, scheduleMinute, 0, 0);\n      \n      const diffMinutes = Math.round((now - scheduleDate) / (1000 * 60));\n      \n      let delayNote;\n      if (status === 'missed') {\n        delayNote = 'missed';\n      } else if (Math.abs(diffMinutes) <= 5) {\n        delayNote = 'on time';\n      } else if (diffMinutes > 0) {\n        delayNote = `${diffMinutes} min late`;\n      } else {\n        delayNote = `${Math.abs(diffMinutes)} min early`;\n      }\n      \n      // Add to history log\n      const { error: historyError } = await supabase\n        .from('medication_history_logs')\n        .insert({\n          medication_id: medicationId,\n          log_date: now.toISOString().split('T')[0],\n          log_time: formattedTime,\n          status,\n          delay_note: delayNote\n        });\n        \n      if (historyError) throw historyError;\n      \n      // Update adherence metrics in the medication record\n      const { data: historyData, error: fetchHistoryError } = await supabase\n        .from('medication_history_logs')\n        .select('*')\n        .eq('medication_id', medicationId);\n        \n      if (fetchHistoryError) throw fetchHistoryError;\n      \n      // Calculate new adherence rate\n      const totalDoses = historyData.length;\n      const takenDoses = historyData.filter(h => h.status === 'taken').length;\n      const adherenceRate = totalDoses > 0 ? Math.round((takenDoses / totalDoses) * 100) : 100;\n      const missedDoses = totalDoses - takenDoses;\n      \n      // Update medication record\n      const { error: updateMedicationError } = await supabase\n        .from('user_medications')\n        .update({\n          adherence_rate: adherenceRate,\n          missed_doses: missedDoses\n        })\n        .eq('medication_id', medicationId);\n        \n      if (updateMedicationError) throw updateMedicationError;\n      \n      // Refresh medications list\n      await fetchMedications();\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error logging medication status:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Add biorhythm optimization data\n  const updateMedicationWithBiorhythm = async (medicationId, biorhythmData) => {\n    if (!user) return { success: false, error: 'User not authenticated' };\n    \n    try {\n      // Find the medication in local state\n      const medicationIndex = medications.findIndex(med => med.id === medicationId);\n      if (medicationIndex === -1) {\n        return { success: false, error: 'Medication not found' };\n      }\n      \n      // Update the medication in local state with biorhythm data\n      const updatedMedications = [...medications];\n      updatedMedications[medicationIndex] = {\n        ...updatedMedications[medicationIndex],\n        biorhythmData\n      };\n      \n      setMedications(updatedMedications);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating medication with biorhythm data:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Initial fetch on mount\n  useEffect(() => {\n    fetchMedications();\n  }, [user]);\n\n  return {\n    medications,\n    loading,\n    error,\n    fetchMedications,\n    addMedication,\n    updateMedication,\n    deleteMedication,\n    logMedicationStatus,\n    updateMedicationWithBiorhythm\n  };\n};\n\nexport default useMedications;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}