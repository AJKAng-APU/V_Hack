{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\n// In VideoCallScreen.jsx, replace the existing component with this improved version\n// This directly forces the UI to active state when the remote stream exists\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  const [forceDisplay, setForceDisplay] = useState(false); // NEW: Force display flag\n\n  // New state to track queued video changes\n  const [videoToggleQueue, setVideoToggleQueue] = useState(null);\n\n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const hasMedia = useRef(false); // NEW: Track if we've received media\n\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('🎥 Initializing local video');\n\n      // Ensure video is ON by default (not toggled off)\n      setIsVideoOff(false);\n\n      // Initialize local media with explicit constraints\n      const initializeLocalMedia = async () => {\n        try {\n          console.log('Requesting local media with quality constraints');\n\n          // Use proper constraints for better camera capture\n          const videoConstraints = {\n            width: {\n              ideal: 640\n            },\n            height: {\n              ideal: 480\n            },\n            frameRate: {\n              ideal: 30\n            }\n          };\n          const stream = await webRTCService.getLocalMedia(videoConstraints, true);\n          console.log('Got local stream with tracks:', stream.getTracks().map(t => `${t.kind}: ${t.enabled ? 'enabled' : 'disabled'}`).join(', '));\n\n          // Directly set the stream to video element for immediate display\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Directly set local stream to video element');\n\n            // Force play the local video\n            try {\n              await localVideoRef.current.play();\n              console.log('Local video playing');\n            } catch (error) {\n              console.error('Could not play local video:', error);\n            }\n          }\n\n          // Ensure tracks are enabled\n          stream.getTracks().forEach(track => {\n            track.enabled = true;\n            console.log(`Explicitly enabled track: ${track.kind}`);\n          });\n        } catch (error) {\n          console.error('Error initializing local media:', error);\n          displayToast(`Camera access failed: ${error.message}`);\n        }\n      };\n\n      // Call the function to initialize media\n      initializeLocalMedia();\n\n      // Set up cleanup\n      return () => {\n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          console.log('Cleaning up local video');\n          const tracks = localVideoRef.current.srcObject.getTracks();\n          tracks.forEach(track => track.stop());\n          localVideoRef.current.srcObject = null;\n        }\n      };\n    }\n  }, [isOpen, doctor]);\n  // Log when callStatus changes for debugging\n  useEffect(() => {\n    console.log(\"🔄 CALLSCREEN: Call status changed to:\", callStatus);\n  }, [callStatus]);\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    console.log('Toggle video called with videoOff:', videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('Toggling video directly through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('Queueing video toggle for when stream is available');\n      setVideoToggleQueue(videoOff);\n      setIsVideoOff(videoOff); // Update UI immediately\n    }\n  };\n\n  // CRITICAL NEW EFFECT: Check remote stream and force active state\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    console.log(\"🔍 Checking remote stream and call status...\");\n\n    // Define a function to check for remote media\n    const checkForRemoteMedia = () => {\n      if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        console.log(\"🎥 Remote video has tracks:\", tracks.length);\n        if (tracks.length > 0 && callStatus !== 'active') {\n          console.log(\"🚨 FORCE ACTIVATING CALL - Media detected but UI shows:\", callStatus);\n          setCallStatus('active');\n          hasMedia.current = true;\n          setForceDisplay(true);\n\n          // Start call timer if not already started\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n          return true;\n        }\n      }\n      return false;\n    };\n\n    // Immediate check\n    const hasMedia = checkForRemoteMedia();\n    if (!hasMedia) {\n      // Set up a polling interval to keep checking\n      const intervalCheck = setInterval(() => {\n        const found = checkForRemoteMedia();\n        if (found) {\n          clearInterval(intervalCheck);\n        }\n      }, 500);\n\n      // Also set a timeout to force active state after 5 seconds if we have a connection\n      const forceActiveTimeout = setTimeout(() => {\n        if (callStatus === 'connecting' && webRTCService && webRTCService.isCallActive()) {\n          console.log(\"⏱️ TIMEOUT FORCE: Connection active but UI still connecting after 5s\");\n          setCallStatus('active');\n          setForceDisplay(true);\n        }\n      }, 5000);\n      return () => {\n        clearInterval(intervalCheck);\n        clearTimeout(forceActiveTimeout);\n      };\n    }\n  }, [isOpen, doctor, callStatus, remoteVideoRef.current]);\n\n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('VideoCallScreen opened for doctor:', doctor.name);\n\n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: stream => {\n          console.log('Got local stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Local video stream set to element');\n          } else {\n            console.warn('localVideoRef is not available to set stream');\n          }\n\n          // Apply any queued video toggle\n          if (videoToggleQueue !== null) {\n            webRTCService.toggleVideo(videoToggleQueue);\n            setVideoToggleQueue(null);\n          }\n        },\n        onRemoteStream: stream => {\n          console.log('Got remote stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            console.log('Remote video stream set to element');\n\n            // Ensure volume is correct based on speaker state\n            remoteVideoRef.current.muted = isSpeakerOff;\n\n            // IMPORTANT: Force call to active state when we have remote media\n            if (stream.getTracks().length > 0) {\n              console.log('🔴 Remote media detected, forcing call to active state');\n              hasMedia.current = true;\n              setCallStatus('active');\n              setForceDisplay(true);\n\n              // Start call timer\n              if (callDurationTimer.current) {\n                clearInterval(callDurationTimer.current);\n              }\n              callDurationTimer.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n              }, 1000);\n            }\n          } else {\n            console.warn('remoteVideoRef is not available to set stream');\n          }\n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        onCallStarted: () => {\n          console.log('Call is now active');\n          setCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n\n          // Store peer connection reference for stats\n          if (webRTCService.connectionManager && webRTCService.connectionManager.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        },\n        onCallEnded: () => {\n          console.log('Call has ended');\n          setCallStatus('ended');\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        onCallConnecting: () => {\n          console.log('Call is connecting...');\n          setCallStatus('connecting');\n        },\n        onUserNotOnline: userId => {\n          console.log('User not online:', userId);\n          setErrorMessage('Doctor is not available right now');\n          setCallStatus('ended');\n          setTimeout(() => {\n            onClose();\n          }, 3000);\n        },\n        onICEConnectionStateChange: state => {\n          console.log('Connection state changed:', state);\n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n            // FORCE ACTIVATE when ICE is connected\n            setTimeout(() => {\n              setCallStatus('active');\n              setForceDisplay(true);\n            }, 500);\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n\n            // Attempt reconnection after ice connection failure\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              try {\n                webRTCService.attemptReconnection(true);\n              } catch (error) {\n                console.error('Failed to attempt reconnection:', error);\n              }\n            }\n          }\n        }\n      };\n\n      // Subscribe to call state changes\n      const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n        console.log('Call state changed to:', state);\n        setCallStatus(state);\n        if (state === 'active') {\n          setForceDisplay(true);\n        }\n      });\n\n      // Subscribe to errors\n      const unsubscribeError = webRTCService.on('error', error => {\n        console.log('WebRTC error received:', error);\n        setErrorMessage(error.message || 'Something went wrong with the call');\n        if (error.fatal) {\n          setCallStatus('ended');\n        }\n      });\n      webRTCService.updateCallbacks(callbacks);\n\n      // Try to get local media access early if it hasn't been obtained yet\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('Requesting camera and microphone access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('Failed to get media access:', error);\n          setErrorMessage(`Camera/microphone access failed: ${error.message}`);\n        });\n      }\n      return () => {\n        console.log('Cleaning up video call resources');\n        unsubscribeCallState();\n        unsubscribeError();\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, videoToggleQueue]);\n\n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      // Monitor network stats instead of just audio levels\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            if (statsCount > 0) {\n              // Calculate connection quality based on multiple factors\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        return () => clearInterval(statsInterval);\n      };\n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n\n  // Monitor remote stream for audio level changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const cleanup = monitorAudioLevel(remoteVideoRef.current.srcObject);\n      if (cleanup) setAudioMonitorCleanup(cleanup);\n    }\n  }, [(_remoteVideoRef$curre = remoteVideoRef.current) === null || _remoteVideoRef$curre === void 0 ? void 0 : _remoteVideoRef$curre.srcObject]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = stream => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            // Only downgrade to poor if not already poor from network stats\n            setConnectionQuality(prevQuality => prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n          // Don't automatically set to good here, defer to the stats-based quality\n        }\n      };\n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n\n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('User clicked end call button');\n    webRTCService.endCall(true);\n  };\n\n  // CRITICAL: Regularly check if there's a remote stream and force active state\n  useEffect(() => {\n    if (!isOpen) return;\n    const forceCheckInterval = setInterval(() => {\n      var _remoteVideoRef$curre2, _remoteVideoRef$curre3;\n      // First check if we have remote media directly\n      const hasRemoteTracks = ((_remoteVideoRef$curre2 = remoteVideoRef.current) === null || _remoteVideoRef$curre2 === void 0 ? void 0 : (_remoteVideoRef$curre3 = _remoteVideoRef$curre2.srcObject) === null || _remoteVideoRef$curre3 === void 0 ? void 0 : _remoteVideoRef$curre3.getTracks().length) > 0;\n\n      // Then check if WebRTC service thinks we're in a call\n      const serviceIsActive = webRTCService === null || webRTCService === void 0 ? void 0 : webRTCService.isCallActive();\n      console.log(`Force check - Remote tracks: ${hasRemoteTracks}, Service active: ${serviceIsActive}, UI state: ${callStatus}`);\n      if ((hasRemoteTracks || serviceIsActive) && callStatus !== 'active') {\n        console.log('⚡ FORCE CHECK: WebRTC active but UI not showing active state');\n        setCallStatus('active');\n        setForceDisplay(true);\n      }\n    }, 1000);\n    return () => clearInterval(forceCheckInterval);\n  }, [isOpen, callStatus]);\n  if (!isOpen) return null;\n\n  // CRITICAL: Modified rendering logic - prioritize showing VideoDisplay when we have media\n  const shouldShowVideo = callStatus === 'active' || hasMedia.current || forceDisplay || remoteVideoRef.current && remoteVideoRef.current.srcObject && remoteVideoRef.current.srcObject.getTracks().length > 0;\n  console.log(`Rendering decision - callStatus: ${callStatus}, hasMedia: ${hasMedia.current}, forceDisplay: ${forceDisplay}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [shouldShowVideo ?\n      /*#__PURE__*/\n      // Always show video display when we have media, regardless of call status\n      _jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 11\n      }, this) : callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 608,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"tVd9bVafWmoZKjTUBn4QVQa7vOc=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","VideoDisplay","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","audioMonitorCleanup","setAudioMonitorCleanup","forceDisplay","setForceDisplay","videoToggleQueue","setVideoToggleQueue","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","peerConnectionRef","hasMedia","console","log","initializeLocalMedia","videoConstraints","width","ideal","height","frameRate","stream","getLocalMedia","getTracks","map","t","kind","enabled","join","current","srcObject","play","error","forEach","track","displayToast","message","tracks","stop","toggleVideo","videoOff","mediaManager","hasLocalStream","checkForRemoteMedia","length","clearInterval","setInterval","prev","intervalCheck","found","forceActiveTimeout","setTimeout","isCallActive","clearTimeout","name","callbacks","onLocalStream","warn","onRemoteStream","muted","cleanup","monitorAudioLevel","onCallStarted","connectionManager","peerConnection","onCallEnded","onCallConnecting","onUserNotOnline","userId","onICEConnectionStateChange","state","attemptReconnection","unsubscribeCallState","on","unsubscribeError","fatal","updateCallbacks","catch","endCall","monitorConnectionQuality","statsInterval","stats","getStats","packetLoss","jitter","roundTripTime","statsCount","report","type","packetsLost","packetsReceived","window","AudioContext","webkitAudioContext","audioContext","analyser","createAnalyser","microphone","createMediaStreamSource","javascriptNode","createScriptProcessor","connect","destination","lowAudioCounter","LOW_AUDIO_THRESHOLD","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","values","reduce","a","b","prevQuality","disconnect","close","toggleAudio","handleKeyDown","e","key","handleEndCall","addEventListener","removeEventListener","timer","handleMouseMove","now","Date","formatTime","seconds","mins","Math","floor","secs","toString","padStart","forceCheckInterval","_remoteVideoRef$curre2","_remoteVideoRef$curre3","hasRemoteTracks","serviceIsActive","shouldShowVideo","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","jsx","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["// In VideoCallScreen.jsx, replace the existing component with this improved version\n// This directly forces the UI to active state when the remote stream exists\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  const [forceDisplay, setForceDisplay] = useState(false); // NEW: Force display flag\n  \n  // New state to track queued video changes\n  const [videoToggleQueue, setVideoToggleQueue] = useState(null);\n  \n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const hasMedia = useRef(false); // NEW: Track if we've received media\n  \n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('🎥 Initializing local video');\n      \n      // Ensure video is ON by default (not toggled off)\n      setIsVideoOff(false);\n      \n      // Initialize local media with explicit constraints\n      const initializeLocalMedia = async () => {\n        try {\n          console.log('Requesting local media with quality constraints');\n          \n          // Use proper constraints for better camera capture\n          const videoConstraints = {\n            width: { ideal: 640 },\n            height: { ideal: 480 },\n            frameRate: { ideal: 30 }\n          };\n          \n          const stream = await webRTCService.getLocalMedia(videoConstraints, true);\n          \n          console.log('Got local stream with tracks:', \n            stream.getTracks().map(t => `${t.kind}: ${t.enabled ? 'enabled' : 'disabled'}`).join(', '));\n          \n          // Directly set the stream to video element for immediate display\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Directly set local stream to video element');\n            \n            // Force play the local video\n            try {\n              await localVideoRef.current.play();\n              console.log('Local video playing');\n            } catch (error) {\n              console.error('Could not play local video:', error);\n            }\n          }\n          \n          // Ensure tracks are enabled\n          stream.getTracks().forEach(track => {\n            track.enabled = true;\n            console.log(`Explicitly enabled track: ${track.kind}`);\n          });\n        } catch (error) {\n          console.error('Error initializing local media:', error);\n          displayToast(`Camera access failed: ${error.message}`);\n        }\n      };\n      \n      // Call the function to initialize media\n      initializeLocalMedia();\n      \n      // Set up cleanup\n      return () => {\n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          console.log('Cleaning up local video');\n          const tracks = localVideoRef.current.srcObject.getTracks();\n          tracks.forEach(track => track.stop());\n          localVideoRef.current.srcObject = null;\n        }\n      };\n    }\n  }, [isOpen, doctor]);\n  // Log when callStatus changes for debugging\n  useEffect(() => {\n    console.log(\"🔄 CALLSCREEN: Call status changed to:\", callStatus);\n  }, [callStatus]);\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    console.log('Toggle video called with videoOff:', videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('Toggling video directly through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('Queueing video toggle for when stream is available');\n      setVideoToggleQueue(videoOff);\n      setIsVideoOff(videoOff); // Update UI immediately\n    }\n  };\n  \n  // CRITICAL NEW EFFECT: Check remote stream and force active state\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    console.log(\"🔍 Checking remote stream and call status...\");\n    \n    // Define a function to check for remote media\n    const checkForRemoteMedia = () => {\n      if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        console.log(\"🎥 Remote video has tracks:\", tracks.length);\n        \n        if (tracks.length > 0 && callStatus !== 'active') {\n          console.log(\"🚨 FORCE ACTIVATING CALL - Media detected but UI shows:\", callStatus);\n          setCallStatus('active');\n          hasMedia.current = true;\n          setForceDisplay(true);\n          \n          // Start call timer if not already started\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n          \n          return true;\n        }\n      }\n      return false;\n    };\n    \n    // Immediate check\n    const hasMedia = checkForRemoteMedia();\n    \n    if (!hasMedia) {\n      // Set up a polling interval to keep checking\n      const intervalCheck = setInterval(() => {\n        const found = checkForRemoteMedia();\n        if (found) {\n          clearInterval(intervalCheck);\n        }\n      }, 500);\n      \n      // Also set a timeout to force active state after 5 seconds if we have a connection\n      const forceActiveTimeout = setTimeout(() => {\n        if (callStatus === 'connecting' && webRTCService && webRTCService.isCallActive()) {\n          console.log(\"⏱️ TIMEOUT FORCE: Connection active but UI still connecting after 5s\");\n          setCallStatus('active');\n          setForceDisplay(true);\n        }\n      }, 5000);\n      \n      return () => {\n        clearInterval(intervalCheck);\n        clearTimeout(forceActiveTimeout);\n      };\n    }\n  }, [isOpen, doctor, callStatus, remoteVideoRef.current]);\n  \n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('VideoCallScreen opened for doctor:', doctor.name);\n      \n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: (stream) => {\n          console.log('Got local stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Local video stream set to element');\n          } else {\n            console.warn('localVideoRef is not available to set stream');\n          }\n          \n          // Apply any queued video toggle\n          if (videoToggleQueue !== null) {\n            webRTCService.toggleVideo(videoToggleQueue);\n            setVideoToggleQueue(null);\n          }\n        },\n        \n        onRemoteStream: (stream) => {\n          console.log('Got remote stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            console.log('Remote video stream set to element');\n            \n            // Ensure volume is correct based on speaker state\n            remoteVideoRef.current.muted = isSpeakerOff;\n            \n            // IMPORTANT: Force call to active state when we have remote media\n            if (stream.getTracks().length > 0) {\n              console.log('🔴 Remote media detected, forcing call to active state');\n              hasMedia.current = true;\n              setCallStatus('active');\n              setForceDisplay(true);\n              \n              // Start call timer\n              if (callDurationTimer.current) {\n                clearInterval(callDurationTimer.current);\n              }\n              \n              callDurationTimer.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n              }, 1000);\n            }\n          } else {\n            console.warn('remoteVideoRef is not available to set stream');\n          }\n          \n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        \n        onCallStarted: () => {\n          console.log('Call is now active');\n          setCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n          \n          // Store peer connection reference for stats\n          if (webRTCService.connectionManager && webRTCService.connectionManager.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        },\n        \n        onCallEnded: () => {\n          console.log('Call has ended');\n          setCallStatus('ended');\n          \n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        \n        onCallConnecting: () => {\n          console.log('Call is connecting...');\n          setCallStatus('connecting');\n        },\n        \n        onUserNotOnline: (userId) => {\n          console.log('User not online:', userId);\n          setErrorMessage('Doctor is not available right now');\n          setCallStatus('ended');\n          \n          setTimeout(() => {\n            onClose();\n          }, 3000);\n        },\n        \n        onICEConnectionStateChange: (state) => {\n          console.log('Connection state changed:', state);\n          \n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n            // FORCE ACTIVATE when ICE is connected\n            setTimeout(() => {\n              setCallStatus('active');\n              setForceDisplay(true);\n            }, 500);\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n            \n            // Attempt reconnection after ice connection failure\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              try {\n                webRTCService.attemptReconnection(true);\n              } catch (error) {\n                console.error('Failed to attempt reconnection:', error);\n              }\n            }\n          }\n        }\n      };\n      \n      // Subscribe to call state changes\n      const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n        console.log('Call state changed to:', state);\n        setCallStatus(state);\n        \n        if (state === 'active') {\n          setForceDisplay(true);\n        }\n      });\n      \n      // Subscribe to errors\n      const unsubscribeError = webRTCService.on('error', (error) => {\n        console.log('WebRTC error received:', error);\n        setErrorMessage(error.message || 'Something went wrong with the call');\n        \n        if (error.fatal) {\n          setCallStatus('ended');\n        }\n      });\n      \n      webRTCService.updateCallbacks(callbacks);\n      \n      // Try to get local media access early if it hasn't been obtained yet\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('Requesting camera and microphone access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('Failed to get media access:', error);\n          setErrorMessage(`Camera/microphone access failed: ${error.message}`);\n        });\n      }\n      \n      return () => {\n        console.log('Cleaning up video call resources');\n        \n        unsubscribeCallState();\n        unsubscribeError();\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        \n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        \n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        \n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, videoToggleQueue]);\n  \n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      // Monitor network stats instead of just audio levels\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            \n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            \n            if (statsCount > 0) {\n              // Calculate connection quality based on multiple factors\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        \n        return () => clearInterval(statsInterval);\n      };\n      \n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n  \n  // Monitor remote stream for audio level changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const cleanup = monitorAudioLevel(remoteVideoRef.current.srcObject);\n      if (cleanup) setAudioMonitorCleanup(cleanup);\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = (stream) => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    \n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      \n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      \n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      \n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        \n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            // Only downgrade to poor if not already poor from network stats\n            setConnectionQuality(prevQuality => \n              prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n          // Don't automatically set to good here, defer to the stats-based quality\n        }\n      };\n      \n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n  \n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    \n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('User clicked end call button');\n    webRTCService.endCall(true);\n  };\n  \n  // CRITICAL: Regularly check if there's a remote stream and force active state\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    const forceCheckInterval = setInterval(() => {\n      // First check if we have remote media directly\n      const hasRemoteTracks = remoteVideoRef.current?.srcObject?.getTracks().length > 0;\n      \n      // Then check if WebRTC service thinks we're in a call\n      const serviceIsActive = webRTCService?.isCallActive();\n      \n      console.log(`Force check - Remote tracks: ${hasRemoteTracks}, Service active: ${serviceIsActive}, UI state: ${callStatus}`);\n      \n      if ((hasRemoteTracks || serviceIsActive) && callStatus !== 'active') {\n        console.log('⚡ FORCE CHECK: WebRTC active but UI not showing active state');\n        setCallStatus('active');\n        setForceDisplay(true);\n      }\n    }, 1000);\n    \n    return () => clearInterval(forceCheckInterval);\n  }, [isOpen, callStatus]);\n  \n  if (!isOpen) return null;\n  \n  // CRITICAL: Modified rendering logic - prioritize showing VideoDisplay when we have media\n  const shouldShowVideo = callStatus === 'active' || hasMedia.current || forceDisplay || \n    (remoteVideoRef.current && remoteVideoRef.current.srcObject && \n     remoteVideoRef.current.srcObject.getTracks().length > 0);\n  \n  console.log(`Rendering decision - callStatus: ${callStatus}, hasMedia: ${hasMedia.current}, forceDisplay: ${forceDisplay}`);\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        \n        {shouldShowVideo ? (\n          // Always show video display when we have media, regardless of call status\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n          >\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls}\n            />\n          </VideoDisplay>\n        ) : callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : (\n          <ConnectingState doctor={doctor} colors={colors} />\n        )}\n        \n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n      </div>\n      \n      <style jsx>{`\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":";;AAAA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,aAAa,MAAM,8BAA8B;AACxD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC,MAAM;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,qBAAA;EAC/D,MAAM;IAAEC;EAAW,CAAC,GAAGjB,QAAQ,CAAC,CAAC;;EAEjC;EACA,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC+B,YAAY,EAAEC,eAAe,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACiC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EACpE,MAAM,CAACmC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACuC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACyC,YAAY,EAAEC,eAAe,CAAC,GAAG1C,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEzD;EACA,MAAM,CAAC2C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG5C,QAAQ,CAAC,IAAI,CAAC;;EAE9D;EACA,MAAM6C,aAAa,GAAG3C,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM4C,cAAc,GAAG5C,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM6C,eAAe,GAAG7C,MAAM,CAAC,CAAC,CAAC;EACjC,MAAM8C,iBAAiB,GAAG9C,MAAM,CAAC,IAAI,CAAC;EACtC,MAAM+C,iBAAiB,GAAG/C,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMgD,QAAQ,GAAGhD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEhCD,SAAS,CAAC,MAAM;IACd,IAAIa,MAAM,IAAIG,MAAM,EAAE;MACpBkC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;MAE1C;MACA1B,aAAa,CAAC,KAAK,CAAC;;MAEpB;MACA,MAAM2B,oBAAoB,GAAG,MAAAA,CAAA,KAAY;QACvC,IAAI;UACFF,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;UAE9D;UACA,MAAME,gBAAgB,GAAG;YACvBC,KAAK,EAAE;cAAEC,KAAK,EAAE;YAAI,CAAC;YACrBC,MAAM,EAAE;cAAED,KAAK,EAAE;YAAI,CAAC;YACtBE,SAAS,EAAE;cAAEF,KAAK,EAAE;YAAG;UACzB,CAAC;UAED,MAAMG,MAAM,GAAG,MAAMvD,aAAa,CAACwD,aAAa,CAACN,gBAAgB,EAAE,IAAI,CAAC;UAExEH,OAAO,CAACC,GAAG,CAAC,+BAA+B,EACzCO,MAAM,CAACE,SAAS,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAI,GAAGA,CAAC,CAACC,IAAI,KAAKD,CAAC,CAACE,OAAO,GAAG,SAAS,GAAG,UAAU,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;;UAE7F;UACA,IAAIrB,aAAa,CAACsB,OAAO,EAAE;YACzBtB,aAAa,CAACsB,OAAO,CAACC,SAAS,GAAGT,MAAM;YACxCR,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;;YAEzD;YACA,IAAI;cACF,MAAMP,aAAa,CAACsB,OAAO,CAACE,IAAI,CAAC,CAAC;cAClClB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;YACpC,CAAC,CAAC,OAAOkB,KAAK,EAAE;cACdnB,OAAO,CAACmB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;YACrD;UACF;;UAEA;UACAX,MAAM,CAACE,SAAS,CAAC,CAAC,CAACU,OAAO,CAACC,KAAK,IAAI;YAClCA,KAAK,CAACP,OAAO,GAAG,IAAI;YACpBd,OAAO,CAACC,GAAG,CAAC,6BAA6BoB,KAAK,CAACR,IAAI,EAAE,CAAC;UACxD,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;UACdnB,OAAO,CAACmB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;UACvDG,YAAY,CAAC,yBAAyBH,KAAK,CAACI,OAAO,EAAE,CAAC;QACxD;MACF,CAAC;;MAED;MACArB,oBAAoB,CAAC,CAAC;;MAEtB;MACA,OAAO,MAAM;QACX,IAAIR,aAAa,CAACsB,OAAO,IAAItB,aAAa,CAACsB,OAAO,CAACC,SAAS,EAAE;UAC5DjB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;UACtC,MAAMuB,MAAM,GAAG9B,aAAa,CAACsB,OAAO,CAACC,SAAS,CAACP,SAAS,CAAC,CAAC;UAC1Dc,MAAM,CAACJ,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACI,IAAI,CAAC,CAAC,CAAC;UACrC/B,aAAa,CAACsB,OAAO,CAACC,SAAS,GAAG,IAAI;QACxC;MACF,CAAC;IACH;EACF,CAAC,EAAE,CAACtD,MAAM,EAAEG,MAAM,CAAC,CAAC;EACpB;EACAhB,SAAS,CAAC,MAAM;IACdkD,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE/B,UAAU,CAAC;EACnE,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMwD,WAAW,GAAIC,QAAQ,IAAK;IAChC3B,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE0B,QAAQ,CAAC;IAE3D,IAAI1E,aAAa,IAAIA,aAAa,CAAC2E,YAAY,CAACC,cAAc,CAAC,CAAC,EAAE;MAChE7B,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;MAC5DhD,aAAa,CAACyE,WAAW,CAACC,QAAQ,CAAC;MACnCpD,aAAa,CAACoD,QAAQ,CAAC;IACzB,CAAC,MAAM;MACL3B,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjER,mBAAmB,CAACkC,QAAQ,CAAC;MAC7BpD,aAAa,CAACoD,QAAQ,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC;;EAED;EACA7E,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,MAAM,IAAI,CAACG,MAAM,EAAE;IAExBkC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;;IAE3D;IACA,MAAM6B,mBAAmB,GAAGA,CAAA,KAAM;MAChC,IAAInC,cAAc,CAACqB,OAAO,IAAIrB,cAAc,CAACqB,OAAO,CAACC,SAAS,EAAE;QAC9D,MAAMO,MAAM,GAAG7B,cAAc,CAACqB,OAAO,CAACC,SAAS,CAACP,SAAS,CAAC,CAAC;QAC3DV,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEuB,MAAM,CAACO,MAAM,CAAC;QAEzD,IAAIP,MAAM,CAACO,MAAM,GAAG,CAAC,IAAI7D,UAAU,KAAK,QAAQ,EAAE;UAChD8B,OAAO,CAACC,GAAG,CAAC,yDAAyD,EAAE/B,UAAU,CAAC;UAClFC,aAAa,CAAC,QAAQ,CAAC;UACvB4B,QAAQ,CAACiB,OAAO,GAAG,IAAI;UACvBzB,eAAe,CAAC,IAAI,CAAC;;UAErB;UACA,IAAIM,iBAAiB,CAACmB,OAAO,EAAE;YAC7BgB,aAAa,CAACnC,iBAAiB,CAACmB,OAAO,CAAC;UAC1C;UAEAnB,iBAAiB,CAACmB,OAAO,GAAGiB,WAAW,CAAC,MAAM;YAC5CtD,eAAe,CAACuD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;UACnC,CAAC,EAAE,IAAI,CAAC;UAER,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd,CAAC;;IAED;IACA,MAAMnC,QAAQ,GAAG+B,mBAAmB,CAAC,CAAC;IAEtC,IAAI,CAAC/B,QAAQ,EAAE;MACb;MACA,MAAMoC,aAAa,GAAGF,WAAW,CAAC,MAAM;QACtC,MAAMG,KAAK,GAAGN,mBAAmB,CAAC,CAAC;QACnC,IAAIM,KAAK,EAAE;UACTJ,aAAa,CAACG,aAAa,CAAC;QAC9B;MACF,CAAC,EAAE,GAAG,CAAC;;MAEP;MACA,MAAME,kBAAkB,GAAGC,UAAU,CAAC,MAAM;QAC1C,IAAIpE,UAAU,KAAK,YAAY,IAAIjB,aAAa,IAAIA,aAAa,CAACsF,YAAY,CAAC,CAAC,EAAE;UAChFvC,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC;UACnF9B,aAAa,CAAC,QAAQ,CAAC;UACvBoB,eAAe,CAAC,IAAI,CAAC;QACvB;MACF,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAM;QACXyC,aAAa,CAACG,aAAa,CAAC;QAC5BK,YAAY,CAACH,kBAAkB,CAAC;MAClC,CAAC;IACH;EACF,CAAC,EAAE,CAAC1E,MAAM,EAAEG,MAAM,EAAEI,UAAU,EAAEyB,cAAc,CAACqB,OAAO,CAAC,CAAC;;EAExD;EACAlE,SAAS,CAAC,MAAM;IACd,IAAIa,MAAM,IAAIG,MAAM,EAAE;MACpBkC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEnC,MAAM,CAAC2E,IAAI,CAAC;;MAE9D;MACA,MAAMC,SAAS,GAAG;QAChBC,aAAa,EAAGnC,MAAM,IAAK;UACzBR,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEO,MAAM,CAACE,SAAS,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;UAC3F,IAAIrB,aAAa,CAACsB,OAAO,EAAE;YACzBtB,aAAa,CAACsB,OAAO,CAACC,SAAS,GAAGT,MAAM;YACxCR,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAClD,CAAC,MAAM;YACLD,OAAO,CAAC4C,IAAI,CAAC,8CAA8C,CAAC;UAC9D;;UAEA;UACA,IAAIpD,gBAAgB,KAAK,IAAI,EAAE;YAC7BvC,aAAa,CAACyE,WAAW,CAAClC,gBAAgB,CAAC;YAC3CC,mBAAmB,CAAC,IAAI,CAAC;UAC3B;QACF,CAAC;QAEDoD,cAAc,EAAGrC,MAAM,IAAK;UAC1BR,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEO,MAAM,CAACE,SAAS,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC,CAAC;UAC5F,IAAIpB,cAAc,CAACqB,OAAO,EAAE;YAC1BrB,cAAc,CAACqB,OAAO,CAACC,SAAS,GAAGT,MAAM;YACzCR,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;;YAEjD;YACAN,cAAc,CAACqB,OAAO,CAAC8B,KAAK,GAAGtE,YAAY;;YAE3C;YACA,IAAIgC,MAAM,CAACE,SAAS,CAAC,CAAC,CAACqB,MAAM,GAAG,CAAC,EAAE;cACjC/B,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;cACrEF,QAAQ,CAACiB,OAAO,GAAG,IAAI;cACvB7C,aAAa,CAAC,QAAQ,CAAC;cACvBoB,eAAe,CAAC,IAAI,CAAC;;cAErB;cACA,IAAIM,iBAAiB,CAACmB,OAAO,EAAE;gBAC7BgB,aAAa,CAACnC,iBAAiB,CAACmB,OAAO,CAAC;cAC1C;cAEAnB,iBAAiB,CAACmB,OAAO,GAAGiB,WAAW,CAAC,MAAM;gBAC5CtD,eAAe,CAACuD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;cACnC,CAAC,EAAE,IAAI,CAAC;YACV;UACF,CAAC,MAAM;YACLlC,OAAO,CAAC4C,IAAI,CAAC,+CAA+C,CAAC;UAC/D;UAEA,MAAMG,OAAO,GAAGC,iBAAiB,CAACxC,MAAM,CAAC;UACzC,IAAIuC,OAAO,EAAE1D,sBAAsB,CAAC0D,OAAO,CAAC;QAC9C,CAAC;QAEDE,aAAa,EAAEA,CAAA,KAAM;UACnBjD,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;UACjC9B,aAAa,CAAC,QAAQ,CAAC;UACvBc,mBAAmB,CAAC,CAAC,CAAC;UACtBE,eAAe,CAAC,EAAE,CAAC;;UAEnB;UACA,IAAIlC,aAAa,CAACiG,iBAAiB,IAAIjG,aAAa,CAACiG,iBAAiB,CAACC,cAAc,EAAE;YACrFrD,iBAAiB,CAACkB,OAAO,GAAG/D,aAAa,CAACiG,iBAAiB,CAACC,cAAc;UAC5E;;UAEA;UACA,IAAItD,iBAAiB,CAACmB,OAAO,EAAE;YAC7BgB,aAAa,CAACnC,iBAAiB,CAACmB,OAAO,CAAC;UAC1C;UAEAnB,iBAAiB,CAACmB,OAAO,GAAGiB,WAAW,CAAC,MAAM;YAC5CtD,eAAe,CAACuD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;UACnC,CAAC,EAAE,IAAI,CAAC;QACV,CAAC;QAEDkB,WAAW,EAAEA,CAAA,KAAM;UACjBpD,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;UAC7B9B,aAAa,CAAC,OAAO,CAAC;UAEtB,IAAI0B,iBAAiB,CAACmB,OAAO,EAAE;YAC7BgB,aAAa,CAACnC,iBAAiB,CAACmB,OAAO,CAAC;UAC1C;UAEAsB,UAAU,CAAC,MAAM;YACf1E,OAAO,CAAC,CAAC;UACX,CAAC,EAAE,IAAI,CAAC;QACV,CAAC;QAEDyF,gBAAgB,EAAEA,CAAA,KAAM;UACtBrD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;UACpC9B,aAAa,CAAC,YAAY,CAAC;QAC7B,CAAC;QAEDmF,eAAe,EAAGC,MAAM,IAAK;UAC3BvD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEsD,MAAM,CAAC;UACvCpE,eAAe,CAAC,mCAAmC,CAAC;UACpDhB,aAAa,CAAC,OAAO,CAAC;UAEtBmE,UAAU,CAAC,MAAM;YACf1E,OAAO,CAAC,CAAC;UACX,CAAC,EAAE,IAAI,CAAC;QACV,CAAC;QAED4F,0BAA0B,EAAGC,KAAK,IAAK;UACrCzD,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEwD,KAAK,CAAC;UAE/C,IAAIA,KAAK,KAAK,UAAU,EAAE;YACxB1E,oBAAoB,CAAC,UAAU,CAAC;UAClC,CAAC,MAAM,IAAI0E,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,WAAW,EAAE;YACzD1E,oBAAoB,CAAC,MAAM,CAAC;YAC5B;YACAuD,UAAU,CAAC,MAAM;cACfnE,aAAa,CAAC,QAAQ,CAAC;cACvBoB,eAAe,CAAC,IAAI,CAAC;YACvB,CAAC,EAAE,GAAG,CAAC;UACT,CAAC,MAAM,IAAIkE,KAAK,KAAK,cAAc,EAAE;YACnC1E,oBAAoB,CAAC,MAAM,CAAC;YAC5BE,mBAAmB,CAACiD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;UACvC,CAAC,MAAM,IAAIuB,KAAK,KAAK,QAAQ,EAAE;YAC7B1E,oBAAoB,CAAC,UAAU,CAAC;YAChCE,mBAAmB,CAACiD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;;YAErC;YACA,IAAIjF,aAAa,IAAI,OAAOA,aAAa,CAACyG,mBAAmB,KAAK,UAAU,EAAE;cAC5E,IAAI;gBACFzG,aAAa,CAACyG,mBAAmB,CAAC,IAAI,CAAC;cACzC,CAAC,CAAC,OAAOvC,KAAK,EAAE;gBACdnB,OAAO,CAACmB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;cACzD;YACF;UACF;QACF;MACF,CAAC;;MAED;MACA,MAAMwC,oBAAoB,GAAG1G,aAAa,CAAC2G,EAAE,CAAC,kBAAkB,EAAGH,KAAK,IAAK;QAC3EzD,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEwD,KAAK,CAAC;QAC5CtF,aAAa,CAACsF,KAAK,CAAC;QAEpB,IAAIA,KAAK,KAAK,QAAQ,EAAE;UACtBlE,eAAe,CAAC,IAAI,CAAC;QACvB;MACF,CAAC,CAAC;;MAEF;MACA,MAAMsE,gBAAgB,GAAG5G,aAAa,CAAC2G,EAAE,CAAC,OAAO,EAAGzC,KAAK,IAAK;QAC5DnB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEkB,KAAK,CAAC;QAC5ChC,eAAe,CAACgC,KAAK,CAACI,OAAO,IAAI,oCAAoC,CAAC;QAEtE,IAAIJ,KAAK,CAAC2C,KAAK,EAAE;UACf3F,aAAa,CAAC,OAAO,CAAC;QACxB;MACF,CAAC,CAAC;MAEFlB,aAAa,CAAC8G,eAAe,CAACrB,SAAS,CAAC;;MAExC;MACA,IAAI,CAACzF,aAAa,CAAC2E,YAAY,CAACC,cAAc,CAAC,CAAC,EAAE;QAChD7B,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QACtDhD,aAAa,CAACwD,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAACuD,KAAK,CAAC7C,KAAK,IAAI;UACrDnB,OAAO,CAACmB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnDhC,eAAe,CAAC,oCAAoCgC,KAAK,CAACI,OAAO,EAAE,CAAC;QACtE,CAAC,CAAC;MACJ;MAEA,OAAO,MAAM;QACXvB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAE/C0D,oBAAoB,CAAC,CAAC;QACtBE,gBAAgB,CAAC,CAAC;QAElB,IAAIhE,iBAAiB,CAACmB,OAAO,EAAE;UAC7BgB,aAAa,CAACnC,iBAAiB,CAACmB,OAAO,CAAC;UACxCnB,iBAAiB,CAACmB,OAAO,GAAG,IAAI;QAClC;QAEA,IAAI5B,mBAAmB,EAAE;UACvBA,mBAAmB,CAAC,CAAC;QACvB;QAEA,IAAIM,aAAa,CAACsB,OAAO,IAAItB,aAAa,CAACsB,OAAO,CAACC,SAAS,EAAE;UAC5D,MAAMT,MAAM,GAAGd,aAAa,CAACsB,OAAO,CAACC,SAAS;UAC9CT,MAAM,CAACE,SAAS,CAAC,CAAC,CAACU,OAAO,CAACC,KAAK,IAAI;YAClCA,KAAK,CAACI,IAAI,CAAC,CAAC;UACd,CAAC,CAAC;UACF/B,aAAa,CAACsB,OAAO,CAACC,SAAS,GAAG,IAAI;QACxC;QAEA,IAAItB,cAAc,CAACqB,OAAO,IAAIrB,cAAc,CAACqB,OAAO,CAACC,SAAS,EAAE;UAC9DtB,cAAc,CAACqB,OAAO,CAACC,SAAS,GAAG,IAAI;QACzC;QAEAhE,aAAa,CAACgH,OAAO,CAAC,IAAI,CAAC;MAC7B,CAAC;IACH;EACF,CAAC,EAAE,CAACtG,MAAM,EAAEG,MAAM,EAAEF,OAAO,EAAE4B,gBAAgB,CAAC,CAAC;;EAE/C;EACA1C,SAAS,CAAC,MAAM;IACd,IAAIgD,iBAAiB,CAACkB,OAAO,IAAI9C,UAAU,KAAK,QAAQ,EAAE;MACxD;MACA,MAAMgG,wBAAwB,GAAGA,CAAA,KAAM;QACrC,MAAMC,aAAa,GAAGlC,WAAW,CAAC,YAAY;UAC5C,IAAI;YACF,MAAMmC,KAAK,GAAG,MAAMtE,iBAAiB,CAACkB,OAAO,CAACqD,QAAQ,CAAC,CAAC;YACxD,IAAIC,UAAU,GAAG,CAAC;YAClB,IAAIC,MAAM,GAAG,CAAC;YACd,IAAIC,aAAa,GAAG,CAAC;YACrB,IAAIC,UAAU,GAAG,CAAC;YAElBL,KAAK,CAAChD,OAAO,CAACsD,MAAM,IAAI;cACtB,IAAIA,MAAM,CAACC,IAAI,KAAK,aAAa,IAAID,MAAM,CAAC7D,IAAI,KAAK,OAAO,EAAE;gBAC5D,IAAI6D,MAAM,CAACE,WAAW,IAAIF,MAAM,CAACG,eAAe,EAAE;kBAChDP,UAAU,GAAGI,MAAM,CAACE,WAAW,IAAIF,MAAM,CAACE,WAAW,GAAGF,MAAM,CAACG,eAAe,CAAC;gBACjF;gBACA,IAAIH,MAAM,CAACH,MAAM,EAAE;kBACjBA,MAAM,GAAGG,MAAM,CAACH,MAAM;gBACxB;gBACAE,UAAU,EAAE;cACd;cACA,IAAIC,MAAM,CAACC,IAAI,KAAK,oBAAoB,EAAE;gBACxC,IAAID,MAAM,CAACF,aAAa,EAAE;kBACxBA,aAAa,GAAGE,MAAM,CAACF,aAAa;gBACtC;gBACAC,UAAU,EAAE;cACd;YACF,CAAC,CAAC;YAEF,IAAIA,UAAU,GAAG,CAAC,EAAE;cAClB;cACA,IAAIH,UAAU,GAAG,GAAG,IAAIC,MAAM,GAAG,EAAE,IAAIC,aAAa,GAAG,GAAG,EAAE;gBAC1DzF,oBAAoB,CAAC,MAAM,CAAC;cAC9B,CAAC,MAAM,IAAIuF,UAAU,GAAG,IAAI,IAAIC,MAAM,GAAG,EAAE,IAAIC,aAAa,GAAG,GAAG,EAAE;gBAClEzF,oBAAoB,CAAC,UAAU,CAAC;cAClC,CAAC,MAAM;gBACLA,oBAAoB,CAAC,MAAM,CAAC;cAC9B;YACF;UACF,CAAC,CAAC,OAAOoC,KAAK,EAAE;YACdnB,OAAO,CAACmB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;UACzD;QACF,CAAC,EAAE,IAAI,CAAC;QAER,OAAO,MAAMa,aAAa,CAACmC,aAAa,CAAC;MAC3C,CAAC;MAED,MAAMpB,OAAO,GAAGmB,wBAAwB,CAAC,CAAC;MAC1C,OAAOnB,OAAO;IAChB;EACF,CAAC,EAAE,CAACjD,iBAAiB,CAACkB,OAAO,EAAE9C,UAAU,CAAC,CAAC;;EAE3C;EACApB,SAAS,CAAC,MAAM;IACd,IAAI6C,cAAc,CAACqB,OAAO,IAAIrB,cAAc,CAACqB,OAAO,CAACC,SAAS,EAAE;MAC9D,MAAM8B,OAAO,GAAGC,iBAAiB,CAACrD,cAAc,CAACqB,OAAO,CAACC,SAAS,CAAC;MACnE,IAAI8B,OAAO,EAAE1D,sBAAsB,CAAC0D,OAAO,CAAC;IAC9C;EACF,CAAC,EAAE,EAAA/E,qBAAA,GAAC2B,cAAc,CAACqB,OAAO,cAAAhD,qBAAA,uBAAtBA,qBAAA,CAAwBiD,SAAS,CAAC,CAAC;;EAEvC;EACAnE,SAAS,CAAC,MAAM;IACd,IAAI6C,cAAc,CAACqB,OAAO,EAAE;MAC1BrB,cAAc,CAACqB,OAAO,CAAC8B,KAAK,GAAGtE,YAAY;IAC7C;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMwE,iBAAiB,GAAIxC,MAAM,IAAK;IACpC,IAAI,CAACsE,MAAM,CAACC,YAAY,IAAI,CAACD,MAAM,CAACE,kBAAkB,EAAE;MACtD,OAAO,IAAI;IACb;IAEA,IAAI;MACF,MAAMD,YAAY,GAAGD,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB;MACrE,MAAMC,YAAY,GAAG,IAAIF,YAAY,CAAC,CAAC;MACvC,MAAMG,QAAQ,GAAGD,YAAY,CAACE,cAAc,CAAC,CAAC;MAC9C,MAAMC,UAAU,GAAGH,YAAY,CAACI,uBAAuB,CAAC7E,MAAM,CAAC;MAC/D,MAAM8E,cAAc,GAAGL,YAAY,CAACM,qBAAqB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;MAErEH,UAAU,CAACI,OAAO,CAACN,QAAQ,CAAC;MAC5BA,QAAQ,CAACM,OAAO,CAACF,cAAc,CAAC;MAChCA,cAAc,CAACE,OAAO,CAACP,YAAY,CAACQ,WAAW,CAAC;MAEhD,IAAIC,eAAe,GAAG,CAAC;MACvB,MAAMC,mBAAmB,GAAG,EAAE;MAE9BL,cAAc,CAACM,cAAc,GAAG,MAAM;QACpC,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACZ,QAAQ,CAACa,iBAAiB,CAAC;QACxDb,QAAQ,CAACc,oBAAoB,CAACH,KAAK,CAAC;QACpC,MAAMI,MAAM,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGP,KAAK,CAAC9D,MAAM;QAE9D,IAAIkE,MAAM,GAAG,CAAC,IAAI/H,UAAU,KAAK,QAAQ,IAAIY,iBAAiB,KAAK,MAAM,EAAE;UACzE4G,eAAe,EAAE;UACjB,IAAIA,eAAe,IAAIC,mBAAmB,IAAIjH,YAAY,GAAG,CAAC,EAAE;YAC9D;YACAK,oBAAoB,CAACsH,WAAW,IAC9BA,WAAW,KAAK,UAAU,GAAG,MAAM,GAAGA,WAAW,CAAC;UACtD;QACF,CAAC,MAAM;UACLX,eAAe,GAAG,CAAC;UACnB;QACF;MACF,CAAC;MAED,OAAO,MAAM;QACX,IAAI;UACFJ,cAAc,CAACgB,UAAU,CAAC,CAAC;UAC3BpB,QAAQ,CAACoB,UAAU,CAAC,CAAC;UACrBlB,UAAU,CAACkB,UAAU,CAAC,CAAC;UACvB,IAAIrB,YAAY,CAACxB,KAAK,KAAK,QAAQ,EAAE;YACnCwB,YAAY,CAACsB,KAAK,CAAC,CAAC;UACtB;QACF,CAAC,CAAC,OAAOpF,KAAK,EAAE;UACdnB,OAAO,CAACmB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC7D;MACF,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,OAAO,IAAI;IACb;EACF,CAAC;;EAED;EACArE,SAAS,CAAC,MAAM;IACd,IAAIG,aAAa,EAAE;MACjBA,aAAa,CAACuJ,WAAW,CAACpI,OAAO,CAAC;IACpC;EACF,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;;EAEb;EACAtB,SAAS,CAAC,MAAM;IACd,IAAIG,aAAa,IAAIA,aAAa,CAAC2E,YAAY,CAACC,cAAc,CAAC,CAAC,EAAE;MAChE5E,aAAa,CAACyE,WAAW,CAACpD,UAAU,CAAC;IACvC;EACF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;;EAEhB;EACAxB,SAAS,CAAC,MAAM;IACd,MAAM2J,aAAa,GAAIC,CAAC,IAAK;MAC3B,IAAIA,CAAC,CAACC,GAAG,KAAK,QAAQ,IAAIhJ,MAAM,EAAE;QAChCiJ,aAAa,CAAC,CAAC;MACjB;IACF,CAAC;IAED9B,MAAM,CAAC+B,gBAAgB,CAAC,SAAS,EAAEJ,aAAa,CAAC;IACjD,OAAO,MAAM3B,MAAM,CAACgC,mBAAmB,CAAC,SAAS,EAAEL,aAAa,CAAC;EACnE,CAAC,EAAE,CAAC9I,MAAM,CAAC,CAAC;;EAEZ;EACAb,SAAS,CAAC,MAAM;IACd,IAAIiK,KAAK;IAET,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5B,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB,IAAI/I,UAAU,KAAK,QAAQ,IAAI+I,GAAG,GAAGrH,eAAe,CAACoB,OAAO,GAAG,GAAG,EAAE;QAClEpB,eAAe,CAACoB,OAAO,GAAGiG,GAAG;QAE7B,IAAI,CAACrI,YAAY,EAAE;UACjBC,eAAe,CAAC,IAAI,CAAC;QACvB;QAEA2D,YAAY,CAACuE,KAAK,CAAC;QACnBA,KAAK,GAAGzE,UAAU,CAAC,MAAM;UACvBzD,eAAe,CAAC,KAAK,CAAC;QACxB,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC;IAEDiG,MAAM,CAAC+B,gBAAgB,CAAC,WAAW,EAAEG,eAAe,CAAC;IACrD,OAAO,MAAM;MACXlC,MAAM,CAACgC,mBAAmB,CAAC,WAAW,EAAEE,eAAe,CAAC;MACxDxE,YAAY,CAACuE,KAAK,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAAC7I,UAAU,EAAEU,YAAY,CAAC,CAAC;;EAE9B;EACA,MAAMuI,UAAU,GAAIC,OAAO,IAAK;IAC9B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;IACrC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;IACzB,OAAO,GAAGC,IAAI,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAClF,CAAC;;EAED;EACA,MAAMd,aAAa,GAAGA,CAAA,KAAM;IAC1B5G,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3ChD,aAAa,CAACgH,OAAO,CAAC,IAAI,CAAC;EAC7B,CAAC;;EAED;EACAnH,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,MAAM,EAAE;IAEb,MAAMgK,kBAAkB,GAAG1F,WAAW,CAAC,MAAM;MAAA,IAAA2F,sBAAA,EAAAC,sBAAA;MAC3C;MACA,MAAMC,eAAe,GAAG,EAAAF,sBAAA,GAAAjI,cAAc,CAACqB,OAAO,cAAA4G,sBAAA,wBAAAC,sBAAA,GAAtBD,sBAAA,CAAwB3G,SAAS,cAAA4G,sBAAA,uBAAjCA,sBAAA,CAAmCnH,SAAS,CAAC,CAAC,CAACqB,MAAM,IAAG,CAAC;;MAEjF;MACA,MAAMgG,eAAe,GAAG9K,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEsF,YAAY,CAAC,CAAC;MAErDvC,OAAO,CAACC,GAAG,CAAC,gCAAgC6H,eAAe,qBAAqBC,eAAe,eAAe7J,UAAU,EAAE,CAAC;MAE3H,IAAI,CAAC4J,eAAe,IAAIC,eAAe,KAAK7J,UAAU,KAAK,QAAQ,EAAE;QACnE8B,OAAO,CAACC,GAAG,CAAC,8DAA8D,CAAC;QAC3E9B,aAAa,CAAC,QAAQ,CAAC;QACvBoB,eAAe,CAAC,IAAI,CAAC;MACvB;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMyC,aAAa,CAAC2F,kBAAkB,CAAC;EAChD,CAAC,EAAE,CAAChK,MAAM,EAAEO,UAAU,CAAC,CAAC;EAExB,IAAI,CAACP,MAAM,EAAE,OAAO,IAAI;;EAExB;EACA,MAAMqK,eAAe,GAAG9J,UAAU,KAAK,QAAQ,IAAI6B,QAAQ,CAACiB,OAAO,IAAI1B,YAAY,IAChFK,cAAc,CAACqB,OAAO,IAAIrB,cAAc,CAACqB,OAAO,CAACC,SAAS,IAC1DtB,cAAc,CAACqB,OAAO,CAACC,SAAS,CAACP,SAAS,CAAC,CAAC,CAACqB,MAAM,GAAG,CAAE;EAE3D/B,OAAO,CAACC,GAAG,CAAC,oCAAoC/B,UAAU,eAAe6B,QAAQ,CAACiB,OAAO,mBAAmB1B,YAAY,EAAE,CAAC;EAE3H,oBACE7B,OAAA;IAAKwK,SAAS,EAAC,qDAAqD;IAC/DC,KAAK,EAAE;MAAEC,eAAe,EAAE,kBAAkB;MAAEC,cAAc,EAAE;IAAa,CAAE;IAAAC,QAAA,gBAChF5K,OAAA;MAAKwK,SAAS,EAAC,iDAAiD;MAAAI,QAAA,GAE7DL,eAAe;MAAA;MACd;MACAvK,OAAA,CAACP,YAAY;QACXyC,cAAc,EAAEA,cAAe;QAC/BD,aAAa,EAAEA,aAAc;QAC7BlB,YAAY,EAAEA,YAAa;QAC3BF,UAAU,EAAEA,UAAW;QACvBR,MAAM,EAAEA,MAAO;QACfgB,iBAAiB,EAAEA,iBAAkB;QACrCE,gBAAgB,EAAEA,gBAAiB;QACnCJ,YAAY,EAAEA,YAAa;QAC3BX,UAAU,EAAEA,UAAW;QACvBJ,MAAM,EAAEA,MAAO;QAAAwK,QAAA,gBAEf5K,OAAA,CAACJ,UAAU;UACTS,MAAM,EAAEA,MAAO;UACfY,YAAY,EAAEA,YAAa;UAC3ByI,UAAU,EAAEA,UAAW;UACvBvI,YAAY,EAAEA;QAAa;UAAA0J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC,eAEFhL,OAAA,CAACL,gBAAgB;UACf0B,iBAAiB,EAAEA,iBAAkB;UACrCF,YAAY,EAAEA;QAAa;UAAA0J,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACU,CAAC,GACbvK,UAAU,KAAK,OAAO,gBACxBT,OAAA,CAACF,UAAU;QACTO,MAAM,EAAEA,MAAO;QACfoB,YAAY,EAAEA,YAAa;QAC3BR,YAAY,EAAEA,YAAa;QAC3ByI,UAAU,EAAEA,UAAW;QACvBtJ,MAAM,EAAEA,MAAO;QACfI,UAAU,EAAEA;MAAW;QAAAqK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,gBAEFhL,OAAA,CAACH,eAAe;QAACQ,MAAM,EAAEA,MAAO;QAACD,MAAM,EAAEA;MAAO;QAAAyK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACnD,eAEDhL,OAAA,CAACN,YAAY;QACXiB,OAAO,EAAEA,OAAQ;QACjBC,UAAU,EAAEA,UAAW;QACvBC,UAAU,EAAEA,UAAW;QACvBC,aAAa,EAAEmD,WAAY;QAC3BlD,YAAY,EAAEA,YAAa;QAC3BC,eAAe,EAAEA,eAAgB;QACjCmI,aAAa,EAAEA,aAAc;QAC7BhI,YAAY,EAAEA,YAAa;QAC3Bf,MAAM,EAAEA,MAAO;QACfK,UAAU,EAAEA;MAAW;QAAAoK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENhL,OAAA;MAAOiL,GAAG;MAAAL,QAAA,EAAE;AAClB;AACA;AACA;AACA;AACA;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAAC1K,EAAA,CAnpBIL,eAAe;EAAA,QACIV,QAAQ;AAAA;AAAA2L,EAAA,GAD3BjL,eAAe;AAqpBrB,eAAeA,eAAe;AAAC,IAAAiL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}