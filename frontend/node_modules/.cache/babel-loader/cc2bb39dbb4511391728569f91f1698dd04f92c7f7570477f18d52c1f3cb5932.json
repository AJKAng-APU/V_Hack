{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver3/frontend2/src/components/AuthProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport supabase from './supabaseClient';\nimport webRTCService from './services/WebRTCService';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check for existing session\n    const checkUser = async () => {\n      try {\n        // Check Supabase session\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          throw error;\n        }\n        if (session) {\n          // Get user data from users table with doctor information\n          const {\n            data: userData,\n            error: userError\n          } = await supabase.from('users').select('*, doctor:doctors(*)').eq('email', session.user.email).single();\n          if (userError) {\n            throw userError;\n          }\n\n          // Create the user object with all needed properties\n          const userObj = {\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url,\n            isDoctor: userData.is_doctor || false\n          };\n\n          // If this is a doctor, add doctor details\n          if (userData.is_doctor && userData.doctor) {\n            userObj.doctorId = userData.doctor_id;\n            userObj.specialty = userData.doctor.specialty;\n            userObj.doctorAvailability = userData.doctor.availability;\n            userObj.doctorRating = userData.doctor.rating;\n\n            // Store doctor information in localStorage\n            localStorage.setItem('is_doctor', 'true');\n            localStorage.setItem('doctor_id', `doctor-${userData.doctor_id}`);\n\n            // Connect doctor to the socket server\n            console.log(`Connecting doctor ${userData.name} to socket server...`);\n            connectDoctorToSocket(userData.doctor_id);\n          } else {\n            // Clear doctor flags if not a doctor\n            localStorage.setItem('is_doctor', 'false');\n            localStorage.removeItem('doctor_id');\n          }\n          setUser(userObj);\n          setIsAuthenticated(true);\n\n          // Store in localStorage\n          localStorage.setItem('healthsync_auth', 'true');\n          localStorage.setItem('healthsync_user', JSON.stringify(userObj));\n        } else {\n          // Check localStorage as fallback (useful for demo mode)\n          const storedAuth = localStorage.getItem('healthsync_auth');\n          const storedUser = localStorage.getItem('healthsync_user');\n          if (storedAuth === 'true' && storedUser) {\n            const userObj = JSON.parse(storedUser);\n            setUser(userObj);\n            setIsAuthenticated(true);\n\n            // If the stored user is a doctor, connect to socket\n            if (userObj.isDoctor && localStorage.getItem('doctor_id')) {\n              const doctorId = parseInt(localStorage.getItem('doctor_id').replace('doctor-', ''));\n              if (doctorId) {\n                connectDoctorToSocket(doctorId);\n              }\n            }\n          } else {\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n        }\n      } catch (error) {\n        console.error('Auth error:', error.message);\n        // Clear any potentially corrupt local data\n        localStorage.removeItem('healthsync_auth');\n        localStorage.removeItem('healthsync_user');\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Set up auth state listener\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session) {\n        // Get user data from users table with doctor info\n        const {\n          data: userData,\n          error: userError\n        } = await supabase.from('users').select('*, doctor:doctors(*)').eq('email', session.user.email).single();\n        if (!userError && userData) {\n          // Set up user object with potential doctor info\n          const userObj = {\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url,\n            isDoctor: userData.is_doctor || false\n          };\n          if (userData.is_doctor && userData.doctor) {\n            userObj.doctorId = userData.doctor_id;\n            userObj.specialty = userData.doctor.specialty;\n            userObj.doctorAvailability = userData.doctor.availability;\n            userObj.doctorRating = userData.doctor.rating;\n\n            // Store doctor information for future reference\n            localStorage.setItem('is_doctor', 'true');\n            localStorage.setItem('doctor_id', `doctor-${userData.doctor_id}`);\n\n            // Connect doctor to socket server\n            console.log(`Doctor signed in: ${userData.name}`);\n            connectDoctorToSocket(userData.doctor_id);\n          } else {\n            localStorage.setItem('is_doctor', 'false');\n            localStorage.removeItem('doctor_id');\n          }\n          setUser(userObj);\n          setIsAuthenticated(true);\n\n          // Store in localStorage\n          localStorage.setItem('healthsync_auth', 'true');\n          localStorage.setItem('healthsync_user', JSON.stringify(userObj));\n        }\n      }\n      if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setIsAuthenticated(false);\n        localStorage.removeItem('healthsync_auth');\n        localStorage.removeItem('healthsync_user');\n        localStorage.setItem('is_doctor', 'false');\n        localStorage.removeItem('doctor_id');\n      }\n    });\n    checkUser();\n\n    // Clean up subscription\n    return () => {\n      if (authListener && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // Function to connect a doctor to the socket server\n  const connectDoctorToSocket = doctorId => {\n    try {\n      if (!doctorId) return;\n      const doctorSocketId = `doctor-${doctorId}`;\n      console.log(`Initializing WebRTC for doctor: ${doctorSocketId}`);\n\n      // Initialize WebRTC service with doctor ID\n      if (webRTCService) {\n        // Set up callbacks - can be expanded as needed\n        const callbacks = {\n          onIncomingCall: callerId => {\n            console.log(`Doctor ${doctorId} received incoming call from: ${callerId}`);\n            // Could implement doctor-specific handling here\n          }\n        };\n\n        // Initialize with doctor ID\n        webRTCService.initialize(doctorSocketId, callbacks);\n\n        // Ensure the doctor is registered with the signaling server\n        setTimeout(() => {\n          if (webRTCService.signalingService && webRTCService.signalingService.isConnected()) {\n            webRTCService.signalingService.send('register', doctorSocketId);\n            console.log(`Doctor registered with socket server: ${doctorSocketId}`);\n          } else {\n            console.log(\"Socket not connected yet, trying again in 1s\");\n            setTimeout(() => {\n              if (webRTCService.signalingService) {\n                webRTCService.signalingService.send('register', doctorSocketId);\n                console.log(`Delayed registration for doctor: ${doctorSocketId}`);\n              }\n            }, 1000);\n          }\n        }, 500);\n      } else {\n        console.error(\"WebRTCService not available\");\n      }\n    } catch (error) {\n      console.error(\"Error connecting doctor to socket:\", error);\n    }\n  };\n\n  // Helper function to send email verification\n  const sendVerificationEmail = async email => {\n    try {\n      const {\n        error\n      } = await supabase.auth.resend({\n        type: 'signup',\n        email: email\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        message: 'Verification email sent! Please check your inbox.'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Sign out function\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      // Clear local storage\n      localStorage.removeItem('healthsync_auth');\n      localStorage.removeItem('healthsync_user');\n      localStorage.setItem('is_doctor', 'false');\n      localStorage.removeItem('doctor_id');\n      setUser(null);\n      setIsAuthenticated(false);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Value to be provided to consuming components\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    signOut,\n    sendVerificationEmail\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","webRTCService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkUser","data","session","error","auth","getSession","userData","userError","from","select","eq","email","single","userObj","id","user_id","name","isPremium","is_premium","avatar","avatar_url","isDoctor","is_doctor","doctor","doctorId","doctor_id","specialty","doctorAvailability","availability","doctorRating","rating","localStorage","setItem","console","log","connectDoctorToSocket","removeItem","JSON","stringify","storedAuth","getItem","storedUser","parse","parseInt","replace","message","authListener","onAuthStateChange","event","subscription","unsubscribe","doctorSocketId","callbacks","onIncomingCall","callerId","initialize","setTimeout","signalingService","isConnected","send","sendVerificationEmail","resend","type","success","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver3/frontend2/src/components/AuthProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport supabase from './supabaseClient';\nimport webRTCService from './services/WebRTCService';\n\n// Create auth context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Check for existing session\n    const checkUser = async () => {\n      try {\n        // Check Supabase session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          throw error;\n        }\n        \n        if (session) {\n          // Get user data from users table with doctor information\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('*, doctor:doctors(*)')\n            .eq('email', session.user.email)\n            .single();\n            \n          if (userError) {\n            throw userError;\n          }\n          \n          // Create the user object with all needed properties\n          const userObj = {\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url,\n            isDoctor: userData.is_doctor || false\n          };\n          \n          // If this is a doctor, add doctor details\n          if (userData.is_doctor && userData.doctor) {\n            userObj.doctorId = userData.doctor_id;\n            userObj.specialty = userData.doctor.specialty;\n            userObj.doctorAvailability = userData.doctor.availability;\n            userObj.doctorRating = userData.doctor.rating;\n            \n            // Store doctor information in localStorage\n            localStorage.setItem('is_doctor', 'true');\n            localStorage.setItem('doctor_id', `doctor-${userData.doctor_id}`);\n            \n            // Connect doctor to the socket server\n            console.log(`Connecting doctor ${userData.name} to socket server...`);\n            connectDoctorToSocket(userData.doctor_id);\n          } else {\n            // Clear doctor flags if not a doctor\n            localStorage.setItem('is_doctor', 'false');\n            localStorage.removeItem('doctor_id');\n          }\n          \n          setUser(userObj);\n          setIsAuthenticated(true);\n          \n          // Store in localStorage\n          localStorage.setItem('healthsync_auth', 'true');\n          localStorage.setItem('healthsync_user', JSON.stringify(userObj));\n        } else {\n          // Check localStorage as fallback (useful for demo mode)\n          const storedAuth = localStorage.getItem('healthsync_auth');\n          const storedUser = localStorage.getItem('healthsync_user');\n          \n          if (storedAuth === 'true' && storedUser) {\n            const userObj = JSON.parse(storedUser);\n            setUser(userObj);\n            setIsAuthenticated(true);\n            \n            // If the stored user is a doctor, connect to socket\n            if (userObj.isDoctor && localStorage.getItem('doctor_id')) {\n              const doctorId = parseInt(localStorage.getItem('doctor_id').replace('doctor-', ''));\n              if (doctorId) {\n                connectDoctorToSocket(doctorId);\n              }\n            }\n          } else {\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n        }\n      } catch (error) {\n        console.error('Auth error:', error.message);\n        // Clear any potentially corrupt local data\n        localStorage.removeItem('healthsync_auth');\n        localStorage.removeItem('healthsync_user');\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Set up auth state listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (event === 'SIGNED_IN' && session) {\n          // Get user data from users table with doctor info\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('*, doctor:doctors(*)')\n            .eq('email', session.user.email)\n            .single();\n            \n          if (!userError && userData) {\n            // Set up user object with potential doctor info\n            const userObj = {\n              id: userData.user_id,\n              name: userData.name,\n              email: userData.email,\n              isPremium: userData.is_premium,\n              avatar: userData.avatar_url,\n              isDoctor: userData.is_doctor || false\n            };\n            \n            if (userData.is_doctor && userData.doctor) {\n              userObj.doctorId = userData.doctor_id;\n              userObj.specialty = userData.doctor.specialty;\n              userObj.doctorAvailability = userData.doctor.availability;\n              userObj.doctorRating = userData.doctor.rating;\n              \n              // Store doctor information for future reference\n              localStorage.setItem('is_doctor', 'true');\n              localStorage.setItem('doctor_id', `doctor-${userData.doctor_id}`);\n              \n              // Connect doctor to socket server\n              console.log(`Doctor signed in: ${userData.name}`);\n              connectDoctorToSocket(userData.doctor_id);\n            } else {\n              localStorage.setItem('is_doctor', 'false');\n              localStorage.removeItem('doctor_id');\n            }\n            \n            setUser(userObj);\n            setIsAuthenticated(true);\n            \n            // Store in localStorage\n            localStorage.setItem('healthsync_auth', 'true');\n            localStorage.setItem('healthsync_user', JSON.stringify(userObj));\n          }\n        }\n        \n        if (event === 'SIGNED_OUT') {\n          setUser(null);\n          setIsAuthenticated(false);\n          localStorage.removeItem('healthsync_auth');\n          localStorage.removeItem('healthsync_user');\n          localStorage.setItem('is_doctor', 'false');\n          localStorage.removeItem('doctor_id');\n        }\n      }\n    );\n\n    checkUser();\n\n    // Clean up subscription\n    return () => {\n      if (authListener && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // Function to connect a doctor to the socket server\n  const connectDoctorToSocket = (doctorId) => {\n    try {\n      if (!doctorId) return;\n      \n      const doctorSocketId = `doctor-${doctorId}`;\n      console.log(`Initializing WebRTC for doctor: ${doctorSocketId}`);\n      \n      // Initialize WebRTC service with doctor ID\n      if (webRTCService) {\n        // Set up callbacks - can be expanded as needed\n        const callbacks = {\n          onIncomingCall: (callerId) => {\n            console.log(`Doctor ${doctorId} received incoming call from: ${callerId}`);\n            // Could implement doctor-specific handling here\n          }\n        };\n        \n        // Initialize with doctor ID\n        webRTCService.initialize(doctorSocketId, callbacks);\n        \n        // Ensure the doctor is registered with the signaling server\n        setTimeout(() => {\n          if (webRTCService.signalingService && \n              webRTCService.signalingService.isConnected()) {\n            webRTCService.signalingService.send('register', doctorSocketId);\n            console.log(`Doctor registered with socket server: ${doctorSocketId}`);\n          } else {\n            console.log(\"Socket not connected yet, trying again in 1s\");\n            setTimeout(() => {\n              if (webRTCService.signalingService) {\n                webRTCService.signalingService.send('register', doctorSocketId);\n                console.log(`Delayed registration for doctor: ${doctorSocketId}`);\n              }\n            }, 1000);\n          }\n        }, 500);\n      } else {\n        console.error(\"WebRTCService not available\");\n      }\n    } catch (error) {\n      console.error(\"Error connecting doctor to socket:\", error);\n    }\n  };\n\n  // Helper function to send email verification\n  const sendVerificationEmail = async (email) => {\n    try {\n      const { error } = await supabase.auth.resend({\n        type: 'signup',\n        email: email\n      });\n      \n      if (error) throw error;\n      \n      return { \n        success: true, \n        message: 'Verification email sent! Please check your inbox.' \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.message \n      };\n    }\n  };\n\n  // Sign out function\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      // Clear local storage\n      localStorage.removeItem('healthsync_auth');\n      localStorage.removeItem('healthsync_user');\n      localStorage.setItem('is_doctor', 'false');\n      localStorage.removeItem('doctor_id');\n      setUser(null);\n      setIsAuthenticated(false);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Value to be provided to consuming components\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    signOut,\n    sendVerificationEmail\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}