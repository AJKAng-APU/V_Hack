{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\n// Final VideoCallScreen.jsx - Same UI on both sides\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  const [forceDisplay, setForceDisplay] = useState(false);\n\n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const hasMedia = useRef(false);\n  const stateTransitionAttempt = useRef(0);\n\n  // Function to update call status with logging\n  const updateCallStatus = newStatus => {\n    console.log(`[VideoCallScreen] Updating call status: ${callStatus} -> ${newStatus}`);\n    setCallStatus(newStatus);\n\n    // If transitioning to active, also set forceDisplay\n    if (newStatus === 'active') {\n      setForceDisplay(true);\n      console.log('[VideoCallScreen] Force display set to true');\n\n      // Start call timer if needed\n      if (!callDurationTimer.current) {\n        console.log('[VideoCallScreen] Starting call duration timer');\n        callDurationTimer.current = setInterval(() => {\n          setCallDuration(prev => prev + 1);\n        }, 1000);\n      }\n    }\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    console.log('[VideoCallScreen] Toggle video:', videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('[VideoCallScreen] Toggling video through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('[VideoCallScreen] Setting video state directly');\n      setIsVideoOff(videoOff);\n    }\n  };\n\n  // CRITICAL EFFECT: Check WebRTC service state directly\n  useEffect(() => {\n    if (!isOpen) return;\n    console.log('[VideoCallScreen] Starting WebRTC state monitor');\n    const stateMonitor = setInterval(() => {\n      var _webRTCService$connec, _remoteVideoRef$curre, _remoteVideoRef$curre2;\n      // Check WebRTC service state directly\n      const serviceActive = webRTCService.isCallActive();\n      const serviceConnected = webRTCService.isCallConnected();\n      const hasRemoteStream = (_webRTCService$connec = webRTCService.connectionManager) === null || _webRTCService$connec === void 0 ? void 0 : _webRTCService$connec.remoteStream;\n\n      // Log remote video tracks\n      const remoteTracks = ((_remoteVideoRef$curre = remoteVideoRef.current) === null || _remoteVideoRef$curre === void 0 ? void 0 : (_remoteVideoRef$curre2 = _remoteVideoRef$curre.srcObject) === null || _remoteVideoRef$curre2 === void 0 ? void 0 : _remoteVideoRef$curre2.getTracks()) || [];\n      const videoTrackCount = remoteTracks.filter(t => t.kind === 'video').length;\n      console.log(`[VideoCallScreen] State check - UI: ${callStatus}, Service: ${serviceActive}, Remote video tracks: ${videoTrackCount}`);\n\n      // Force transition to active if needed\n      if ((serviceActive || serviceConnected || hasRemoteStream || remoteTracks.length > 0) && callStatus !== 'active') {\n        stateTransitionAttempt.current += 1;\n        console.log(`[VideoCallScreen] !!! FORCING ACTIVE STATE !!! (attempt ${stateTransitionAttempt.current})`);\n        updateCallStatus('active');\n\n        // Directly call the WebRTC service to update its state too\n        if (typeof webRTCService.updateCallState === 'function') {\n          webRTCService.updateCallState('active');\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(stateMonitor);\n  }, [isOpen, callStatus]);\n\n  // Additional direct check for remote stream\n  useEffect(() => {\n    if (!isOpen || !remoteVideoRef.current) return;\n    const streamChecker = setInterval(() => {\n      if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        console.log(`[VideoCallScreen] Remote video has ${tracks.length} tracks`);\n        if (tracks.length > 0) {\n          // Always update to active if we have tracks\n          console.log('[VideoCallScreen] Remote tracks detected, ensuring active state');\n          updateCallStatus('active');\n          hasMedia.current = true;\n\n          // Try to play the video manually if needed\n          if (remoteVideoRef.current.paused) {\n            remoteVideoRef.current.play().catch(e => console.log('[VideoCallScreen] Manual play failed:', e));\n          }\n        }\n      }\n    }, 700);\n    return () => clearInterval(streamChecker);\n  }, [isOpen, remoteVideoRef.current]);\n\n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('[VideoCallScreen] Opening for doctor:', doctor.name);\n\n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: stream => {\n          console.log('[VideoCallScreen] Got local stream with tracks:', stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('[VideoCallScreen] Set local video source');\n          }\n        },\n        onRemoteStream: stream => {\n          console.log('[VideoCallScreen] Got remote stream with tracks:', stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            remoteVideoRef.current.muted = isSpeakerOff;\n            console.log('[VideoCallScreen] Set remote video source');\n\n            // IMPORTANT: Force active state and ensure video is displayed\n            updateCallStatus('active');\n            hasMedia.current = true;\n            setForceDisplay(true);\n\n            // Try to play the video immediately\n            remoteVideoRef.current.play().catch(e => console.log('[VideoCallScreen] Initial play failed:', e));\n          }\n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        onCallStarted: () => {\n          var _webRTCService$connec2;\n          console.log('[VideoCallScreen] onCallStarted callback fired');\n          updateCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n\n          // Store peer connection reference\n          if ((_webRTCService$connec2 = webRTCService.connectionManager) !== null && _webRTCService$connec2 !== void 0 && _webRTCService$connec2.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n        },\n        onCallEnded: () => {\n          console.log('[VideoCallScreen] onCallEnded callback fired');\n          updateCallStatus('ended');\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n            callDurationTimer.current = null;\n          }\n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        onCallConnecting: () => {\n          console.log('[VideoCallScreen] onCallConnecting callback fired');\n          // Only update if not already active (don't go backwards)\n          if (callStatus !== 'active') {\n            updateCallStatus('connecting');\n          }\n        },\n        onICEConnectionStateChange: state => {\n          console.log('[VideoCallScreen] ICE connection state changed:', state);\n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n\n            // IMPORTANT: Force call to active state on ICE connected\n            console.log('[VideoCallScreen] ICE connected/completed, forcing active state');\n            updateCallStatus('active');\n\n            // Double-check after a short delay\n            setTimeout(() => {\n              updateCallStatus('active');\n            }, 500);\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n\n            // Try reconnection\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              webRTCService.attemptReconnection(true);\n            }\n          }\n        }\n      };\n\n      // IMPORTANT: Listen for call state changes with enhanced reliability\n      const callStateListener = state => {\n        console.log('[VideoCallScreen] callStateChanged event received:', state);\n\n        // Never go backwards from active to connecting\n        if (state === 'active' || state === 'connecting' && callStatus !== 'active') {\n          updateCallStatus(state);\n        } else if (state === 'ended') {\n          updateCallStatus('ended');\n        }\n      };\n      const unsubscribeCallState = webRTCService.on('callStateChanged', callStateListener);\n\n      // Listen for errors\n      const unsubscribeError = webRTCService.on('error', error => {\n        console.log('[VideoCallScreen] WebRTC error:', error);\n        setErrorMessage(error.message || 'Call error');\n        if (error.fatal) {\n          updateCallStatus('ended');\n        }\n      });\n      webRTCService.updateCallbacks(callbacks);\n\n      // Get media access if needed\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('[VideoCallScreen] Requesting media access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('[VideoCallScreen] Media access error:', error);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n      }\n\n      // IMPORTANT: Force check WebRTC service state\n      console.log('[VideoCallScreen] Initial state check:', webRTCService.callState);\n      if (webRTCService.callState === 'active') {\n        console.log('[VideoCallScreen] WebRTC service reports active on mount, syncing UI');\n        updateCallStatus('active');\n      }\n      return () => {\n        var _localVideoRef$curren, _remoteVideoRef$curre3;\n        console.log('[VideoCallScreen] Cleaning up resources');\n        unsubscribeCallState();\n        unsubscribeError();\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        if ((_remoteVideoRef$curre3 = remoteVideoRef.current) !== null && _remoteVideoRef$curre3 !== void 0 && _remoteVideoRef$curre3.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n\n        // Always end call on cleanup\n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, isSpeakerOff]);\n\n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            if (statsCount > 0) {\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        return () => clearInterval(statsInterval);\n      };\n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = stream => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            setConnectionQuality(prevQuality => prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n        }\n      };\n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n\n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('[VideoCallScreen] User ending call');\n    webRTCService.endCall(true);\n  };\n\n  // FORCE ACTIVE on mount\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Force active state immediately on mount to match doctor side\n    updateCallStatus('active');\n\n    // Force check WebRTC state after a delay\n    const initialTimeouts = [100, 500, 1000, 2000].map(delay => setTimeout(() => {\n      var _remoteVideoRef$curre4, _remoteVideoRef$curre5, _remoteVideoRef$curre6, _remoteVideoRef$curre7;\n      // Always force to active state\n      updateCallStatus('active');\n\n      // IMPORTANT: Check for remote video\n      const hasVideoTracks = ((_remoteVideoRef$curre4 = remoteVideoRef.current) === null || _remoteVideoRef$curre4 === void 0 ? void 0 : (_remoteVideoRef$curre5 = _remoteVideoRef$curre4.srcObject) === null || _remoteVideoRef$curre5 === void 0 ? void 0 : _remoteVideoRef$curre5.getVideoTracks().length) > 0;\n      if (hasVideoTracks) {\n        console.log(`[VideoCallScreen] Remote video has video tracks at ${delay}ms`);\n        updateCallStatus('active');\n      }\n\n      // If we have either audio or video tracks, activate immediately\n      const hasTracks = ((_remoteVideoRef$curre6 = remoteVideoRef.current) === null || _remoteVideoRef$curre6 === void 0 ? void 0 : (_remoteVideoRef$curre7 = _remoteVideoRef$curre6.srcObject) === null || _remoteVideoRef$curre7 === void 0 ? void 0 : _remoteVideoRef$curre7.getTracks().length) > 0;\n      if (hasTracks) {\n        console.log(`[VideoCallScreen] Remote has ${remoteVideoRef.current.srcObject.getTracks().length} tracks at ${delay}ms`);\n        updateCallStatus('active');\n      }\n    }, delay));\n    return () => initialTimeouts.forEach(clearTimeout);\n  }, [isOpen]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 bg-black\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: isSpeakerOff,\n            className: \"w-full h-full object-cover\",\n            style: {\n              zIndex: 10\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 15\n          }, this), isVideoOff && callStatus === 'active' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 flex items-center justify-center\",\n            style: {\n              background: isDarkMode ? colors.darkBg : '#000811',\n              zIndex: 15\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-32 h-32 rounded-full overflow-hidden border-4 border-white border-opacity-20\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: (doctor === null || doctor === void 0 ? void 0 : doctor.image) || '/User_1.png',\n                alt: (doctor === null || doctor === void 0 ? void 0 : doctor.name) || 'Doctor',\n                className: \"w-full h-full object-cover\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(CallHeader, {\n            doctor: doctor,\n            callDuration: callDuration,\n            formatTime: formatTime,\n            showControls: showControls\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n            connectionQuality: connectionQuality,\n            showControls: showControls\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute bottom-24 right-4 w-32 h-48 rounded-xl overflow-hidden border-4 border-white\",\n            style: {\n              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.8)',\n              zIndex: 40,\n              backgroundColor: 'black',\n              transform: showControls ? 'scale(1)' : 'scale(0.95)',\n              transition: 'all 0.3s ease'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"video\", {\n              ref: localVideoRef,\n              autoPlay: true,\n              playsInline: true,\n              muted: true,\n              className: \"w-full h-full object-cover\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this), callStatus === 'connecting' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 flex items-center justify-center bg-black bg-opacity-80 z-50\",\n            children: /*#__PURE__*/_jsxDEV(ConnectingState, {\n              doctor: doctor,\n              colors: colors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 17\n          }, this), connectionQuality !== 'good' && reconnectAttempt > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-4 py-2 rounded-lg\",\n            style: {\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\n              backdropFilter: 'blur(4px)',\n              zIndex: 30\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-col items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-8 h-8 rounded-full border-2 border-white border-opacity-20 border-t-white animate-spin mb-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-sm text-white font-medium\",\n                children: [\"Reconnecting\", reconnectAttempt > 1 ? ` (${reconnectAttempt})` : '', \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n          isMuted: isMuted,\n          setIsMuted: setIsMuted,\n          isVideoOff: isVideoOff,\n          setIsVideoOff: toggleVideo,\n          isSpeakerOff: isSpeakerOff,\n          setIsSpeakerOff: setIsSpeakerOff,\n          handleEndCall: handleEndCall,\n          showControls: showControls,\n          colors: colors,\n          callStatus: callStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 528,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"x7tC6MbgGfnmuoN8pRGT3xfYd1I=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","VideoDisplay","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoCallScreen","isOpen","onClose","colors","doctor","_s","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","audioMonitorCleanup","setAudioMonitorCleanup","forceDisplay","setForceDisplay","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","peerConnectionRef","hasMedia","stateTransitionAttempt","updateCallStatus","newStatus","console","log","current","setInterval","prev","toggleVideo","videoOff","mediaManager","hasLocalStream","stateMonitor","_webRTCService$connec","_remoteVideoRef$curre","_remoteVideoRef$curre2","serviceActive","isCallActive","serviceConnected","isCallConnected","hasRemoteStream","connectionManager","remoteStream","remoteTracks","srcObject","getTracks","videoTrackCount","filter","t","kind","length","updateCallState","clearInterval","streamChecker","tracks","paused","play","catch","e","name","callbacks","onLocalStream","stream","map","enabled","join","onRemoteStream","muted","cleanup","monitorAudioLevel","onCallStarted","_webRTCService$connec2","peerConnection","onCallEnded","setTimeout","onCallConnecting","onICEConnectionStateChange","state","attemptReconnection","callStateListener","unsubscribeCallState","on","unsubscribeError","error","message","fatal","updateCallbacks","getLocalMedia","callState","_localVideoRef$curren","_remoteVideoRef$curre3","forEach","track","stop","endCall","monitorConnectionQuality","statsInterval","stats","getStats","packetLoss","jitter","roundTripTime","statsCount","report","type","packetsLost","packetsReceived","window","AudioContext","webkitAudioContext","audioContext","analyser","createAnalyser","microphone","createMediaStreamSource","javascriptNode","createScriptProcessor","connect","destination","lowAudioCounter","LOW_AUDIO_THRESHOLD","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","values","reduce","a","b","prevQuality","disconnect","close","toggleAudio","handleKeyDown","key","handleEndCall","addEventListener","removeEventListener","timer","handleMouseMove","now","Date","clearTimeout","formatTime","seconds","mins","Math","floor","secs","toString","padStart","initialTimeouts","delay","_remoteVideoRef$curre4","_remoteVideoRef$curre5","_remoteVideoRef$curre6","_remoteVideoRef$curre7","hasVideoTracks","getVideoTracks","hasTracks","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","zIndex","background","darkBg","src","image","alt","boxShadow","transform","transition","jsx","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["// Final VideoCallScreen.jsx - Same UI on both sides\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  const [forceDisplay, setForceDisplay] = useState(false);\n  \n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const hasMedia = useRef(false);\n  const stateTransitionAttempt = useRef(0);\n  \n  // Function to update call status with logging\n  const updateCallStatus = (newStatus) => {\n    console.log(`[VideoCallScreen] Updating call status: ${callStatus} -> ${newStatus}`);\n    setCallStatus(newStatus);\n    \n    // If transitioning to active, also set forceDisplay\n    if (newStatus === 'active') {\n      setForceDisplay(true);\n      console.log('[VideoCallScreen] Force display set to true');\n      \n      // Start call timer if needed\n      if (!callDurationTimer.current) {\n        console.log('[VideoCallScreen] Starting call duration timer');\n        callDurationTimer.current = setInterval(() => {\n          setCallDuration(prev => prev + 1);\n        }, 1000);\n      }\n    }\n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    console.log('[VideoCallScreen] Toggle video:', videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('[VideoCallScreen] Toggling video through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('[VideoCallScreen] Setting video state directly');\n      setIsVideoOff(videoOff);\n    }\n  };\n  \n  // CRITICAL EFFECT: Check WebRTC service state directly\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    console.log('[VideoCallScreen] Starting WebRTC state monitor');\n    \n    const stateMonitor = setInterval(() => {\n      // Check WebRTC service state directly\n      const serviceActive = webRTCService.isCallActive();\n      const serviceConnected = webRTCService.isCallConnected();\n      const hasRemoteStream = webRTCService.connectionManager?.remoteStream;\n      \n      // Log remote video tracks\n      const remoteTracks = remoteVideoRef.current?.srcObject?.getTracks() || [];\n      const videoTrackCount = remoteTracks.filter(t => t.kind === 'video').length;\n      \n      console.log(`[VideoCallScreen] State check - UI: ${callStatus}, Service: ${serviceActive}, Remote video tracks: ${videoTrackCount}`);\n      \n      // Force transition to active if needed\n      if ((serviceActive || serviceConnected || hasRemoteStream || remoteTracks.length > 0) && callStatus !== 'active') {\n        stateTransitionAttempt.current += 1;\n        console.log(`[VideoCallScreen] !!! FORCING ACTIVE STATE !!! (attempt ${stateTransitionAttempt.current})`);\n        updateCallStatus('active');\n        \n        // Directly call the WebRTC service to update its state too\n        if (typeof webRTCService.updateCallState === 'function') {\n          webRTCService.updateCallState('active');\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(stateMonitor);\n  }, [isOpen, callStatus]);\n  \n  // Additional direct check for remote stream\n  useEffect(() => {\n    if (!isOpen || !remoteVideoRef.current) return;\n    \n    const streamChecker = setInterval(() => {\n      if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        console.log(`[VideoCallScreen] Remote video has ${tracks.length} tracks`);\n        \n        if (tracks.length > 0) {\n          // Always update to active if we have tracks\n          console.log('[VideoCallScreen] Remote tracks detected, ensuring active state');\n          updateCallStatus('active');\n          hasMedia.current = true;\n          \n          // Try to play the video manually if needed\n          if (remoteVideoRef.current.paused) {\n            remoteVideoRef.current.play().catch(e => \n              console.log('[VideoCallScreen] Manual play failed:', e)\n            );\n          }\n        }\n      }\n    }, 700);\n    \n    return () => clearInterval(streamChecker);\n  }, [isOpen, remoteVideoRef.current]);\n  \n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('[VideoCallScreen] Opening for doctor:', doctor.name);\n      \n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: (stream) => {\n          console.log('[VideoCallScreen] Got local stream with tracks:', \n            stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          \n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('[VideoCallScreen] Set local video source');\n          }\n        },\n        \n        onRemoteStream: (stream) => {\n          console.log('[VideoCallScreen] Got remote stream with tracks:', \n            stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          \n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            remoteVideoRef.current.muted = isSpeakerOff;\n            console.log('[VideoCallScreen] Set remote video source');\n            \n            // IMPORTANT: Force active state and ensure video is displayed\n            updateCallStatus('active');\n            hasMedia.current = true;\n            setForceDisplay(true);\n            \n            // Try to play the video immediately\n            remoteVideoRef.current.play().catch(e => \n              console.log('[VideoCallScreen] Initial play failed:', e)\n            );\n          }\n          \n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        \n        onCallStarted: () => {\n          console.log('[VideoCallScreen] onCallStarted callback fired');\n          updateCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n          \n          // Store peer connection reference\n          if (webRTCService.connectionManager?.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n        },\n        \n        onCallEnded: () => {\n          console.log('[VideoCallScreen] onCallEnded callback fired');\n          updateCallStatus('ended');\n          \n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n            callDurationTimer.current = null;\n          }\n          \n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        \n        onCallConnecting: () => {\n          console.log('[VideoCallScreen] onCallConnecting callback fired');\n          // Only update if not already active (don't go backwards)\n          if (callStatus !== 'active') {\n            updateCallStatus('connecting');\n          }\n        },\n        \n        onICEConnectionStateChange: (state) => {\n          console.log('[VideoCallScreen] ICE connection state changed:', state);\n          \n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n            \n            // IMPORTANT: Force call to active state on ICE connected\n            console.log('[VideoCallScreen] ICE connected/completed, forcing active state');\n            updateCallStatus('active');\n            \n            // Double-check after a short delay\n            setTimeout(() => {\n              updateCallStatus('active');\n            }, 500);\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n            \n            // Try reconnection\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              webRTCService.attemptReconnection(true);\n            }\n          }\n        }\n      };\n      \n      // IMPORTANT: Listen for call state changes with enhanced reliability\n      const callStateListener = (state) => {\n        console.log('[VideoCallScreen] callStateChanged event received:', state);\n        \n        // Never go backwards from active to connecting\n        if (state === 'active' || (state === 'connecting' && callStatus !== 'active')) {\n          updateCallStatus(state);\n        } else if (state === 'ended') {\n          updateCallStatus('ended');\n        }\n      };\n      \n      const unsubscribeCallState = webRTCService.on('callStateChanged', callStateListener);\n      \n      // Listen for errors\n      const unsubscribeError = webRTCService.on('error', (error) => {\n        console.log('[VideoCallScreen] WebRTC error:', error);\n        setErrorMessage(error.message || 'Call error');\n        \n        if (error.fatal) {\n          updateCallStatus('ended');\n        }\n      });\n      \n      webRTCService.updateCallbacks(callbacks);\n      \n      // Get media access if needed\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('[VideoCallScreen] Requesting media access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('[VideoCallScreen] Media access error:', error);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n      }\n      \n      // IMPORTANT: Force check WebRTC service state\n      console.log('[VideoCallScreen] Initial state check:', webRTCService.callState);\n      if (webRTCService.callState === 'active') {\n        console.log('[VideoCallScreen] WebRTC service reports active on mount, syncing UI');\n        updateCallStatus('active');\n      }\n      \n      return () => {\n        console.log('[VideoCallScreen] Cleaning up resources');\n        \n        unsubscribeCallState();\n        unsubscribeError();\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        \n        if (localVideoRef.current?.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        \n        if (remoteVideoRef.current?.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        \n        // Always end call on cleanup\n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, isSpeakerOff]);\n  \n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            \n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            \n            if (statsCount > 0) {\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        \n        return () => clearInterval(statsInterval);\n      };\n      \n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = (stream) => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    \n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      \n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      \n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      \n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        \n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            setConnectionQuality(prevQuality => \n              prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n        }\n      };\n      \n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n  \n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    \n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('[VideoCallScreen] User ending call');\n    webRTCService.endCall(true);\n  };\n  \n  // FORCE ACTIVE on mount\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    // Force active state immediately on mount to match doctor side\n    updateCallStatus('active');\n    \n    // Force check WebRTC state after a delay\n    const initialTimeouts = [100, 500, 1000, 2000].map(delay => \n      setTimeout(() => {\n        // Always force to active state\n        updateCallStatus('active');\n        \n        // IMPORTANT: Check for remote video\n        const hasVideoTracks = remoteVideoRef.current?.srcObject?.getVideoTracks().length > 0;\n        if (hasVideoTracks) {\n          console.log(`[VideoCallScreen] Remote video has video tracks at ${delay}ms`);\n          updateCallStatus('active');\n        }\n        \n        // If we have either audio or video tracks, activate immediately\n        const hasTracks = remoteVideoRef.current?.srcObject?.getTracks().length > 0;\n        if (hasTracks) {\n          console.log(`[VideoCallScreen] Remote has ${remoteVideoRef.current.srcObject.getTracks().length} tracks at ${delay}ms`);\n          updateCallStatus('active');\n        }\n      }, delay)\n    );\n    \n    return () => initialTimeouts.forEach(clearTimeout);\n  }, [isOpen]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        \n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : (\n          <>\n            {/* Always show the video elements */}\n            <div className=\"absolute inset-0 bg-black\">\n              {/* Remote video - always visible */}\n              <video\n                ref={remoteVideoRef}\n                autoPlay\n                playsInline\n                muted={isSpeakerOff}\n                className=\"w-full h-full object-cover\"\n                style={{ zIndex: 10 }}\n              />\n              \n              {/* User avatar fallback when video is off */}\n              {isVideoOff && callStatus === 'active' && (\n                <div className=\"absolute inset-0 flex items-center justify-center\"\n                     style={{ \n                       background: isDarkMode ? colors.darkBg : '#000811',\n                       zIndex: 15\n                     }}>\n                  <div className=\"w-32 h-32 rounded-full overflow-hidden border-4 border-white border-opacity-20\">\n                    <img src={doctor?.image || '/User_1.png'} alt={doctor?.name || 'Doctor'} className=\"w-full h-full object-cover\" />\n                  </div>\n                </div>\n              )}\n              \n              {/* Call header */}\n              <CallHeader \n                doctor={doctor}\n                callDuration={callDuration}\n                formatTime={formatTime}\n                showControls={showControls}\n              />\n              \n              {/* Connection status */}\n              <ConnectionStatus\n                connectionQuality={connectionQuality}\n                showControls={showControls}\n              />\n              \n              {/* Local video (self view) */}\n              <div className=\"absolute bottom-24 right-4 w-32 h-48 rounded-xl overflow-hidden border-4 border-white\"\n                   style={{ \n                     boxShadow: '0 8px 32px rgba(0, 0, 0, 0.8)',\n                     zIndex: 40,\n                     backgroundColor: 'black',\n                     transform: showControls ? 'scale(1)' : 'scale(0.95)',\n                     transition: 'all 0.3s ease'\n                   }}>\n                <video\n                  ref={localVideoRef}\n                  autoPlay\n                  playsInline\n                  muted={true}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              \n              {/* Connecting overlay - ONLY SHOWN DURING CONNECTING */}\n              {callStatus === 'connecting' && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-80 z-50\">\n                  <ConnectingState doctor={doctor} colors={colors} />\n                </div>\n              )}\n              \n              {/* Reconnecting indicator */}\n              {connectionQuality !== 'good' && reconnectAttempt > 0 && (\n                <div \n                  className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-4 py-2 rounded-lg\"\n                  style={{ \n                    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                    backdropFilter: 'blur(4px)',\n                    zIndex: 30\n                  }}\n                >\n                  <div className=\"flex flex-col items-center\">\n                    <div className=\"w-8 h-8 rounded-full border-2 border-white border-opacity-20 border-t-white animate-spin mb-2\"></div>\n                    <span className=\"text-sm text-white font-medium\">Reconnecting{reconnectAttempt > 1 ? ` (${reconnectAttempt})` : ''}...</span>\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            {/* Call controls */}\n            <CallControls\n              isMuted={isMuted}\n              setIsMuted={setIsMuted}\n              isVideoOff={isVideoOff}\n              setIsVideoOff={toggleVideo} \n              isSpeakerOff={isSpeakerOff}\n              setIsSpeakerOff={setIsSpeakerOff}\n              handleEndCall={handleEndCall}\n              showControls={showControls}\n              colors={colors}\n              callStatus={callStatus}\n            />\n          </>\n        )}\n      </div>\n      \n      <style jsx>{`\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}