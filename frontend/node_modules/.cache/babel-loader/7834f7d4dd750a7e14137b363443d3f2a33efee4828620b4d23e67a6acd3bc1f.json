{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver4/frontend2/src/components/HealthDataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthProvider';\nimport { useApiMiddleware } from './ApiMiddleware';\nimport api from './api';\n\n// Create health data context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthDataContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the health data context\nexport const useHealthData = () => {\n  _s();\n  return useContext(HealthDataContext);\n};\n_s(useHealthData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const HealthDataProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isAuthenticated\n  } = useAuth();\n  const {\n    callApi\n  } = useApiMiddleware();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isGoogleFitConnected, setIsGoogleFitConnected] = useState(false);\n  const [healthMetrics, setHealthMetrics] = useState({\n    height: null,\n    weight: null,\n    BMI: null,\n    pressure: {\n      systolic: null,\n      diastolic: null\n    },\n    glucose: null,\n    sleep: {\n      sleep_time: null,\n      wake_time: null\n    }\n  });\n  const [symptoms, setSymptoms] = useState([]);\n  const [prediction, setPrediction] = useState(null);\n  const [biorhythmAdvice, setBiorhythmAdvice] = useState(null);\n  const [aiInsights, setAiInsights] = useState(null);\n  const [environmentAdvice, setEnvironmentAdvice] = useState(null);\n\n  // Track last refresh time\n  const [lastRefreshTime, setLastRefreshTime] = useState(null);\n\n  // Check Google Fit connection status\n  const checkGoogleFitConnection = async () => {\n    try {\n      // Check if we have local storage data indicating connection\n      const connected = localStorage.getItem('google_fit_connected') === 'true';\n      setIsGoogleFitConnected(connected);\n\n      // Also check with the API if possible\n      if (connected) {\n        // Ping the server to verify the connection is still active\n        try {\n          const response = await api.checkBackendHealth();\n          // If server is down, we'll still keep the local status\n        } catch (err) {\n          console.warn(\"Could not verify Google Fit connection with server\");\n        }\n      }\n      return connected;\n    } catch (error) {\n      console.error('Failed to check Google Fit connection:', error);\n      return false;\n    }\n  };\n\n  // Connect to Google Fit and get OAuth2 token\n  const connectGoogleFit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Generate an auth code for Google OAuth\n      const authCode = `${Math.random().toString(36).substr(2, 9)}_${Date.now()}`;\n      try {\n        // Try to authenticate with the real API\n        await callApi(api.authenticateGoogleFit, authCode);\n\n        // Save connection status to local storage\n        localStorage.setItem('google_fit_connected', 'true');\n        setIsGoogleFitConnected(true);\n\n        // Fetch initial health data\n        await fetchHealthData();\n        return true;\n      } catch (apiError) {\n        console.error('API authentication failed:', apiError);\n        setError('Failed to authenticate with Google Fit. Please try again.');\n\n        // Clear any potentially existing data\n        localStorage.setItem('google_fit_connected', 'false');\n        setIsGoogleFitConnected(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('Failed to connect Google Fit:', error);\n      setError('Failed to connect to Google Fit. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch health data from API - no mock data\n  const fetchHealthData = async (options = {\n    days: 30\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      if (!isAuthenticated) {\n        throw new Error('User not authenticated');\n      }\n      if (!isGoogleFitConnected) {\n        const connected = await checkGoogleFitConnection();\n        if (!connected) {\n          throw new Error('Google Fit not connected');\n        }\n      }\n\n      // Get real data from the API\n      const data = await callApi(api.fetchHealthData, options);\n\n      // Only proceed if we actually got data back\n      if (data && Object.keys(data).length > 0) {\n        // Transform data into our expected format\n        const transformedData = {\n          height: data.height || null,\n          weight: data.weight || null,\n          BMI: data.BMI || null,\n          pressure: {\n            systolic: data.systolic || null,\n            diastolic: data.diastolic || null\n          },\n          glucose: data.glucose || null,\n          sleep: {\n            sleep_time: data.sleep_time || null,\n            wake_time: data.wake_time || null\n          }\n        };\n        setHealthMetrics(transformedData);\n\n        // Get prediction based on health metrics\n        if (data.systolic && data.diastolic && data.BMI && data.glucose && data.age) {\n          await getPrediction({\n            age: data.age,\n            BMI: data.BMI,\n            glucose: data.glucose,\n            sbp: data.systolic,\n            dbp: data.diastolic\n          });\n        }\n\n        // Set last refresh time\n        setLastRefreshTime(new Date());\n        return transformedData;\n      } else {\n        throw new Error('No health data available from Google Fit');\n      }\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      setError(error.message || 'Failed to fetch health data');\n      throw error; // Rethrow to let the caller handle it\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get prediction based on health metrics\n  const getPrediction = async metrics => {\n    try {\n      // Get real prediction from the API\n      const result = await callApi(api.getPrediction, metrics);\n      setPrediction(result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      throw error;\n    }\n  };\n\n  // Get biorhythm advice\n  const getBiorhythmAdvice = async (chronotype = 'morning', medicationTime = '08:00') => {\n    try {\n      console.log(`Requesting biorhythm advice for ${chronotype} chronotype...`);\n\n      // Get actual biorhythm advice from the API\n      const advice = await callApi(api.getBiorhythmAdvice, chronotype, medicationTime);\n      setBiorhythmAdvice(advice);\n      return advice;\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      throw error;\n    }\n  };\n\n  // Get environment advice\n  const getEnvironmentAdvice = async () => {\n    try {\n      // Get real environment advice\n      const advice = await callApi(api.getEnvironmentAdvice);\n      setEnvironmentAdvice(advice);\n      return advice;\n    } catch (error) {\n      console.error('Failed to get environment advice:', error);\n      throw error;\n    }\n  };\n\n  // Add a new symptom and get AI insights\n  const addSymptom = async symptomData => {\n    try {\n      // Submit the symptom to the API\n      const newSymptom = await callApi(api.submitSymptom, symptomData);\n\n      // Update local symptoms list\n      setSymptoms(prevSymptoms => [newSymptom, ...prevSymptoms]);\n\n      // Get AI insights based on the new symptom and health metrics\n      const insightData = {\n        symptom: symptomData,\n        healthMetrics: healthMetrics\n      };\n\n      // Get real AI insights\n      const insights = await callApi(api.getHealthInsight, insightData);\n      setAiInsights(insights);\n      return {\n        symptom: newSymptom,\n        insights\n      };\n    } catch (error) {\n      console.error('Failed to add symptom:', error);\n      throw error;\n    }\n  };\n\n  // Load initial data when authenticated\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (isAuthenticated) {\n        const connected = await checkGoogleFitConnection();\n        // Only fetch health data if Google Fit is connected\n        if (connected) {\n          try {\n            await fetchHealthData();\n            try {\n              await getBiorhythmAdvice('morning'); // Load default biorhythm advice\n            } catch (biorhythmError) {\n              console.warn(\"Could not load biorhythm advice:\", biorhythmError);\n            }\n          } catch (error) {\n            console.error(\"Failed to load initial data:\", error);\n          }\n        }\n      }\n    };\n    loadInitialData();\n  }, [isAuthenticated]);\n\n  // Value to be provided to consuming components\n  const value = {\n    loading,\n    error,\n    isGoogleFitConnected,\n    healthMetrics,\n    symptoms,\n    prediction,\n    biorhythmAdvice,\n    aiInsights,\n    environmentAdvice,\n    lastRefreshTime,\n    connectGoogleFit,\n    fetchHealthData,\n    addSymptom,\n    getBiorhythmAdvice,\n    getPrediction,\n    getEnvironmentAdvice\n  };\n  return /*#__PURE__*/_jsxDEV(HealthDataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s2(HealthDataProvider, \"r4Z1HswuxgmEGxhza8v6HC/UmAI=\", false, function () {\n  return [useAuth, useApiMiddleware];\n});\n_c = HealthDataProvider;\nexport default HealthDataProvider;\nvar _c;\n$RefreshReg$(_c, \"HealthDataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","useApiMiddleware","api","jsxDEV","_jsxDEV","HealthDataContext","useHealthData","_s","HealthDataProvider","children","_s2","isAuthenticated","callApi","loading","setLoading","error","setError","isGoogleFitConnected","setIsGoogleFitConnected","healthMetrics","setHealthMetrics","height","weight","BMI","pressure","systolic","diastolic","glucose","sleep","sleep_time","wake_time","symptoms","setSymptoms","prediction","setPrediction","biorhythmAdvice","setBiorhythmAdvice","aiInsights","setAiInsights","environmentAdvice","setEnvironmentAdvice","lastRefreshTime","setLastRefreshTime","checkGoogleFitConnection","connected","localStorage","getItem","response","checkBackendHealth","err","console","warn","connectGoogleFit","authCode","Math","random","toString","substr","Date","now","authenticateGoogleFit","setItem","fetchHealthData","apiError","options","days","Error","data","Object","keys","length","transformedData","age","getPrediction","sbp","dbp","message","metrics","result","getBiorhythmAdvice","chronotype","medicationTime","log","advice","getEnvironmentAdvice","addSymptom","symptomData","newSymptom","submitSymptom","prevSymptoms","insightData","symptom","insights","getHealthInsight","loadInitialData","biorhythmError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver4/frontend2/src/components/HealthDataContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthProvider';\nimport { useApiMiddleware } from './ApiMiddleware';\nimport api from './api';\n\n// Create health data context\nconst HealthDataContext = createContext();\n\n// Custom hook to use the health data context\nexport const useHealthData = () => {\n  return useContext(HealthDataContext);\n};\n\nexport const HealthDataProvider = ({ children }) => {\n  const { isAuthenticated } = useAuth();\n  const { callApi } = useApiMiddleware();\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isGoogleFitConnected, setIsGoogleFitConnected] = useState(false);\n  const [healthMetrics, setHealthMetrics] = useState({\n    height: null,\n    weight: null,\n    BMI: null,\n    pressure: { systolic: null, diastolic: null },\n    glucose: null,\n    sleep: { sleep_time: null, wake_time: null }\n  });\n  const [symptoms, setSymptoms] = useState([]);\n  const [prediction, setPrediction] = useState(null);\n  const [biorhythmAdvice, setBiorhythmAdvice] = useState(null);\n  const [aiInsights, setAiInsights] = useState(null);\n  const [environmentAdvice, setEnvironmentAdvice] = useState(null);\n  \n  // Track last refresh time\n  const [lastRefreshTime, setLastRefreshTime] = useState(null);\n  \n  // Check Google Fit connection status\n  const checkGoogleFitConnection = async () => {\n    try {\n      // Check if we have local storage data indicating connection\n      const connected = localStorage.getItem('google_fit_connected') === 'true';\n      setIsGoogleFitConnected(connected);\n      \n      // Also check with the API if possible\n      if (connected) {\n        // Ping the server to verify the connection is still active\n        try {\n          const response = await api.checkBackendHealth();\n          // If server is down, we'll still keep the local status\n        } catch (err) {\n          console.warn(\"Could not verify Google Fit connection with server\");\n        }\n      }\n      \n      return connected;\n    } catch (error) {\n      console.error('Failed to check Google Fit connection:', error);\n      return false;\n    }\n  };\n  \n  // Connect to Google Fit and get OAuth2 token\n  const connectGoogleFit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Generate an auth code for Google OAuth\n      const authCode = `${Math.random().toString(36).substr(2, 9)}_${Date.now()}`;\n      \n      try {\n        // Try to authenticate with the real API\n        await callApi(api.authenticateGoogleFit, authCode);\n        \n        // Save connection status to local storage\n        localStorage.setItem('google_fit_connected', 'true');\n        setIsGoogleFitConnected(true);\n        \n        // Fetch initial health data\n        await fetchHealthData();\n        \n        return true;\n      } catch (apiError) {\n        console.error('API authentication failed:', apiError);\n        setError('Failed to authenticate with Google Fit. Please try again.');\n        \n        // Clear any potentially existing data\n        localStorage.setItem('google_fit_connected', 'false');\n        setIsGoogleFitConnected(false);\n        \n        return false;\n      }\n    } catch (error) {\n      console.error('Failed to connect Google Fit:', error);\n      setError('Failed to connect to Google Fit. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Fetch health data from API - no mock data\n  const fetchHealthData = async (options = { days: 30 }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!isAuthenticated) {\n        throw new Error('User not authenticated');\n      }\n      \n      if (!isGoogleFitConnected) {\n        const connected = await checkGoogleFitConnection();\n        if (!connected) {\n          throw new Error('Google Fit not connected');\n        }\n      }\n      \n      // Get real data from the API\n      const data = await callApi(api.fetchHealthData, options);\n      \n      // Only proceed if we actually got data back\n      if (data && Object.keys(data).length > 0) {\n        // Transform data into our expected format\n        const transformedData = {\n          height: data.height || null,\n          weight: data.weight || null,\n          BMI: data.BMI || null,\n          pressure: { \n            systolic: data.systolic || null, \n            diastolic: data.diastolic || null \n          },\n          glucose: data.glucose || null,\n          sleep: {\n            sleep_time: data.sleep_time || null,\n            wake_time: data.wake_time || null\n          }\n        };\n        \n        setHealthMetrics(transformedData);\n        \n        // Get prediction based on health metrics\n        if (data.systolic && data.diastolic && data.BMI && data.glucose && data.age) {\n          await getPrediction({\n            age: data.age,\n            BMI: data.BMI,\n            glucose: data.glucose,\n            sbp: data.systolic,\n            dbp: data.diastolic\n          });\n        }\n        \n        // Set last refresh time\n        setLastRefreshTime(new Date());\n        \n        return transformedData;\n      } else {\n        throw new Error('No health data available from Google Fit');\n      }\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      setError(error.message || 'Failed to fetch health data');\n      throw error; // Rethrow to let the caller handle it\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Get prediction based on health metrics\n  const getPrediction = async (metrics) => {\n    try {\n      // Get real prediction from the API\n      const result = await callApi(api.getPrediction, metrics);\n      setPrediction(result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      throw error;\n    }\n  };\n  \n  // Get biorhythm advice\n  const getBiorhythmAdvice = async (chronotype = 'morning', medicationTime = '08:00') => {\n    try {\n      console.log(`Requesting biorhythm advice for ${chronotype} chronotype...`);\n      \n      // Get actual biorhythm advice from the API\n      const advice = await callApi(api.getBiorhythmAdvice, chronotype, medicationTime);\n      \n      setBiorhythmAdvice(advice);\n      return advice;\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      throw error;\n    }\n  };\n  \n  // Get environment advice\n  const getEnvironmentAdvice = async () => {\n    try {\n      // Get real environment advice\n      const advice = await callApi(api.getEnvironmentAdvice);\n      setEnvironmentAdvice(advice);\n      return advice;\n    } catch (error) {\n      console.error('Failed to get environment advice:', error);\n      throw error;\n    }\n  };\n  \n  // Add a new symptom and get AI insights\n  const addSymptom = async (symptomData) => {\n    try {\n      // Submit the symptom to the API\n      const newSymptom = await callApi(api.submitSymptom, symptomData);\n      \n      // Update local symptoms list\n      setSymptoms(prevSymptoms => [newSymptom, ...prevSymptoms]);\n      \n      // Get AI insights based on the new symptom and health metrics\n      const insightData = {\n        symptom: symptomData,\n        healthMetrics: healthMetrics\n      };\n      \n      // Get real AI insights\n      const insights = await callApi(api.getHealthInsight, insightData);\n      setAiInsights(insights);\n      \n      return { symptom: newSymptom, insights };\n    } catch (error) {\n      console.error('Failed to add symptom:', error);\n      throw error;\n    }\n  };\n  \n  // Load initial data when authenticated\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (isAuthenticated) {\n        const connected = await checkGoogleFitConnection();\n        // Only fetch health data if Google Fit is connected\n        if (connected) {\n          try {\n            await fetchHealthData();\n            try {\n              await getBiorhythmAdvice('morning'); // Load default biorhythm advice\n            } catch (biorhythmError) {\n              console.warn(\"Could not load biorhythm advice:\", biorhythmError);\n            }\n          } catch (error) {\n            console.error(\"Failed to load initial data:\", error);\n          }\n        }\n      }\n    };\n    \n    loadInitialData();\n  }, [isAuthenticated]);\n  \n  // Value to be provided to consuming components\n  const value = {\n    loading,\n    error,\n    isGoogleFitConnected,\n    healthMetrics,\n    symptoms,\n    prediction,\n    biorhythmAdvice,\n    aiInsights,\n    environmentAdvice,\n    lastRefreshTime,\n    connectGoogleFit,\n    fetchHealthData,\n    addSymptom,\n    getBiorhythmAdvice,\n    getPrediction,\n    getEnvironmentAdvice\n  };\n  \n  return (\n    <HealthDataContext.Provider value={value}>\n      {children}\n    </HealthDataContext.Provider>\n  );\n};\n\nexport default HealthDataProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}