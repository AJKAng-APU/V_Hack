{"ast":null,"code":"// File: services/WebRTC/SignalingService.js\nimport io from 'socket.io-client';\n\n/**\n * Creates a signaling service instance\n * @param {string} serverUrl - Signaling server URL\n * @param {string} userId - Current user ID\n * @param {function} eventHandler - Event handler function\n * @returns {Object} - Signaling service instance\n */\nexport function createSignalingService(serverUrl, userId, eventHandler) {\n  // Connect to the signaling server\n  const socket = io(serverUrl);\n  let connected = false;\n\n  // Handle connection events\n  socket.on('connect', () => {\n    console.log('Connected to signaling server');\n    connected = true;\n\n    // Register user ID with the signaling server\n    socket.emit('register', userId);\n  });\n  socket.on('disconnect', () => {\n    console.log('Disconnected from signaling server');\n    connected = false;\n  });\n\n  // Set up event listeners for signaling messages\n  socket.on('incoming-call', data => {\n    eventHandler('incoming-call', data);\n  });\n  socket.on('call-answered', data => {\n    eventHandler('call-answered', data);\n  });\n  socket.on('call-declined', () => {\n    eventHandler('call-declined');\n  });\n  socket.on('call-in-progress', data => {\n    eventHandler('call-in-progress', data);\n  });\n  socket.on('ice-candidate', data => {\n    eventHandler('ice-candidate', data);\n  });\n  socket.on('call-ended', () => {\n    eventHandler('call-ended');\n  });\n  socket.on('call-failed', data => {\n    eventHandler('call-failed', data);\n  });\n\n  // Return the signaling service interface\n  return {\n    /**\n     * Send a message to the signaling server\n     * @param {string} event - Event name\n     * @param {Object} data - Event data\n     */\n    send: (event, data) => {\n      if (connected) {\n        socket.emit(event, data);\n      } else {\n        console.error('Cannot send message, not connected to signaling server');\n      }\n    },\n    /**\n     * Check if a user is online\n     * @param {string} userId - User ID to check\n     * @returns {Promise<boolean>} - Whether the user is online\n     */\n    checkUserOnline: userId => {\n      return new Promise(resolve => {\n        if (!connected) {\n          resolve(false);\n          return;\n        }\n\n        // Create a unique request ID to match the response\n        const requestId = `online-check-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n        console.log('Checking if user is online:', userId, 'with requestId:', requestId);\n        socket.emit('check-user-online', {\n          userId,\n          requestId\n        });\n\n        // Set up a one-time event listener for the response\n        const responseHandler = data => {\n          if (data.responseId === requestId && data.userId === userId) {\n            socket.off('user-online-status', responseHandler);\n            clearTimeout(timeoutId);\n            resolve(data.isOnline);\n          }\n        };\n        socket.on('user-online-status', responseHandler);\n\n        // Set a timeout in case we never get a response\n        const timeoutId = setTimeout(() => {\n          socket.off('user-online-status', responseHandler);\n          console.log('User online check timed out for:', userId);\n          resolve(false);\n        }, 5000);\n      });\n    },\n    /**\n     * Check if connected to the signaling server\n     * @returns {boolean} - Whether connected\n     */\n    isConnected: () => connected,\n    /**\n     * Disconnect from the signaling server\n     */\n    disconnect: () => {\n      if (connected) {\n        socket.disconnect();\n        connected = false;\n      }\n    }\n  };\n}","map":{"version":3,"names":["io","createSignalingService","serverUrl","userId","eventHandler","socket","connected","on","console","log","emit","data","send","event","error","checkUserOnline","Promise","resolve","requestId","Date","now","Math","random","toString","substring","responseHandler","responseId","off","clearTimeout","timeoutId","isOnline","setTimeout","isConnected","disconnect"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/services/SignalingService.js"],"sourcesContent":["// File: services/WebRTC/SignalingService.js\n  import io from 'socket.io-client';\n  \n  /**\n   * Creates a signaling service instance\n   * @param {string} serverUrl - Signaling server URL\n   * @param {string} userId - Current user ID\n   * @param {function} eventHandler - Event handler function\n   * @returns {Object} - Signaling service instance\n   */\n  export function createSignalingService(serverUrl, userId, eventHandler) {\n    // Connect to the signaling server\n    const socket = io(serverUrl);\n    let connected = false;\n    \n    // Handle connection events\n    socket.on('connect', () => {\n      console.log('Connected to signaling server');\n      connected = true;\n      \n      // Register user ID with the signaling server\n      socket.emit('register', userId);\n    });\n    \n    socket.on('disconnect', () => {\n      console.log('Disconnected from signaling server');\n      connected = false;\n    });\n    \n    // Set up event listeners for signaling messages\n    socket.on('incoming-call', (data) => {\n      eventHandler('incoming-call', data);\n    });\n    \n    socket.on('call-answered', (data) => {\n      eventHandler('call-answered', data);\n    });\n    \n    socket.on('call-declined', () => {\n      eventHandler('call-declined');\n    });\n    \n    socket.on('call-in-progress', (data) => {\n      eventHandler('call-in-progress', data);\n    });\n    \n    socket.on('ice-candidate', (data) => {\n      eventHandler('ice-candidate', data);\n    });\n    \n    socket.on('call-ended', () => {\n      eventHandler('call-ended');\n    });\n    \n    socket.on('call-failed', (data) => {\n      eventHandler('call-failed', data);\n    });\n    \n    // Return the signaling service interface\n    return {\n      /**\n       * Send a message to the signaling server\n       * @param {string} event - Event name\n       * @param {Object} data - Event data\n       */\n      send: (event, data) => {\n        if (connected) {\n          socket.emit(event, data);\n        } else {\n          console.error('Cannot send message, not connected to signaling server');\n        }\n      },\n      \n      /**\n       * Check if a user is online\n       * @param {string} userId - User ID to check\n       * @returns {Promise<boolean>} - Whether the user is online\n       */\n      checkUserOnline: (userId) => {\n        return new Promise((resolve) => {\n          if (!connected) {\n            resolve(false);\n            return;\n          }\n          \n          // Create a unique request ID to match the response\n          const requestId = `online-check-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n          \n          console.log('Checking if user is online:', userId, 'with requestId:', requestId);\n          socket.emit('check-user-online', { userId, requestId });\n          \n          // Set up a one-time event listener for the response\n          const responseHandler = (data) => {\n            if (data.responseId === requestId && data.userId === userId) {\n              socket.off('user-online-status', responseHandler);\n              clearTimeout(timeoutId);\n              resolve(data.isOnline);\n            }\n          };\n          \n          socket.on('user-online-status', responseHandler);\n          \n          // Set a timeout in case we never get a response\n          const timeoutId = setTimeout(() => {\n            socket.off('user-online-status', responseHandler);\n            console.log('User online check timed out for:', userId);\n            resolve(false);\n          }, 5000);\n        });\n      },\n      \n      /**\n       * Check if connected to the signaling server\n       * @returns {boolean} - Whether connected\n       */\n      isConnected: () => connected,\n      \n      /**\n       * Disconnect from the signaling server\n       */\n      disconnect: () => {\n        if (connected) {\n          socket.disconnect();\n          connected = false;\n        }\n      }\n    };\n  }"],"mappings":"AAAA;AACE,OAAOA,EAAE,MAAM,kBAAkB;;AAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACE,OAAO,SAASC,sBAAsBA,CAACC,SAAS,EAAEC,MAAM,EAAEC,YAAY,EAAE;EACtE;EACA,MAAMC,MAAM,GAAGL,EAAE,CAACE,SAAS,CAAC;EAC5B,IAAII,SAAS,GAAG,KAAK;;EAErB;EACAD,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5CH,SAAS,GAAG,IAAI;;IAEhB;IACAD,MAAM,CAACK,IAAI,CAAC,UAAU,EAAEP,MAAM,CAAC;EACjC,CAAC,CAAC;EAEFE,MAAM,CAACE,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjDH,SAAS,GAAG,KAAK;EACnB,CAAC,CAAC;;EAEF;EACAD,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGI,IAAI,IAAK;IACnCP,YAAY,CAAC,eAAe,EAAEO,IAAI,CAAC;EACrC,CAAC,CAAC;EAEFN,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGI,IAAI,IAAK;IACnCP,YAAY,CAAC,eAAe,EAAEO,IAAI,CAAC;EACrC,CAAC,CAAC;EAEFN,MAAM,CAACE,EAAE,CAAC,eAAe,EAAE,MAAM;IAC/BH,YAAY,CAAC,eAAe,CAAC;EAC/B,CAAC,CAAC;EAEFC,MAAM,CAACE,EAAE,CAAC,kBAAkB,EAAGI,IAAI,IAAK;IACtCP,YAAY,CAAC,kBAAkB,EAAEO,IAAI,CAAC;EACxC,CAAC,CAAC;EAEFN,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGI,IAAI,IAAK;IACnCP,YAAY,CAAC,eAAe,EAAEO,IAAI,CAAC;EACrC,CAAC,CAAC;EAEFN,MAAM,CAACE,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BH,YAAY,CAAC,YAAY,CAAC;EAC5B,CAAC,CAAC;EAEFC,MAAM,CAACE,EAAE,CAAC,aAAa,EAAGI,IAAI,IAAK;IACjCP,YAAY,CAAC,aAAa,EAAEO,IAAI,CAAC;EACnC,CAAC,CAAC;;EAEF;EACA,OAAO;IACL;AACN;AACA;AACA;AACA;IACMC,IAAI,EAAEA,CAACC,KAAK,EAAEF,IAAI,KAAK;MACrB,IAAIL,SAAS,EAAE;QACbD,MAAM,CAACK,IAAI,CAACG,KAAK,EAAEF,IAAI,CAAC;MAC1B,CAAC,MAAM;QACLH,OAAO,CAACM,KAAK,CAAC,wDAAwD,CAAC;MACzE;IACF,CAAC;IAED;AACN;AACA;AACA;AACA;IACMC,eAAe,EAAGZ,MAAM,IAAK;MAC3B,OAAO,IAAIa,OAAO,CAAEC,OAAO,IAAK;QAC9B,IAAI,CAACX,SAAS,EAAE;UACdW,OAAO,CAAC,KAAK,CAAC;UACd;QACF;;QAEA;QACA,MAAMC,SAAS,GAAG,gBAAgBC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QAE5FhB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEN,MAAM,EAAE,iBAAiB,EAAEe,SAAS,CAAC;QAChFb,MAAM,CAACK,IAAI,CAAC,mBAAmB,EAAE;UAAEP,MAAM;UAAEe;QAAU,CAAC,CAAC;;QAEvD;QACA,MAAMO,eAAe,GAAId,IAAI,IAAK;UAChC,IAAIA,IAAI,CAACe,UAAU,KAAKR,SAAS,IAAIP,IAAI,CAACR,MAAM,KAAKA,MAAM,EAAE;YAC3DE,MAAM,CAACsB,GAAG,CAAC,oBAAoB,EAAEF,eAAe,CAAC;YACjDG,YAAY,CAACC,SAAS,CAAC;YACvBZ,OAAO,CAACN,IAAI,CAACmB,QAAQ,CAAC;UACxB;QACF,CAAC;QAEDzB,MAAM,CAACE,EAAE,CAAC,oBAAoB,EAAEkB,eAAe,CAAC;;QAEhD;QACA,MAAMI,SAAS,GAAGE,UAAU,CAAC,MAAM;UACjC1B,MAAM,CAACsB,GAAG,CAAC,oBAAoB,EAAEF,eAAe,CAAC;UACjDjB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEN,MAAM,CAAC;UACvDc,OAAO,CAAC,KAAK,CAAC;QAChB,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;IACJ,CAAC;IAED;AACN;AACA;AACA;IACMe,WAAW,EAAEA,CAAA,KAAM1B,SAAS;IAE5B;AACN;AACA;IACM2B,UAAU,EAAEA,CAAA,KAAM;MAChB,IAAI3B,SAAS,EAAE;QACbD,MAAM,CAAC4B,UAAU,CAAC,CAAC;QACnB3B,SAAS,GAAG,KAAK;MACnB;IACF;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}