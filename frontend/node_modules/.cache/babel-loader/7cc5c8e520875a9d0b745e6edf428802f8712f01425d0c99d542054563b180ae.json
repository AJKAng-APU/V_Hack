{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\n// Fixed VideoCallScreen.jsx with improved state management\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre4;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n\n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n\n  // Enhanced logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n\n  // Enhanced state synchronization with WebRTC service\n  const syncWithWebRTCState = () => {\n    var _remoteVideoRef$curre;\n    if (webRTCService.isCallActive() && callStatus !== 'active') {\n      log('Force syncing state: WebRTC reports active but UI shows ' + callStatus);\n      setCallStatus('active');\n    }\n    if (webRTCService.hasRemoteStream() && callStatus !== 'active') {\n      log('Remote stream detected, forcing active state');\n      setCallStatus('active');\n    }\n    if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject && remoteVideoRef.current.srcObject.getTracks().length > 0 && callStatus !== 'active') {\n      log('Video tracks detected, forcing active state');\n      setCallStatus('active');\n      setStreamReady(true);\n    }\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n\n    // Set up callbacks\n    const callbacks = {\n      onLocalStream: stream => {\n        log(`Got local stream with ${stream.getTracks().length} tracks`);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          log('Set local video source');\n        }\n      },\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n\n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state changed to: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    }\n\n    // Set up state checker - checks every second if WebRTC and UI states are in sync\n    stateCheckerInterval.current = setInterval(() => {\n      syncWithWebRTCState();\n    }, 1000);\n\n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}, current UI state: ${callStatus}`);\n\n      // Never go backwards from active to connecting\n      if (state === 'active' || state === 'connecting' && callStatus !== 'active') {\n        log(`Updating UI state from ${callStatus} to ${state}`);\n        setCallStatus(state);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n      }\n    });\n\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', error => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      if (error.fatal) {\n        setCallStatus('ended');\n      }\n    });\n\n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      setStreamReady(true);\n    });\n\n    // Set up mouse movement tracker for controls\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(mouseMoveTimer);\n        mouseMoveTimer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    let mouseMoveTimer;\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n      }\n    }, 1000);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren, _remoteVideoRef$curre2;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(mouseMoveTimer);\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre2 = remoteVideoRef.current) !== null && _remoteVideoRef$curre2 !== void 0 && _remoteVideoRef$curre2.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    var _remoteVideoRef$curre3;\n    if ((_remoteVideoRef$curre3 = remoteVideoRef.current) !== null && _remoteVideoRef$curre3 !== void 0 && _remoteVideoRef$curre3.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          setStreamReady(true);\n          return true;\n        }\n        return false;\n      };\n      if (checkForTracks()) return; // Tracks already present\n\n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n      };\n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n\n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) {\n        // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [(_remoteVideoRef$curre4 = remoteVideoRef.current) === null || _remoteVideoRef$curre4 === void 0 ? void 0 : _remoteVideoRef$curre4.srcObject]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Using the improved VideoDisplay component for active call\n      _jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        callStatus: callStatus,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"FGUGPYj1J6TtjLdTUl+kImaUHWs=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","VideoDisplay","Users","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre4","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","streamReady","setStreamReady","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","stateCheckerInterval","log","message","console","toggleVideo","videoOff","mediaManager","hasLocalStream","handleEndCall","endCall","syncWithWebRTCState","_remoteVideoRef$curre","isCallActive","hasRemoteStream","current","srcObject","getTracks","length","name","callbacks","onLocalStream","stream","onRemoteStream","muted","clearInterval","setInterval","prev","onCallStarted","onCallEnded","setTimeout","onICEConnectionStateChange","state","updateCallbacks","getLocalMedia","catch","error","unsubscribeCallState","on","unsubscribeError","fatal","unsubscribeTrackAdded","handleMouseMove","now","Date","clearTimeout","mouseMoveTimer","window","addEventListener","_localVideoRef$curren","_remoteVideoRef$curre2","removeEventListener","forEach","track","stop","toggleAudio","formatTime","seconds","mins","Math","floor","secs","toString","padStart","_remoteVideoRef$curre3","checkForTracks","tracks","handleCanPlay","handleLoadedMetadata","readyState","play","e","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["// Fixed VideoCallScreen.jsx with improved state management\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  \n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  \n  // Enhanced logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n  \n  // Enhanced state synchronization with WebRTC service\n  const syncWithWebRTCState = () => {\n    if (webRTCService.isCallActive() && callStatus !== 'active') {\n      log('Force syncing state: WebRTC reports active but UI shows ' + callStatus);\n      setCallStatus('active');\n    }\n    \n    if (webRTCService.hasRemoteStream() && callStatus !== 'active') {\n      log('Remote stream detected, forcing active state');\n      setCallStatus('active');\n    }\n    \n    if (remoteVideoRef.current?.srcObject && \n        remoteVideoRef.current.srcObject.getTracks().length > 0 && \n        callStatus !== 'active') {\n      log('Video tracks detected, forcing active state');\n      setCallStatus('active');\n      setStreamReady(true);\n    }\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    \n    // Set up callbacks\n    const callbacks = {\n      onLocalStream: (stream) => {\n        log(`Got local stream with ${stream.getTracks().length} tracks`);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          log('Set local video source');\n        }\n      },\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n          \n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state changed to: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    }\n    \n    // Set up state checker - checks every second if WebRTC and UI states are in sync\n    stateCheckerInterval.current = setInterval(() => {\n      syncWithWebRTCState();\n    }, 1000);\n    \n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}, current UI state: ${callStatus}`);\n      \n      // Never go backwards from active to connecting\n      if (state === 'active' || (state === 'connecting' && callStatus !== 'active')) {\n        log(`Updating UI state from ${callStatus} to ${state}`);\n        setCallStatus(state);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n      }\n    });\n    \n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', (error) => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      \n      if (error.fatal) {\n        setCallStatus('ended');\n      }\n    });\n    \n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      setStreamReady(true);\n    });\n    \n    // Set up mouse movement tracker for controls\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(mouseMoveTimer);\n        mouseMoveTimer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    let mouseMoveTimer;\n    window.addEventListener('mousemove', handleMouseMove);\n    \n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n      }\n    }, 1000);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      \n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      \n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(mouseMoveTimer);\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    if (remoteVideoRef.current?.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          setStreamReady(true);\n          return true;\n        }\n        return false;\n      };\n      \n      if (checkForTracks()) return; // Tracks already present\n      \n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n      };\n      \n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      \n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n      \n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) { // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      \n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          // Using the improved VideoDisplay component for active call\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n            callStatus={callStatus}\n          >\n            {/* Render header and connection status inside VideoDisplay */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls}\n            />\n          </VideoDisplay>\n        )}\n        \n        {/* Controls - always visible */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}