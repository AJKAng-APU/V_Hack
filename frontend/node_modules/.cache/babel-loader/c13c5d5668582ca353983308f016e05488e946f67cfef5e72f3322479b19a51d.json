{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users, Clock, Pin, PinOff } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre3;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  const [timerRunning, setTimerRunning] = useState(false);\n\n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n\n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null);\n  const controlFadeTimerRef = useRef(null);\n\n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n\n    // When call becomes active, start the timer if not already running\n    if (callStatus === 'active' && !timerRunning) {\n      startCallTimer();\n    }\n  }, [callStatus, timerRunning]);\n\n  // Enhanced logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // Start call timer with proper safeguards\n  const startCallTimer = () => {\n    log('Starting call duration timer');\n\n    // Clear any existing timer first\n    if (callDurationTimer.current) {\n      clearInterval(callDurationTimer.current);\n    }\n\n    // Start the timer\n    callDurationTimer.current = setInterval(() => {\n      setCallDuration(prev => prev + 1);\n    }, 1000);\n    setTimerRunning(true);\n\n    // For debugging - log every few seconds to confirm timer is running\n    const debugInterval = setInterval(() => {\n      log(`Timer check: duration=${callDuration}s`);\n    }, 5000);\n\n    // Clean up debug interval when call ends\n    return () => clearInterval(debugInterval);\n  };\n\n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      log(`Remote video has ${tracks.length} tracks`);\n      if (tracks.length > 0) {\n        log('Tracks detected, should force active UI state');\n        shouldSetActive = true;\n\n        // Try to play the video if paused\n        if (remoteVideoRef.current.paused) {\n          log('Video is paused, attempting to play');\n          remoteVideoRef.current.play().catch(e => {\n            log(`Auto-play failed: ${e.message}`);\n          });\n        }\n      }\n    }\n\n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n\n    // Check for connection manager remote stream\n    if (webRTCService.hasRemoteStream && webRTCService.hasRemoteStream()) {\n      log('WebRTC has remote stream, should force active state');\n      shouldSetActive = true;\n    }\n\n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n\n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && Date.now() - activeSinceRef.current > 5000) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n\n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n\n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n\n      // Start the timer if not already running\n      if (!timerRunning) {\n        startCallTimer();\n      }\n    }\n\n    // ADDED: Check local video and ensure it's displaying\n    if (localVideoRef.current && webRTCService.mediaManager.hasLocalStream()) {\n      if (!localVideoRef.current.srcObject) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        localVideoRef.current.play().catch(e => log(`Local play error: ${e.message}`));\n      }\n    }\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n\n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    const newValue = !alwaysShowControls;\n    setAlwaysShowControls(newValue);\n    if (newValue) {\n      // If enabling always show, make sure controls are visible\n      setShowControls(true);\n\n      // Clear any hide timer\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n        mouseMoveTimerRef.current = null;\n      }\n      if (controlFadeTimerRef.current) {\n        clearTimeout(controlFadeTimerRef.current);\n        controlFadeTimerRef.current = null;\n      }\n    }\n\n    // Optionally save preference\n    try {\n      localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n    } catch (e) {\n      // Ignore storage errors\n    }\n  };\n\n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n\n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n\n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n    setCallDuration(0);\n    setTimerRunning(false);\n\n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = stream => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n\n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n\n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n\n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n\n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n\n          // Start call timer - critical for both sides to get timer updates\n          startCallTimer();\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Make sure controls are visible when call starts\n        setShowControls(true);\n\n        // Start call timer if not already started\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n          setTimerRunning(false);\n        }\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state changed to: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).then(stream => {\n        log(`Local media access granted with ${stream.getTracks().length} tracks`);\n        // Explicitly set local video source here as well for redundancy\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n\n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n\n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [setTimeout(() => forceVideoStateCheck(), 2000), setTimeout(() => forceVideoStateCheck(), 5000), setTimeout(() => forceVideoStateCheck(), 8000),\n    // Force active state after 10 seconds\n    setTimeout(() => {\n      if (callStatusRef.current === 'connecting') {\n        log('10 seconds passed, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Show controls again when forcing active state\n        setShowControls(true);\n\n        // Ensure timer is started\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      }\n    }, 10000)];\n\n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n\n      // Never go backwards from active to connecting\n      if (state === 'active' || state === 'connecting' && callStatusRef.current !== 'active') {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n\n        // Show controls on state change\n        setShowControls(true);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', error => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n\n      // Show controls during errors\n      setShowControls(true);\n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n\n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n\n      // Show controls when tracks are added\n      setShowControls(true);\n\n      // Ensure timer is started\n      if (!timerRunning) {\n        startCallTimer();\n      }\n    });\n\n    // Enhanced mouse/touch activity handler with immediate response\n    const handleUserActivity = () => {\n      // Always show controls immediately on any user interaction\n      if (!showControls) {\n        setShowControls(true);\n      }\n\n      // Record the time of last movement\n      lastMoveTimeRef.current = Date.now();\n\n      // If set to always show controls, don't set up hide timer\n      if (alwaysShowControls) {\n        return;\n      }\n\n      // Clear any existing timers\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      if (controlFadeTimerRef.current) {\n        clearTimeout(controlFadeTimerRef.current);\n      }\n\n      // Set up a new timer to hide controls after inactivity\n      mouseMoveTimerRef.current = setTimeout(() => {\n        // Only hide if not in \"always show\" mode and in active call state\n        if (!alwaysShowControls && callStatusRef.current === 'active') {\n          setShowControls(false);\n        }\n      }, 8000); // 8 seconds of inactivity before hiding\n    };\n\n    // Set up multiple event listeners for better responsiveness\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('mousedown', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n\n    // Double-tap handler for mobile to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = e => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n\n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      lastTapTime = now;\n    };\n    window.addEventListener('touchend', handleDoubleTap);\n\n    // Initial showing of controls\n    setShowControls(true);\n\n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls after forcing active\n        setShowControls(true);\n\n        // Ensure timer is started\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      }\n    }, 1000);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren, _remoteVideoRef$curre;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('mousedown', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      if (controlFadeTimerRef.current) {\n        clearTimeout(controlFadeTimerRef.current);\n      }\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n        setTimerRunning(false);\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls, timerRunning]);\n\n  // Additional effect specifically for timer maintenance\n  useEffect(() => {\n    // When call becomes active, ensure timer is started\n    if (callStatus === 'active' && !timerRunning && !callDurationTimer.current) {\n      log('Timer not running for active call - starting now');\n      startCallTimer();\n    }\n\n    // When call ends, clear timer\n    if (callStatus === 'ended' && callDurationTimer.current) {\n      log('Call ended - clearing timer');\n      clearInterval(callDurationTimer.current);\n      callDurationTimer.current = null;\n      setTimerRunning(false);\n    }\n\n    // Cleanup\n    return () => {\n      if (callStatus === 'ended' && callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n        setTimerRunning(false);\n      }\n    };\n  }, [callStatus, timerRunning]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    var _remoteVideoRef$curre2;\n    if ((_remoteVideoRef$curre2 = remoteVideoRef.current) !== null && _remoteVideoRef$curre2 !== void 0 && _remoteVideoRef$curre2.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n\n          // Show controls when tracks are detected\n          setShowControls(true);\n\n          // Start timer if not running\n          if (!timerRunning) {\n            startCallTimer();\n          }\n          return true;\n        }\n        return false;\n      };\n      if (checkForTracks()) return; // Tracks already present\n\n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls when video can play\n        setShowControls(true);\n\n        // Start timer if not running\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      };\n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n\n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) {\n        // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [(_remoteVideoRef$curre3 = remoteVideoRef.current) === null || _remoteVideoRef$curre3 === void 0 ? void 0 : _remoteVideoRef$curre3.srcObject, timerRunning]);\n\n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Make sure controls are visible\n        setShowControls(true);\n\n        // Start timer if not running\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      }, 15000); // Force active after 15 seconds max\n\n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus, timerRunning]);\n\n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n\n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n\n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Using the improved VideoDisplay component for active call\n      _jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        callStatus: callStatus,\n        forceActiveState: forceActiveRef.current,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls || connectionQuality !== 'good' // Always show when connection is not good\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`,\n          style: {\n            zIndex: 500\n          },\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute top-16 right-4 px-2 py-1 rounded-full transition-all duration-300 cursor-pointer ${showControls ? 'opacity-100' : 'opacity-0'}`,\n          style: {\n            backgroundColor: alwaysShowControls ? 'rgba(0, 200, 100, 0.6)' : 'rgba(100, 100, 100, 0.6)',\n            backdropFilter: 'blur(4px)',\n            zIndex: 500\n          },\n          onClick: toggleAlwaysShowControls,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [alwaysShowControls ? /*#__PURE__*/_jsxDEV(Pin, {\n              size: 16,\n              className: \"text-white mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(PinOff, {\n              size: 16,\n              className: \"text-white mr-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 830,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs text-white font-medium\",\n              children: alwaysShowControls ? 'Controls Locked' : 'Lock Controls'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 832,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute bottom-32 left-0 right-0 flex justify-center transition-opacity duration-500 ${showControls && !alwaysShowControls ? 'opacity-50' : 'opacity-0'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-3 py-1 bg-black bg-opacity-50 rounded-full text-xs text-white\",\n          children: \"Double-tap to lock controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 762,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"QZThxNjOiWZ5uaRpXE4zsqkGUaI=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","VideoDisplay","Users","Clock","Pin","PinOff","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre3","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","alwaysShowControls","setAlwaysShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","streamReady","setStreamReady","timerRunning","setTimerRunning","forceActiveRef","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","stateCheckerInterval","stateCheckTimeouts","activeSinceRef","callStatusRef","mouseMoveTimerRef","controlFadeTimerRef","current","startCallTimer","log","message","console","clearInterval","setInterval","prev","debugInterval","forceVideoStateCheck","shouldSetActive","srcObject","tracks","getTracks","length","paused","play","catch","e","isCallActive","hasRemoteStream","Date","now","mediaManager","hasLocalStream","localStream","toggleVideo","videoOff","toggleAlwaysShowControls","newValue","clearTimeout","localStorage","setItem","savedPreference","getItem","handleEndCall","endCall","formatTime","seconds","mins","Math","floor","secs","toString","padStart","name","handleLocalStream","stream","err","setTimeout","callbacks","onLocalStream","onRemoteStream","muted","onCallStarted","onCallEnded","onICEConnectionStateChange","state","updateCallbacks","getLocalMedia","then","error","unsubscribeCallState","on","unsubscribeError","fatal","unsubscribeTrackAdded","handleUserActivity","window","addEventListener","lastTapTime","handleDoubleTap","DOUBLE_TAP_THRESHOLD","preventDefault","_localVideoRef$curren","_remoteVideoRef$curre","forEach","timeout","removeEventListener","track","stop","toggleAudio","_remoteVideoRef$curre2","checkForTracks","handleCanPlay","handleLoadedMetadata","readyState","checkTimer","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","forceActiveState","zIndex","onClick","size","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users, Clock, Pin, PinOff } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  const [timerRunning, setTimerRunning] = useState(false);\n  \n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n  \n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null);\n  const controlFadeTimerRef = useRef(null);\n  \n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n    \n    // When call becomes active, start the timer if not already running\n    if (callStatus === 'active' && !timerRunning) {\n      startCallTimer();\n    }\n  }, [callStatus, timerRunning]);\n  \n  // Enhanced logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // Start call timer with proper safeguards\n  const startCallTimer = () => {\n    log('Starting call duration timer');\n    \n    // Clear any existing timer first\n    if (callDurationTimer.current) {\n      clearInterval(callDurationTimer.current);\n    }\n    \n    // Start the timer\n    callDurationTimer.current = setInterval(() => {\n      setCallDuration(prev => prev + 1);\n    }, 1000);\n    \n    setTimerRunning(true);\n    \n    // For debugging - log every few seconds to confirm timer is running\n    const debugInterval = setInterval(() => {\n      log(`Timer check: duration=${callDuration}s`);\n    }, 5000);\n    \n    // Clean up debug interval when call ends\n    return () => clearInterval(debugInterval);\n  };\n  \n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    \n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    \n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const tracks = remoteVideoRef.current.srcObject.getTracks();\n      log(`Remote video has ${tracks.length} tracks`);\n      \n      if (tracks.length > 0) {\n        log('Tracks detected, should force active UI state');\n        shouldSetActive = true;\n        \n        // Try to play the video if paused\n        if (remoteVideoRef.current.paused) {\n          log('Video is paused, attempting to play');\n          remoteVideoRef.current.play().catch(e => {\n            log(`Auto-play failed: ${e.message}`);\n          });\n        }\n      }\n    }\n    \n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n    \n    // Check for connection manager remote stream\n    if (webRTCService.hasRemoteStream && webRTCService.hasRemoteStream()) {\n      log('WebRTC has remote stream, should force active state');\n      shouldSetActive = true;\n    }\n    \n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n    \n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && (Date.now() - activeSinceRef.current > 5000)) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n    \n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n      \n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n      \n      // Start the timer if not already running\n      if (!timerRunning) {\n        startCallTimer();\n      }\n    }\n\n    // ADDED: Check local video and ensure it's displaying\n    if (localVideoRef.current && webRTCService.mediaManager.hasLocalStream()) {\n      if (!localVideoRef.current.srcObject) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        localVideoRef.current.play().catch(e => log(`Local play error: ${e.message}`));\n      }\n    }\n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n  \n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    const newValue = !alwaysShowControls;\n    setAlwaysShowControls(newValue);\n    \n    if (newValue) {\n      // If enabling always show, make sure controls are visible\n      setShowControls(true);\n      \n      // Clear any hide timer\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n        mouseMoveTimerRef.current = null;\n      }\n      \n      if (controlFadeTimerRef.current) {\n        clearTimeout(controlFadeTimerRef.current);\n        controlFadeTimerRef.current = null;\n      }\n    }\n    \n    // Optionally save preference\n    try {\n      localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n    } catch (e) {\n      // Ignore storage errors\n    }\n  };\n  \n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n    \n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n    setCallDuration(0);\n    setTimerRunning(false);\n    \n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = (stream) => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n        \n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n        \n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            \n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n    \n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n          \n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n          \n          // Start call timer - critical for both sides to get timer updates\n          startCallTimer();\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Make sure controls are visible when call starts\n        setShowControls(true);\n        \n        // Start call timer if not already started\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n          setTimerRunning(false);\n        }\n        \n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state changed to: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .then(stream => {\n          log(`Local media access granted with ${stream.getTracks().length} tracks`);\n          // Explicitly set local video source here as well for redundancy\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n          }\n        })\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n    \n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n    \n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [\n      setTimeout(() => forceVideoStateCheck(), 2000),\n      setTimeout(() => forceVideoStateCheck(), 5000),\n      setTimeout(() => forceVideoStateCheck(), 8000),\n      // Force active state after 10 seconds\n      setTimeout(() => {\n        if (callStatusRef.current === 'connecting') {\n          log('10 seconds passed, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          forceActiveRef.current = true;\n          \n          // Show controls again when forcing active state\n          setShowControls(true);\n          \n          // Ensure timer is started\n          if (!timerRunning) {\n            startCallTimer();\n          }\n        }\n      }, 10000)\n    ];\n    \n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n      \n      // Never go backwards from active to connecting\n      if (state === 'active' || (state === 'connecting' && callStatusRef.current !== 'active')) {\n        log(`Updating UI state from ${callStatusRef.current} to ${state}`);\n        setCallStatus(state);\n        callStatusRef.current = state;\n        \n        // Show controls on state change\n        setShowControls(true);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', (error) => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      \n      // Show controls during errors\n      setShowControls(true);\n      \n      if (error.fatal) {\n        setCallStatus('ended');\n        callStatusRef.current = 'ended';\n      }\n    });\n    \n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n      \n      // Show controls when tracks are added\n      setShowControls(true);\n      \n      // Ensure timer is started\n      if (!timerRunning) {\n        startCallTimer();\n      }\n    });\n    \n    // Enhanced mouse/touch activity handler with immediate response\n    const handleUserActivity = () => {\n      // Always show controls immediately on any user interaction\n      if (!showControls) {\n        setShowControls(true);\n      }\n      \n      // Record the time of last movement\n      lastMoveTimeRef.current = Date.now();\n      \n      // If set to always show controls, don't set up hide timer\n      if (alwaysShowControls) {\n        return;\n      }\n      \n      // Clear any existing timers\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      if (controlFadeTimerRef.current) {\n        clearTimeout(controlFadeTimerRef.current);\n      }\n      \n      // Set up a new timer to hide controls after inactivity\n      mouseMoveTimerRef.current = setTimeout(() => {\n        // Only hide if not in \"always show\" mode and in active call state\n        if (!alwaysShowControls && callStatusRef.current === 'active') {\n          setShowControls(false);\n        }\n      }, 8000); // 8 seconds of inactivity before hiding\n    };\n    \n    // Set up multiple event listeners for better responsiveness\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('mousedown', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n    window.addEventListener('keydown', handleUserActivity);\n    \n    // Double-tap handler for mobile to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = (e) => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n      \n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      \n      lastTapTime = now;\n    };\n    \n    window.addEventListener('touchend', handleDoubleTap);\n    \n    // Initial showing of controls\n    setShowControls(true);\n    \n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls after forcing active\n        setShowControls(true);\n        \n        // Ensure timer is started\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      }\n    }, 1000);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      \n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      \n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      \n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('mousedown', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('keydown', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      \n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      if (controlFadeTimerRef.current) {\n        clearTimeout(controlFadeTimerRef.current);\n      }\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n        setTimerRunning(false);\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls, timerRunning]);\n  \n  // Additional effect specifically for timer maintenance\n  useEffect(() => {\n    // When call becomes active, ensure timer is started\n    if (callStatus === 'active' && !timerRunning && !callDurationTimer.current) {\n      log('Timer not running for active call - starting now');\n      startCallTimer();\n    }\n    \n    // When call ends, clear timer\n    if (callStatus === 'ended' && callDurationTimer.current) {\n      log('Call ended - clearing timer');\n      clearInterval(callDurationTimer.current);\n      callDurationTimer.current = null;\n      setTimerRunning(false);\n    }\n    \n    // Cleanup\n    return () => {\n      if (callStatus === 'ended' && callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n        setTimerRunning(false);\n      }\n    };\n  }, [callStatus, timerRunning]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    if (remoteVideoRef.current?.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n          \n          // Show controls when tracks are detected\n          setShowControls(true);\n          \n          // Start timer if not running\n          if (!timerRunning) {\n            startCallTimer();\n          }\n          return true;\n        }\n        return false;\n      };\n      \n      if (checkForTracks()) return; // Tracks already present\n      \n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls when video can play\n        setShowControls(true);\n        \n        // Start timer if not running\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      };\n      \n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      \n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n      \n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) { // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      \n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [remoteVideoRef.current?.srcObject, timerRunning]);\n  \n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n        \n        // Make sure controls are visible\n        setShowControls(true);\n        \n        // Start timer if not running\n        if (!timerRunning) {\n          startCallTimer();\n        }\n      }, 15000); // Force active after 15 seconds max\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus, timerRunning]);\n  \n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        \n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n      \n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && \n            (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      \n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          // Using the improved VideoDisplay component for active call\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n            callStatus={callStatus}\n            forceActiveState={forceActiveRef.current}\n            callDuration={callDuration}\n            formatTime={formatTime}\n          >\n            {/* Render header and connection status inside VideoDisplay */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls || connectionQuality !== 'good'} // Always show when connection is not good\n            />\n            \n            {/* Active call visual indicator */}\n            <div \n              className={`absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`}\n              style={{ zIndex: 500 }}\n            >\n              Active\n            </div>\n            \n            {/* Always-show controls toggle button - updated with icon */}\n            <div \n              className={`absolute top-16 right-4 px-2 py-1 rounded-full transition-all duration-300 cursor-pointer ${showControls ? 'opacity-100' : 'opacity-0'}`}\n              style={{ \n                backgroundColor: alwaysShowControls ? \n                  'rgba(0, 200, 100, 0.6)' : 'rgba(100, 100, 100, 0.6)',\n                backdropFilter: 'blur(4px)',\n                zIndex: 500\n              }}\n              onClick={toggleAlwaysShowControls}\n            >\n              <div className=\"flex items-center\">\n                {alwaysShowControls ? (\n                  <Pin size={16} className=\"text-white mr-1\" />\n                ) : (\n                  <PinOff size={16} className=\"text-white mr-1\" />\n                )}\n                <span className=\"text-xs text-white font-medium\">\n                  {alwaysShowControls ? 'Controls Locked' : 'Lock Controls'}\n                </span>\n              </div>\n            </div>\n          </VideoDisplay>\n        )}\n        \n        {/* Controls - with improved visibility and state handling */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n        \n        {/* Instructions for touch devices */}\n        <div \n          className={`absolute bottom-32 left-0 right-0 flex justify-center transition-opacity duration-500 ${\n            showControls && !alwaysShowControls ? 'opacity-50' : 'opacity-0'\n          }`}\n        >\n          <div className=\"px-3 py-1 bg-black bg-opacity-50 rounded-full text-xs text-white\">\n            Double-tap to lock controls\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}