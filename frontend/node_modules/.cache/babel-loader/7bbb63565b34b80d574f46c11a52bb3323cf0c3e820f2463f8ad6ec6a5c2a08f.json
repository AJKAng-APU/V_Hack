{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre6, _remoteVideoRef$curre7, _remoteVideoRef$curre9;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n\n  // New state to track queued video changes\n  const [videoToggleQueue, setVideoToggleQueue] = useState(null);\n\n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    console.log('Toggle video called with videoOff:', videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('Toggling video directly through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('Queueing video toggle for when stream is available');\n      setVideoToggleQueue(videoOff);\n      setIsVideoOff(videoOff); // Update UI immediately\n    }\n  };\n\n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('VideoCallScreen opened for doctor:', doctor.name);\n\n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: stream => {\n          console.log('Got local stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Local video stream set to element');\n          } else {\n            console.warn('localVideoRef is not available to set stream');\n          }\n\n          // Apply any queued video toggle\n          if (videoToggleQueue !== null) {\n            webRTCService.toggleVideo(videoToggleQueue);\n            setVideoToggleQueue(null);\n          }\n        },\n        onRemoteStream: stream => {\n          console.log('Got remote stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            console.log('Remote video stream set to element');\n\n            // Ensure volume is correct based on speaker state\n            remoteVideoRef.current.muted = isSpeakerOff;\n\n            // IMPORTANT: Force call to active state when we have remote media\n            if (callStatus === 'connecting' && stream.getTracks().length > 0) {\n              console.log('Remote media detected, forcing call to active state');\n              setCallStatus('active');\n\n              // Start call timer\n              if (callDurationTimer.current) {\n                clearInterval(callDurationTimer.current);\n              }\n              callDurationTimer.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n              }, 1000);\n            }\n          } else {\n            console.warn('remoteVideoRef is not available to set stream');\n          }\n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        onCallStarted: () => {\n          console.log('Call is now active');\n          setCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n\n          // Store peer connection reference for stats\n          if (webRTCService.connectionManager && webRTCService.connectionManager.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        },\n        onCallEnded: () => {\n          console.log('Call has ended');\n          setCallStatus('ended');\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        onCallConnecting: () => {\n          console.log('Call is connecting...');\n          setCallStatus('connecting');\n        },\n        onUserNotOnline: userId => {\n          console.log('User not online:', userId);\n          setErrorMessage('Doctor is not available right now');\n          setCallStatus('ended');\n          setTimeout(() => {\n            onClose();\n          }, 3000);\n        },\n        onICEConnectionStateChange: state => {\n          console.log('Connection state changed:', state);\n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n\n            // Attempt reconnection after ice connection failure\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              try {\n                webRTCService.attemptReconnection(true);\n              } catch (error) {\n                console.error('Failed to attempt reconnection:', error);\n              }\n            }\n          }\n        }\n      };\n\n      // Subscribe to call state changes\n      const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n        console.log('Call state changed to:', state);\n        setCallStatus(state);\n      });\n\n      // Subscribe to errors\n      const unsubscribeError = webRTCService.on('error', error => {\n        console.log('WebRTC error received:', error);\n        setErrorMessage(error.message || 'Something went wrong with the call');\n        if (error.fatal) {\n          setCallStatus('ended');\n        }\n      });\n      webRTCService.updateCallbacks(callbacks);\n\n      // Try to get local media access early if it hasn't been obtained yet\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('Requesting camera and microphone access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('Failed to get media access:', error);\n          setErrorMessage(`Camera/microphone access failed: ${error.message}`);\n        });\n      }\n      return () => {\n        console.log('Cleaning up video call resources');\n        unsubscribeCallState();\n        unsubscribeError();\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, videoToggleQueue]);\n\n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      // Monitor network stats instead of just audio levels\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            if (statsCount > 0) {\n              // Calculate connection quality based on multiple factors\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        return () => clearInterval(statsInterval);\n      };\n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n  useEffect(() => {\n    // This is a more aggressive remote stream detection\n    if (callStatus === 'connecting' && remoteVideoRef.current) {\n      // Create a MutationObserver to watch for changes to the video element\n      const observer = new MutationObserver(mutations => {\n        var _remoteVideoRef$curre, _remoteVideoRef$curre2;\n        if (((_remoteVideoRef$curre = remoteVideoRef.current) === null || _remoteVideoRef$curre === void 0 ? void 0 : (_remoteVideoRef$curre2 = _remoteVideoRef$curre.srcObject) === null || _remoteVideoRef$curre2 === void 0 ? void 0 : _remoteVideoRef$curre2.getTracks().length) > 0) {\n          console.log('OBSERVER: Remote video tracks detected, forcing active state');\n          setCallStatus('active');\n        }\n      });\n\n      // Start observing the video element\n      observer.observe(remoteVideoRef.current, {\n        attributes: true,\n        childList: false,\n        subtree: false\n      });\n\n      // Also set up a track listener on the remote stream\n      const checkForTracks = () => {\n        var _remoteVideoRef$curre3;\n        const stream = (_remoteVideoRef$curre3 = remoteVideoRef.current) === null || _remoteVideoRef$curre3 === void 0 ? void 0 : _remoteVideoRef$curre3.srcObject;\n        if (stream) {\n          const trackListener = () => {\n            console.log('TRACK LISTENER: New track added to remote stream');\n            if (callStatus === 'connecting') {\n              console.log('Forcing active state from track listener');\n              setCallStatus('active');\n            }\n          };\n\n          // Listen for track additions\n          stream.addEventListener('addtrack', trackListener);\n\n          // Also do an immediate check\n          if (stream.getTracks().length > 0 && callStatus === 'connecting') {\n            console.log('IMMEDIATE CHECK: Remote stream has tracks, forcing active state');\n            setCallStatus('active');\n          }\n          return () => {\n            stream.removeEventListener('addtrack', trackListener);\n          };\n        }\n      };\n      const cleanup = checkForTracks();\n\n      // Set up a backup timer that checks every 300ms\n      const forceCheckInterval = setInterval(() => {\n        var _remoteVideoRef$curre4, _remoteVideoRef$curre5;\n        if (callStatus === 'connecting' && ((_remoteVideoRef$curre4 = remoteVideoRef.current) === null || _remoteVideoRef$curre4 === void 0 ? void 0 : (_remoteVideoRef$curre5 = _remoteVideoRef$curre4.srcObject) === null || _remoteVideoRef$curre5 === void 0 ? void 0 : _remoteVideoRef$curre5.getTracks().length) > 0) {\n          console.log('INTERVAL CHECK: Remote video detected, forcing active state');\n          setCallStatus('active');\n        }\n      }, 300);\n      return () => {\n        observer.disconnect();\n        if (cleanup) cleanup();\n        clearInterval(forceCheckInterval);\n      };\n    }\n  }, [callStatus, (_remoteVideoRef$curre6 = remoteVideoRef.current) === null || _remoteVideoRef$curre6 === void 0 ? void 0 : _remoteVideoRef$curre6.srcObject]);\n\n  // Monitor remote stream for audio level changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const cleanup = monitorAudioLevel(remoteVideoRef.current.srcObject);\n      if (cleanup) setAudioMonitorCleanup(cleanup);\n    }\n  }, [(_remoteVideoRef$curre7 = remoteVideoRef.current) === null || _remoteVideoRef$curre7 === void 0 ? void 0 : _remoteVideoRef$curre7.srcObject]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Apply queued video toggle when stream becomes available\n  useEffect(() => {\n    if (videoToggleQueue !== null && webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('Applying queued video toggle:', videoToggleQueue);\n      webRTCService.toggleVideo(videoToggleQueue);\n      setVideoToggleQueue(null);\n    }\n  }, [webRTCService === null || webRTCService === void 0 ? void 0 : webRTCService.mediaManager.hasLocalStream(), videoToggleQueue]);\n\n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = stream => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            // Only downgrade to poor if not already poor from network stats\n            setConnectionQuality(prevQuality => prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n          // Don't automatically set to good here, defer to the stats-based quality\n        }\n      };\n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n\n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n\n  // Add after your existing useEffects in VideoCallScreen.jsx\n  useEffect(() => {\n    if (isOpen && doctor && callStatus === 'connecting') {\n      // Force check for remote media with a timeout\n      const forceActiveTimer = setTimeout(() => {\n        var _remoteVideoRef$curre8;\n        if (callStatus === 'connecting' && (_remoteVideoRef$curre8 = remoteVideoRef.current) !== null && _remoteVideoRef$curre8 !== void 0 && _remoteVideoRef$curre8.srcObject) {\n          console.log('FORCE CHECK: Remote video detected, forcing active state');\n          setCallStatus('active');\n        }\n      }, 2000);\n      return () => clearTimeout(forceActiveTimer);\n    }\n  }, [isOpen, doctor, callStatus]);\n  useEffect(() => {\n    // Force check if we have a remote stream but UI shows connecting\n    if (callStatus === 'connecting' && remoteVideoRef.current && remoteVideoRef.current.srcObject && remoteVideoRef.current.srcObject.getTracks().length > 0) {\n      console.log('Remote stream detected while UI shows connecting, forcing active state');\n      setCallStatus('active');\n    }\n  }, [callStatus, (_remoteVideoRef$curre9 = remoteVideoRef.current) === null || _remoteVideoRef$curre9 === void 0 ? void 0 : _remoteVideoRef$curre9.srcObject]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('User clicked end call button');\n    webRTCService.endCall(true);\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'connecting' && (!remoteVideoRef.current || !remoteVideoRef.current.srcObject || remoteVideoRef.current.srcObject.getTracks().length === 0) ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 7\n      }, this) : callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo // Use the new toggle function\n        ,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 532,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"jcAh5p2i85qlVLxvVBOvhWV+ZQs=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","VideoDisplay","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre6","_remoteVideoRef$curre7","_remoteVideoRef$curre9","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","audioMonitorCleanup","setAudioMonitorCleanup","videoToggleQueue","setVideoToggleQueue","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","peerConnectionRef","toggleVideo","videoOff","console","log","mediaManager","hasLocalStream","name","callbacks","onLocalStream","stream","getTracks","map","t","kind","join","current","srcObject","warn","onRemoteStream","muted","length","clearInterval","setInterval","prev","cleanup","monitorAudioLevel","onCallStarted","connectionManager","peerConnection","onCallEnded","setTimeout","onCallConnecting","onUserNotOnline","userId","onICEConnectionStateChange","state","attemptReconnection","error","unsubscribeCallState","on","unsubscribeError","message","fatal","updateCallbacks","getLocalMedia","catch","forEach","track","stop","endCall","monitorConnectionQuality","statsInterval","stats","getStats","packetLoss","jitter","roundTripTime","statsCount","report","type","packetsLost","packetsReceived","observer","MutationObserver","mutations","_remoteVideoRef$curre","_remoteVideoRef$curre2","observe","attributes","childList","subtree","checkForTracks","_remoteVideoRef$curre3","trackListener","addEventListener","removeEventListener","forceCheckInterval","_remoteVideoRef$curre4","_remoteVideoRef$curre5","disconnect","window","AudioContext","webkitAudioContext","audioContext","analyser","createAnalyser","microphone","createMediaStreamSource","javascriptNode","createScriptProcessor","connect","destination","lowAudioCounter","LOW_AUDIO_THRESHOLD","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","values","reduce","a","b","prevQuality","close","toggleAudio","handleKeyDown","e","key","handleEndCall","timer","handleMouseMove","now","Date","clearTimeout","forceActiveTimer","_remoteVideoRef$curre8","formatTime","seconds","mins","Math","floor","secs","toString","padStart","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","jsx","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  \n  // New state to track queued video changes\n  const [videoToggleQueue, setVideoToggleQueue] = useState(null);\n  \n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    console.log('Toggle video called with videoOff:', videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('Toggling video directly through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('Queueing video toggle for when stream is available');\n      setVideoToggleQueue(videoOff);\n      setIsVideoOff(videoOff); // Update UI immediately\n    }\n  };\n  \n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('VideoCallScreen opened for doctor:', doctor.name);\n      \n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: (stream) => {\n          console.log('Got local stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Local video stream set to element');\n          } else {\n            console.warn('localVideoRef is not available to set stream');\n          }\n          \n          // Apply any queued video toggle\n          if (videoToggleQueue !== null) {\n            webRTCService.toggleVideo(videoToggleQueue);\n            setVideoToggleQueue(null);\n          }\n        },\n        \n        onRemoteStream: (stream) => {\n          console.log('Got remote stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            console.log('Remote video stream set to element');\n            \n            // Ensure volume is correct based on speaker state\n            remoteVideoRef.current.muted = isSpeakerOff;\n            \n            // IMPORTANT: Force call to active state when we have remote media\n            if (callStatus === 'connecting' && stream.getTracks().length > 0) {\n              console.log('Remote media detected, forcing call to active state');\n              setCallStatus('active');\n              \n              // Start call timer\n              if (callDurationTimer.current) {\n                clearInterval(callDurationTimer.current);\n              }\n              \n              callDurationTimer.current = setInterval(() => {\n                setCallDuration(prev => prev + 1);\n              }, 1000);\n            }\n          } else {\n            console.warn('remoteVideoRef is not available to set stream');\n          }\n          \n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        \n        onCallStarted: () => {\n          console.log('Call is now active');\n          setCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n          \n          // Store peer connection reference for stats\n          if (webRTCService.connectionManager && webRTCService.connectionManager.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        },\n        \n        onCallEnded: () => {\n          console.log('Call has ended');\n          setCallStatus('ended');\n          \n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        \n        onCallConnecting: () => {\n          console.log('Call is connecting...');\n          setCallStatus('connecting');\n        },\n        \n        onUserNotOnline: (userId) => {\n          console.log('User not online:', userId);\n          setErrorMessage('Doctor is not available right now');\n          setCallStatus('ended');\n          \n          setTimeout(() => {\n            onClose();\n          }, 3000);\n        },\n        \n        onICEConnectionStateChange: (state) => {\n          console.log('Connection state changed:', state);\n          \n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n            \n            // Attempt reconnection after ice connection failure\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              try {\n                webRTCService.attemptReconnection(true);\n              } catch (error) {\n                console.error('Failed to attempt reconnection:', error);\n              }\n            }\n          }\n        }\n      };\n      \n      // Subscribe to call state changes\n      const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n        console.log('Call state changed to:', state);\n        setCallStatus(state);\n      });\n      \n      // Subscribe to errors\n      const unsubscribeError = webRTCService.on('error', (error) => {\n        console.log('WebRTC error received:', error);\n        setErrorMessage(error.message || 'Something went wrong with the call');\n        \n        if (error.fatal) {\n          setCallStatus('ended');\n        }\n      });\n      \n      webRTCService.updateCallbacks(callbacks);\n      \n      // Try to get local media access early if it hasn't been obtained yet\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('Requesting camera and microphone access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('Failed to get media access:', error);\n          setErrorMessage(`Camera/microphone access failed: ${error.message}`);\n        });\n      }\n      \n      return () => {\n        console.log('Cleaning up video call resources');\n        \n        unsubscribeCallState();\n        unsubscribeError();\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        \n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        \n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        \n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, videoToggleQueue]);\n  \n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      // Monitor network stats instead of just audio levels\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            \n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            \n            if (statsCount > 0) {\n              // Calculate connection quality based on multiple factors\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        \n        return () => clearInterval(statsInterval);\n      };\n      \n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n\n  useEffect(() => {\n    // This is a more aggressive remote stream detection\n    if (callStatus === 'connecting' && remoteVideoRef.current) {\n      // Create a MutationObserver to watch for changes to the video element\n      const observer = new MutationObserver((mutations) => {\n        if (remoteVideoRef.current?.srcObject?.getTracks().length > 0) {\n          console.log('OBSERVER: Remote video tracks detected, forcing active state');\n          setCallStatus('active');\n        }\n      });\n      \n      // Start observing the video element\n      observer.observe(remoteVideoRef.current, { \n        attributes: true, \n        childList: false, \n        subtree: false \n      });\n      \n      // Also set up a track listener on the remote stream\n      const checkForTracks = () => {\n        const stream = remoteVideoRef.current?.srcObject;\n        if (stream) {\n          const trackListener = () => {\n            console.log('TRACK LISTENER: New track added to remote stream');\n            if (callStatus === 'connecting') {\n              console.log('Forcing active state from track listener');\n              setCallStatus('active');\n            }\n          };\n          \n          // Listen for track additions\n          stream.addEventListener('addtrack', trackListener);\n          \n          // Also do an immediate check\n          if (stream.getTracks().length > 0 && callStatus === 'connecting') {\n            console.log('IMMEDIATE CHECK: Remote stream has tracks, forcing active state');\n            setCallStatus('active');\n          }\n          \n          return () => {\n            stream.removeEventListener('addtrack', trackListener);\n          };\n        }\n      };\n      \n      const cleanup = checkForTracks();\n      \n      // Set up a backup timer that checks every 300ms\n      const forceCheckInterval = setInterval(() => {\n        if (callStatus === 'connecting' && \n            remoteVideoRef.current?.srcObject?.getTracks().length > 0) {\n          console.log('INTERVAL CHECK: Remote video detected, forcing active state');\n          setCallStatus('active');\n        }\n      }, 300);\n      \n      return () => {\n        observer.disconnect();\n        if (cleanup) cleanup();\n        clearInterval(forceCheckInterval);\n      };\n    }\n  }, [callStatus, remoteVideoRef.current?.srcObject]);\n  \n  // Monitor remote stream for audio level changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const cleanup = monitorAudioLevel(remoteVideoRef.current.srcObject);\n      if (cleanup) setAudioMonitorCleanup(cleanup);\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Apply queued video toggle when stream becomes available\n  useEffect(() => {\n    if (videoToggleQueue !== null && webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('Applying queued video toggle:', videoToggleQueue);\n      webRTCService.toggleVideo(videoToggleQueue);\n      setVideoToggleQueue(null);\n    }\n  }, [webRTCService?.mediaManager.hasLocalStream(), videoToggleQueue]);\n  \n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = (stream) => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    \n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      \n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      \n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      \n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        \n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            // Only downgrade to poor if not already poor from network stats\n            setConnectionQuality(prevQuality => \n              prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n          // Don't automatically set to good here, defer to the stats-based quality\n        }\n      };\n      \n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n  \n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    \n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n\n  // Add after your existing useEffects in VideoCallScreen.jsx\n    useEffect(() => {\n      if (isOpen && doctor && callStatus === 'connecting') {\n        // Force check for remote media with a timeout\n        const forceActiveTimer = setTimeout(() => {\n          if (callStatus === 'connecting' && remoteVideoRef.current?.srcObject) {\n            console.log('FORCE CHECK: Remote video detected, forcing active state');\n            setCallStatus('active');\n          }\n        }, 2000);\n        \n        return () => clearTimeout(forceActiveTimer);\n      }\n    }, [isOpen, doctor, callStatus]);\n\n  useEffect(() => {\n    // Force check if we have a remote stream but UI shows connecting\n    if (callStatus === 'connecting' && \n        remoteVideoRef.current && \n        remoteVideoRef.current.srcObject &&\n        remoteVideoRef.current.srcObject.getTracks().length > 0) {\n      console.log('Remote stream detected while UI shows connecting, forcing active state');\n      setCallStatus('active');\n    }\n  }, [callStatus, remoteVideoRef.current?.srcObject]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('User clicked end call button');\n    webRTCService.endCall(true);\n  };\n      \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        \n      {(callStatus === 'connecting' && \n      (!remoteVideoRef.current || !remoteVideoRef.current.srcObject || remoteVideoRef.current.srcObject.getTracks().length === 0)) ? (\n      <ConnectingState doctor={doctor} colors={colors} />\n    ) : callStatus === 'ended' ? (\n      <EndedState \n        doctor={doctor}\n        errorMessage={errorMessage} \n        callDuration={callDuration} \n        formatTime={formatTime}\n        colors={colors}\n        isDarkMode={isDarkMode}\n      />\n    ) : (\n      <VideoDisplay\n        remoteVideoRef={remoteVideoRef}\n        localVideoRef={localVideoRef}\n        isSpeakerOff={isSpeakerOff}\n        isVideoOff={isVideoOff}\n        doctor={doctor}\n        connectionQuality={connectionQuality}\n        reconnectAttempt={reconnectAttempt}\n        showControls={showControls}\n        isDarkMode={isDarkMode}\n        colors={colors}\n      >\n        <CallHeader \n          doctor={doctor}\n          callDuration={callDuration}\n          formatTime={formatTime}\n          showControls={showControls}\n        />\n        \n        <ConnectionStatus\n          connectionQuality={connectionQuality}\n          showControls={showControls}\n        />\n      </VideoDisplay>\n    )}\n        \n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} // Use the new toggle function\n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n      </div>\n      \n      <style jsx>{`\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}