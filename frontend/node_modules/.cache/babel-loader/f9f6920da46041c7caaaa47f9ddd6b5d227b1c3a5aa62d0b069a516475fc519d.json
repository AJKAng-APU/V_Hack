{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n\n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n\n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('VideoCallScreen opened for doctor:', doctor.name);\n\n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: stream => {\n          console.log('Got local stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Local video stream set to element');\n          } else {\n            console.warn('localVideoRef is not available to set stream');\n          }\n        },\n        onRemoteStream: stream => {\n          console.log('Got remote stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            console.log('Remote video stream set to element');\n\n            // Ensure volume is correct based on speaker state\n            remoteVideoRef.current.muted = isSpeakerOff;\n          } else {\n            console.warn('remoteVideoRef is not available to set stream');\n          }\n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        onCallStarted: () => {\n          console.log('Call is now active');\n          setCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        },\n        onCallEnded: () => {\n          console.log('Call has ended');\n          setCallStatus('ended');\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        onCallConnecting: () => {\n          console.log('Call is connecting...');\n          setCallStatus('connecting');\n        },\n        onUserNotOnline: userId => {\n          console.log('User not online:', userId);\n          setErrorMessage('Doctor is not available right now');\n          setCallStatus('ended');\n          setTimeout(() => {\n            onClose();\n          }, 3000);\n        },\n        onICEConnectionStateChange: state => {\n          console.log('Connection state changed:', state);\n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n\n            // Attempt reconnection after ice connection failure\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              try {\n                webRTCService.attemptReconnection(true);\n              } catch (error) {\n                console.error('Failed to attempt reconnection:', error);\n              }\n            }\n          }\n        }\n      };\n\n      // Subscribe to call state changes\n      const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n        console.log('Call state changed to:', state);\n        setCallStatus(state);\n      });\n\n      // Subscribe to errors\n      const unsubscribeError = webRTCService.on('error', error => {\n        console.log('WebRTC error received:', error);\n        setErrorMessage(error.message || 'Something went wrong with the call');\n        if (error.fatal) {\n          setCallStatus('ended');\n        }\n      });\n      webRTCService.updateCallbacks(callbacks);\n\n      // Try to get local media access early if it hasn't been obtained yet\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('Requesting camera and microphone access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('Failed to get media access:', error);\n          setErrorMessage(`Camera/microphone access failed: ${error.message}`);\n        });\n      }\n      return () => {\n        console.log('Cleaning up video call resources');\n        unsubscribeCallState();\n        unsubscribeError();\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, isSpeakerOff]);\n\n  // Monitor remote stream for audio level changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const cleanup = monitorAudioLevel(remoteVideoRef.current.srcObject);\n      if (cleanup) setAudioMonitorCleanup(cleanup);\n    }\n  }, [(_remoteVideoRef$curre = remoteVideoRef.current) === null || _remoteVideoRef$curre === void 0 ? void 0 : _remoteVideoRef$curre.srcObject]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = stream => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        if (values < 5 && callStatus === 'active') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            setConnectionQuality('poor');\n          }\n        } else {\n          lowAudioCounter = 0;\n          if (callStatus === 'active') {\n            setConnectionQuality('good');\n          }\n        }\n      };\n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n\n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('User clicked end call button');\n    webRTCService.endCall(true);\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this) : callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: setIsVideoOff,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"WOUf+1syxqb8Kk5sKIZQyPFuIXM=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","VideoDisplay","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","audioMonitorCleanup","setAudioMonitorCleanup","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","console","log","name","callbacks","onLocalStream","stream","getTracks","map","t","kind","join","current","srcObject","warn","onRemoteStream","muted","cleanup","monitorAudioLevel","onCallStarted","clearInterval","setInterval","prev","onCallEnded","setTimeout","onCallConnecting","onUserNotOnline","userId","onICEConnectionStateChange","state","attemptReconnection","error","unsubscribeCallState","on","unsubscribeError","message","fatal","updateCallbacks","mediaManager","hasLocalStream","getLocalMedia","catch","forEach","track","stop","endCall","window","AudioContext","webkitAudioContext","audioContext","analyser","createAnalyser","microphone","createMediaStreamSource","javascriptNode","createScriptProcessor","connect","destination","lowAudioCounter","LOW_AUDIO_THRESHOLD","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","values","reduce","a","b","length","disconnect","close","toggleAudio","toggleVideo","handleKeyDown","e","key","handleEndCall","addEventListener","removeEventListener","timer","handleMouseMove","now","Date","clearTimeout","formatTime","seconds","mins","Math","floor","secs","toString","padStart","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","jsx","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  \n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  \n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('VideoCallScreen opened for doctor:', doctor.name);\n      \n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: (stream) => {\n          console.log('Got local stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('Local video stream set to element');\n          } else {\n            console.warn('localVideoRef is not available to set stream');\n          }\n        },\n        \n        onRemoteStream: (stream) => {\n          console.log('Got remote stream with tracks:', stream.getTracks().map(t => t.kind).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            console.log('Remote video stream set to element');\n            \n            // Ensure volume is correct based on speaker state\n            remoteVideoRef.current.muted = isSpeakerOff;\n          } else {\n            console.warn('remoteVideoRef is not available to set stream');\n          }\n          \n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        \n        onCallStarted: () => {\n          console.log('Call is now active');\n          setCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        },\n        \n        onCallEnded: () => {\n          console.log('Call has ended');\n          setCallStatus('ended');\n          \n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        \n        onCallConnecting: () => {\n          console.log('Call is connecting...');\n          setCallStatus('connecting');\n        },\n        \n        onUserNotOnline: (userId) => {\n          console.log('User not online:', userId);\n          setErrorMessage('Doctor is not available right now');\n          setCallStatus('ended');\n          \n          setTimeout(() => {\n            onClose();\n          }, 3000);\n        },\n        \n        onICEConnectionStateChange: (state) => {\n          console.log('Connection state changed:', state);\n          \n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n            \n            // Attempt reconnection after ice connection failure\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              try {\n                webRTCService.attemptReconnection(true);\n              } catch (error) {\n                console.error('Failed to attempt reconnection:', error);\n              }\n            }\n          }\n        }\n      };\n      \n      // Subscribe to call state changes\n      const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n        console.log('Call state changed to:', state);\n        setCallStatus(state);\n      });\n      \n      // Subscribe to errors\n      const unsubscribeError = webRTCService.on('error', (error) => {\n        console.log('WebRTC error received:', error);\n        setErrorMessage(error.message || 'Something went wrong with the call');\n        \n        if (error.fatal) {\n          setCallStatus('ended');\n        }\n      });\n      \n      webRTCService.updateCallbacks(callbacks);\n      \n      // Try to get local media access early if it hasn't been obtained yet\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('Requesting camera and microphone access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('Failed to get media access:', error);\n          setErrorMessage(`Camera/microphone access failed: ${error.message}`);\n        });\n      }\n      \n      return () => {\n        console.log('Cleaning up video call resources');\n        \n        unsubscribeCallState();\n        unsubscribeError();\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        \n        if (localVideoRef.current && localVideoRef.current.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        \n        if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        \n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, isSpeakerOff]);\n  \n  // Monitor remote stream for audio level changes\n  useEffect(() => {\n    if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n      const cleanup = monitorAudioLevel(remoteVideoRef.current.srcObject);\n      if (cleanup) setAudioMonitorCleanup(cleanup);\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = (stream) => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    \n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      \n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      \n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      \n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        \n        if (values < 5 && callStatus === 'active') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            setConnectionQuality('poor');\n          }\n        } else {\n          lowAudioCounter = 0;\n          if (callStatus === 'active') {\n            setConnectionQuality('good');\n          }\n        }\n      };\n      \n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n  \n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    \n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('User clicked end call button');\n    webRTCService.endCall(true);\n  };\n      \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        \n        {callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : (\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n          >\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls}\n            />\n          </VideoDisplay>\n        )}\n        \n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={setIsVideoOff}\n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n      </div>\n      \n      <style jsx>{`\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}