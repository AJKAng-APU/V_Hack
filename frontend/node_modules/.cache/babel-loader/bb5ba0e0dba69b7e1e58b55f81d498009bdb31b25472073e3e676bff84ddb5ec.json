{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver4/frontend2/src/components/HealthDataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthProvider';\nimport api from './ApiClient';\n\n// Create health data context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthDataContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the health data context\nexport const useHealthData = () => {\n  _s();\n  return useContext(HealthDataContext);\n};\n_s(useHealthData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const HealthDataProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isAuthenticated\n  } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isGoogleFitConnected, setIsGoogleFitConnected] = useState(false);\n  const [healthMetrics, setHealthMetrics] = useState({\n    height: null,\n    weight: null,\n    BMI: null,\n    pressure: {\n      systolic: null,\n      diastolic: null\n    },\n    glucose: null,\n    sleep: {\n      sleep_time: null,\n      wake_time: null\n    }\n  });\n  const [symptoms, setSymptoms] = useState([]);\n  const [prediction, setPrediction] = useState(null);\n  const [biorhythmAdvice, setBiorhythmAdvice] = useState(null);\n  const [aiInsights, setAiInsights] = useState(null);\n\n  // Check Google Fit connection status\n  const checkGoogleFitConnection = async () => {\n    try {\n      // For demo, we'll check if we have local storage data indicating connection\n      const connected = localStorage.getItem('google_fit_connected') === 'true';\n      setIsGoogleFitConnected(connected);\n      return connected;\n    } catch (error) {\n      console.error('Failed to check Google Fit connection:', error);\n      return false;\n    }\n  };\n\n  // Connect to Google Fit and get OAuth2 token\n  const connectGoogleFit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // For demo purposes, we'll simulate a successful connection\n      // In a real app, this would launch the Google OAuth flow\n      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call\n\n      // Save connection status to local storage\n      localStorage.setItem('google_fit_connected', 'true');\n      setIsGoogleFitConnected(true);\n\n      // Fetch initial health data\n      await fetchHealthData();\n      return true;\n    } catch (error) {\n      console.error('Failed to connect Google Fit:', error);\n      setError('Failed to connect to Google Fit. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch health data from API\n  const fetchHealthData = async (options = {\n    days: 30\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      if (!isAuthenticated) {\n        throw new Error('User not authenticated');\n      }\n      if (!isGoogleFitConnected) {\n        const connected = await checkGoogleFitConnection();\n        if (!connected) {\n          throw new Error('Google Fit not connected');\n        }\n      }\n\n      // Call API to fetch health data\n      const data = await api.fetchHealthData(options);\n\n      // Transform data into our expected format\n      const transformedData = {\n        height: data.height || null,\n        weight: data.weight || null,\n        BMI: data.BMI || null,\n        pressure: {\n          systolic: data.systolic || null,\n          diastolic: data.diastolic || null\n        },\n        glucose: data.glucose || null,\n        sleep: {\n          sleep_time: data.sleep_time || null,\n          wake_time: data.wake_time || null\n        }\n      };\n      setHealthMetrics(transformedData);\n\n      // Get prediction based on health metrics\n      if (data.systolic && data.diastolic && data.BMI && data.glucose && data.age) {\n        await getPrediction({\n          age: data.age,\n          BMI: data.BMI,\n          glucose: data.glucose,\n          sbp: data.systolic,\n          dbp: data.diastolic\n        });\n      }\n      return transformedData;\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      setError(error.message || 'Failed to fetch health data');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get prediction based on health metrics\n  const getPrediction = async metrics => {\n    try {\n      const result = await api.getPrediction(metrics);\n      setPrediction(result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      return null;\n    }\n  };\n\n  // Get biorhythm advice\n  const getBiorhythmAdvice = async (chronotype = 'morning', medicationTime = '08:00') => {\n    try {\n      const advice = await api.getBiorhythmAdvice(chronotype, medicationTime);\n      setBiorhythmAdvice(advice);\n      return advice;\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      return null;\n    }\n  };\n\n  // Add a new symptom and get AI insights\n  const addSymptom = async symptomData => {\n    try {\n      // First add the symptom\n      const newSymptom = await api.submitSymptom(symptomData);\n\n      // Update local symptoms list\n      setSymptoms(prevSymptoms => [newSymptom, ...prevSymptoms]);\n\n      // Get AI insights based on the new symptom and health metrics\n      const insightData = {\n        symptom: symptomData,\n        healthMetrics: healthMetrics\n      };\n      const insights = await api.getHealthInsight(insightData);\n      setAiInsights(insights);\n      return {\n        symptom: newSymptom,\n        insights\n      };\n    } catch (error) {\n      console.error('Failed to add symptom:', error);\n      throw error;\n    }\n  };\n\n  // Load initial data when authenticated\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (isAuthenticated) {\n        await checkGoogleFitConnection();\n        // Only fetch health data if Google Fit is connected\n        if (isGoogleFitConnected) {\n          await fetchHealthData();\n        }\n      }\n    };\n    loadInitialData();\n  }, [isAuthenticated]);\n\n  // Value to be provided to consuming components\n  const value = {\n    loading,\n    error,\n    isGoogleFitConnected,\n    healthMetrics,\n    symptoms,\n    prediction,\n    biorhythmAdvice,\n    aiInsights,\n    connectGoogleFit,\n    fetchHealthData,\n    addSymptom,\n    getBiorhythmAdvice,\n    getPrediction\n  };\n  return /*#__PURE__*/_jsxDEV(HealthDataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s2(HealthDataProvider, \"e1/a5mMkyIZ5d7NxaQHhu7yIDkg=\", false, function () {\n  return [useAuth];\n});\n_c = HealthDataProvider;\nexport default HealthDataProvider;\nvar _c;\n$RefreshReg$(_c, \"HealthDataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","api","jsxDEV","_jsxDEV","HealthDataContext","useHealthData","_s","HealthDataProvider","children","_s2","isAuthenticated","loading","setLoading","error","setError","isGoogleFitConnected","setIsGoogleFitConnected","healthMetrics","setHealthMetrics","height","weight","BMI","pressure","systolic","diastolic","glucose","sleep","sleep_time","wake_time","symptoms","setSymptoms","prediction","setPrediction","biorhythmAdvice","setBiorhythmAdvice","aiInsights","setAiInsights","checkGoogleFitConnection","connected","localStorage","getItem","console","connectGoogleFit","Promise","resolve","setTimeout","setItem","fetchHealthData","options","days","Error","data","transformedData","age","getPrediction","sbp","dbp","message","metrics","result","getBiorhythmAdvice","chronotype","medicationTime","advice","addSymptom","symptomData","newSymptom","submitSymptom","prevSymptoms","insightData","symptom","insights","getHealthInsight","loadInitialData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver4/frontend2/src/components/HealthDataContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthProvider';\nimport api from './ApiClient';\n\n// Create health data context\nconst HealthDataContext = createContext();\n\n// Custom hook to use the health data context\nexport const useHealthData = () => {\n  return useContext(HealthDataContext);\n};\n\nexport const HealthDataProvider = ({ children }) => {\n  const { isAuthenticated } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isGoogleFitConnected, setIsGoogleFitConnected] = useState(false);\n  const [healthMetrics, setHealthMetrics] = useState({\n    height: null,\n    weight: null,\n    BMI: null,\n    pressure: { systolic: null, diastolic: null },\n    glucose: null,\n    sleep: { sleep_time: null, wake_time: null }\n  });\n  const [symptoms, setSymptoms] = useState([]);\n  const [prediction, setPrediction] = useState(null);\n  const [biorhythmAdvice, setBiorhythmAdvice] = useState(null);\n  const [aiInsights, setAiInsights] = useState(null);\n  \n  // Check Google Fit connection status\n  const checkGoogleFitConnection = async () => {\n    try {\n      // For demo, we'll check if we have local storage data indicating connection\n      const connected = localStorage.getItem('google_fit_connected') === 'true';\n      setIsGoogleFitConnected(connected);\n      return connected;\n    } catch (error) {\n      console.error('Failed to check Google Fit connection:', error);\n      return false;\n    }\n  };\n  \n  // Connect to Google Fit and get OAuth2 token\n  const connectGoogleFit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // For demo purposes, we'll simulate a successful connection\n      // In a real app, this would launch the Google OAuth flow\n      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call\n      \n      // Save connection status to local storage\n      localStorage.setItem('google_fit_connected', 'true');\n      setIsGoogleFitConnected(true);\n      \n      // Fetch initial health data\n      await fetchHealthData();\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to connect Google Fit:', error);\n      setError('Failed to connect to Google Fit. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Fetch health data from API\n  const fetchHealthData = async (options = { days: 30 }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!isAuthenticated) {\n        throw new Error('User not authenticated');\n      }\n      \n      if (!isGoogleFitConnected) {\n        const connected = await checkGoogleFitConnection();\n        if (!connected) {\n          throw new Error('Google Fit not connected');\n        }\n      }\n      \n      // Call API to fetch health data\n      const data = await api.fetchHealthData(options);\n      \n      // Transform data into our expected format\n      const transformedData = {\n        height: data.height || null,\n        weight: data.weight || null,\n        BMI: data.BMI || null,\n        pressure: { \n          systolic: data.systolic || null, \n          diastolic: data.diastolic || null \n        },\n        glucose: data.glucose || null,\n        sleep: {\n          sleep_time: data.sleep_time || null,\n          wake_time: data.wake_time || null\n        }\n      };\n      \n      setHealthMetrics(transformedData);\n      \n      // Get prediction based on health metrics\n      if (data.systolic && data.diastolic && data.BMI && data.glucose && data.age) {\n        await getPrediction({\n          age: data.age,\n          BMI: data.BMI,\n          glucose: data.glucose,\n          sbp: data.systolic,\n          dbp: data.diastolic\n        });\n      }\n      \n      return transformedData;\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      setError(error.message || 'Failed to fetch health data');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Get prediction based on health metrics\n  const getPrediction = async (metrics) => {\n    try {\n      const result = await api.getPrediction(metrics);\n      setPrediction(result);\n      return result;\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      return null;\n    }\n  };\n  \n  // Get biorhythm advice\n  const getBiorhythmAdvice = async (chronotype = 'morning', medicationTime = '08:00') => {\n    try {\n      const advice = await api.getBiorhythmAdvice(chronotype, medicationTime);\n      setBiorhythmAdvice(advice);\n      return advice;\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      return null;\n    }\n  };\n  \n  // Add a new symptom and get AI insights\n  const addSymptom = async (symptomData) => {\n    try {\n      // First add the symptom\n      const newSymptom = await api.submitSymptom(symptomData);\n      \n      // Update local symptoms list\n      setSymptoms(prevSymptoms => [newSymptom, ...prevSymptoms]);\n      \n      // Get AI insights based on the new symptom and health metrics\n      const insightData = {\n        symptom: symptomData,\n        healthMetrics: healthMetrics\n      };\n      \n      const insights = await api.getHealthInsight(insightData);\n      setAiInsights(insights);\n      \n      return { symptom: newSymptom, insights };\n    } catch (error) {\n      console.error('Failed to add symptom:', error);\n      throw error;\n    }\n  };\n  \n  // Load initial data when authenticated\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (isAuthenticated) {\n        await checkGoogleFitConnection();\n        // Only fetch health data if Google Fit is connected\n        if (isGoogleFitConnected) {\n          await fetchHealthData();\n        }\n      }\n    };\n    \n    loadInitialData();\n  }, [isAuthenticated]);\n  \n  // Value to be provided to consuming components\n  const value = {\n    loading,\n    error,\n    isGoogleFitConnected,\n    healthMetrics,\n    symptoms,\n    prediction,\n    biorhythmAdvice,\n    aiInsights,\n    connectGoogleFit,\n    fetchHealthData,\n    addSymptom,\n    getBiorhythmAdvice,\n    getPrediction\n  };\n  \n  return (\n    <HealthDataContext.Provider value={value}>\n      {children}\n    </HealthDataContext.Provider>\n  );\n};\n\nexport default HealthDataProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}