{"ast":null,"code":"/**\n * Logger for WebRTC operations\n */\nclass WebRTCLogger {\n  constructor() {\n    this.enabled = true;\n    this.logHistory = [];\n    this.maxLogHistory = 100;\n  }\n\n  /**\n   * Log a message with timestamp\n   * @param {string} message - Log message\n   * @param {any} data - Additional data\n   */\n  log(message, data = null) {\n    if (!this.enabled) return;\n    const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n    const prefix = `[WebRTC ${timestamp}]`;\n    if (data) {\n      console.log(prefix, message, data);\n    } else {\n      console.log(prefix, message);\n    }\n\n    // Store logs in history\n    this.logHistory.push({\n      timestamp: new Date().toISOString(),\n      message,\n      data: data ? JSON.stringify(data) : null\n    });\n\n    // Keep only the most recent logs\n    if (this.logHistory.length > this.maxLogHistory) {\n      this.logHistory.shift();\n    }\n\n    // Store in localStorage for debugging\n    try {\n      localStorage.setItem('webrtc_logs', JSON.stringify(this.logHistory));\n    } catch (error) {\n      // localStorage might be disabled or full\n    }\n  }\n\n  /**\n   * Log an error\n   * @param {string} message - Error message\n   * @param {string} details - Error details\n   */\n  error(message, details = null) {\n    const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n    const prefix = `[WebRTC ERROR ${timestamp}]`;\n    if (details) {\n      console.error(prefix, message, details);\n    } else {\n      console.error(prefix, message);\n    }\n\n    // Store in log history\n    this.logHistory.push({\n      timestamp: new Date().toISOString(),\n      level: 'error',\n      message,\n      details\n    });\n\n    // Keep only the most recent logs\n    if (this.logHistory.length > this.maxLogHistory) {\n      this.logHistory.shift();\n    }\n\n    // Store in localStorage for debugging\n    try {\n      localStorage.setItem('webrtc_logs', JSON.stringify(this.logHistory));\n    } catch (error) {\n      // localStorage might be disabled or full\n    }\n  }\n\n  /**\n   * Enable or disable logging\n   * @param {boolean} enabled - Whether logging is enabled\n   */\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n\n  /**\n   * Get the log history\n   * @returns {Array} - Log history\n   */\n  getLogHistory() {\n    return this.logHistory;\n  }\n\n  /**\n   * Clear the log history\n   */\n  clearLogHistory() {\n    this.logHistory = [];\n    try {\n      localStorage.removeItem('webrtc_logs');\n    } catch (error) {\n      // localStorage might be disabled\n    }\n  }\n}\nexport default WebRTCLogger;","map":{"version":3,"names":["WebRTCLogger","constructor","enabled","logHistory","maxLogHistory","log","message","data","timestamp","Date","toISOString","split","substring","prefix","console","push","JSON","stringify","length","shift","localStorage","setItem","error","details","level","setEnabled","getLogHistory","clearLogHistory","removeItem"],"sources":["/Users/ang/V_Hack_Ver4_2/frontend2/src/components/services/WebRTCLogger.js"],"sourcesContent":["/**\n * Logger for WebRTC operations\n */\nclass WebRTCLogger {\n    constructor() {\n      this.enabled = true;\n      this.logHistory = [];\n      this.maxLogHistory = 100;\n    }\n    \n    /**\n     * Log a message with timestamp\n     * @param {string} message - Log message\n     * @param {any} data - Additional data\n     */\n    log(message, data = null) {\n      if (!this.enabled) return;\n      \n      const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n      const prefix = `[WebRTC ${timestamp}]`;\n      \n      if (data) {\n        console.log(prefix, message, data);\n      } else {\n        console.log(prefix, message);\n      }\n      \n      // Store logs in history\n      this.logHistory.push({\n        timestamp: new Date().toISOString(),\n        message,\n        data: data ? JSON.stringify(data) : null\n      });\n      \n      // Keep only the most recent logs\n      if (this.logHistory.length > this.maxLogHistory) {\n        this.logHistory.shift();\n      }\n      \n      // Store in localStorage for debugging\n      try {\n        localStorage.setItem('webrtc_logs', JSON.stringify(this.logHistory));\n      } catch (error) {\n        // localStorage might be disabled or full\n      }\n    }\n    \n    /**\n     * Log an error\n     * @param {string} message - Error message\n     * @param {string} details - Error details\n     */\n    error(message, details = null) {\n      const timestamp = new Date().toISOString().split('T')[1].substring(0, 8);\n      const prefix = `[WebRTC ERROR ${timestamp}]`;\n      \n      if (details) {\n        console.error(prefix, message, details);\n      } else {\n        console.error(prefix, message);\n      }\n      \n      // Store in log history\n      this.logHistory.push({\n        timestamp: new Date().toISOString(),\n        level: 'error',\n        message,\n        details\n      });\n      \n      // Keep only the most recent logs\n      if (this.logHistory.length > this.maxLogHistory) {\n        this.logHistory.shift();\n      }\n      \n      // Store in localStorage for debugging\n      try {\n        localStorage.setItem('webrtc_logs', JSON.stringify(this.logHistory));\n      } catch (error) {\n        // localStorage might be disabled or full\n      }\n    }\n    \n    /**\n     * Enable or disable logging\n     * @param {boolean} enabled - Whether logging is enabled\n     */\n    setEnabled(enabled) {\n      this.enabled = enabled;\n    }\n    \n    /**\n     * Get the log history\n     * @returns {Array} - Log history\n     */\n    getLogHistory() {\n      return this.logHistory;\n    }\n    \n    /**\n     * Clear the log history\n     */\n    clearLogHistory() {\n      this.logHistory = [];\n      try {\n        localStorage.removeItem('webrtc_logs');\n      } catch (error) {\n        // localStorage might be disabled\n      }\n    }\n  }\n  \n  export default WebRTCLogger;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}