{"ast":null,"code":"/**\n * Simple event emitter for WebRTC events\n */\nclass WebRTCEventEmitter {\n  constructor() {\n    this.eventListeners = {};\n  }\n\n  /**\n   * Emit an event with data\n   * @param {string} event - Event name\n   * @param {any} data - Event data\n   */\n  emit(event, data) {\n    if (this.eventListeners[event]) {\n      this.eventListeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} event - Event name\n   * @param {function} callback - Event callback\n   * @returns {function} - Unsubscribe function\n   */\n  on(event, callback) {\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n\n    // Return a function to remove the listener\n    return () => {\n      this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n    };\n  }\n}\nexport default WebRTCEventEmitter;","map":{"version":3,"names":["WebRTCEventEmitter","constructor","eventListeners","emit","event","data","forEach","callback","on","push","filter","cb"],"sources":["/Users/ang/V_Hack_Ver4_2/frontend2/src/components/services/WebRTCEventEmitter.js"],"sourcesContent":["/**\n * Simple event emitter for WebRTC events\n */\nclass WebRTCEventEmitter {\n    constructor() {\n      this.eventListeners = {};\n    }\n    \n    /**\n     * Emit an event with data\n     * @param {string} event - Event name\n     * @param {any} data - Event data\n     */\n    emit(event, data) {\n      if (this.eventListeners[event]) {\n        this.eventListeners[event].forEach(callback => callback(data));\n      }\n    }\n    \n    /**\n     * Subscribe to an event\n     * @param {string} event - Event name\n     * @param {function} callback - Event callback\n     * @returns {function} - Unsubscribe function\n     */\n    on(event, callback) {\n      if (!this.eventListeners[event]) {\n        this.eventListeners[event] = [];\n      }\n      this.eventListeners[event].push(callback);\n      \n      // Return a function to remove the listener\n      return () => {\n        this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n      };\n    }\n  }\n  \n  export default WebRTCEventEmitter;"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,kBAAkB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;EAC1B;;EAEA;AACJ;AACA;AACA;AACA;EACIC,IAAIA,CAACC,KAAK,EAAEC,IAAI,EAAE;IAChB,IAAI,IAAI,CAACH,cAAc,CAACE,KAAK,CAAC,EAAE;MAC9B,IAAI,CAACF,cAAc,CAACE,KAAK,CAAC,CAACE,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACF,IAAI,CAAC,CAAC;IAChE;EACF;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIG,EAAEA,CAACJ,KAAK,EAAEG,QAAQ,EAAE;IAClB,IAAI,CAAC,IAAI,CAACL,cAAc,CAACE,KAAK,CAAC,EAAE;MAC/B,IAAI,CAACF,cAAc,CAACE,KAAK,CAAC,GAAG,EAAE;IACjC;IACA,IAAI,CAACF,cAAc,CAACE,KAAK,CAAC,CAACK,IAAI,CAACF,QAAQ,CAAC;;IAEzC;IACA,OAAO,MAAM;MACX,IAAI,CAACL,cAAc,CAACE,KAAK,CAAC,GAAG,IAAI,CAACF,cAAc,CAACE,KAAK,CAAC,CAACM,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAKJ,QAAQ,CAAC;IACvF,CAAC;EACH;AACF;AAEA,eAAeP,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}