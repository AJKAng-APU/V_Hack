{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver3/frontend2/src/components/AuthProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport supabase from '../supabaseClient';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check for existing session\n    const checkUser = async () => {\n      try {\n        // Check Supabase session\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          throw error;\n        }\n        if (session) {\n          // Get user data from users table\n          const {\n            data: userData,\n            error: userError\n          } = await supabase.from('users').select('*').eq('email', session.user.email).single();\n          if (userError) {\n            throw userError;\n          }\n          setUser({\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url\n          });\n          setIsAuthenticated(true);\n\n          // Store in localStorage\n          localStorage.setItem('healthsync_auth', 'true');\n          localStorage.setItem('healthsync_user', JSON.stringify({\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url\n          }));\n        } else {\n          // Check localStorage as fallback (useful for demo mode)\n          const storedAuth = localStorage.getItem('healthsync_auth');\n          const storedUser = localStorage.getItem('healthsync_user');\n          if (storedAuth === 'true' && storedUser) {\n            setUser(JSON.parse(storedUser));\n            setIsAuthenticated(true);\n          } else {\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n        }\n      } catch (error) {\n        console.error('Auth error:', error.message);\n        // Clear any potentially corrupt local data\n        localStorage.removeItem('healthsync_auth');\n        localStorage.removeItem('healthsync_user');\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Set up auth state listener\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session) {\n        // Get user data from users table\n        const {\n          data: userData,\n          error: userError\n        } = await supabase.from('users').select('*').eq('email', session.user.email).single();\n        if (!userError && userData) {\n          setUser({\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url\n          });\n          setIsAuthenticated(true);\n\n          // Store in localStorage\n          localStorage.setItem('healthsync_auth', 'true');\n          localStorage.setItem('healthsync_user', JSON.stringify({\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url\n          }));\n        }\n      }\n      if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setIsAuthenticated(false);\n        localStorage.removeItem('healthsync_auth');\n        localStorage.removeItem('healthsync_user');\n      }\n    });\n    checkUser();\n\n    // Clean up subscription\n    return () => {\n      if (authListener && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // Sign out function\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      // Clear local storage\n      localStorage.removeItem('healthsync_auth');\n      localStorage.removeItem('healthsync_user');\n      setUser(null);\n      setIsAuthenticated(false);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Value to be provided to consuming components\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkUser","data","session","error","auth","getSession","userData","userError","from","select","eq","email","single","id","user_id","name","isPremium","is_premium","avatar","avatar_url","localStorage","setItem","JSON","stringify","storedAuth","getItem","storedUser","parse","console","message","removeItem","authListener","onAuthStateChange","event","subscription","unsubscribe","signOut","success","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver3/frontend2/src/components/AuthProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport supabase from '../supabaseClient';\n\n// Create auth context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Check for existing session\n    const checkUser = async () => {\n      try {\n        // Check Supabase session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          throw error;\n        }\n        \n        if (session) {\n          // Get user data from users table\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('email', session.user.email)\n            .single();\n            \n          if (userError) {\n            throw userError;\n          }\n          \n          setUser({\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url\n          });\n          \n          setIsAuthenticated(true);\n          \n          // Store in localStorage\n          localStorage.setItem('healthsync_auth', 'true');\n          localStorage.setItem('healthsync_user', JSON.stringify({\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url\n          }));\n        } else {\n          // Check localStorage as fallback (useful for demo mode)\n          const storedAuth = localStorage.getItem('healthsync_auth');\n          const storedUser = localStorage.getItem('healthsync_user');\n          \n          if (storedAuth === 'true' && storedUser) {\n            setUser(JSON.parse(storedUser));\n            setIsAuthenticated(true);\n          } else {\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n        }\n      } catch (error) {\n        console.error('Auth error:', error.message);\n        // Clear any potentially corrupt local data\n        localStorage.removeItem('healthsync_auth');\n        localStorage.removeItem('healthsync_user');\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Set up auth state listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (event === 'SIGNED_IN' && session) {\n          // Get user data from users table\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('email', session.user.email)\n            .single();\n            \n          if (!userError && userData) {\n            setUser({\n              id: userData.user_id,\n              name: userData.name,\n              email: userData.email,\n              isPremium: userData.is_premium,\n              avatar: userData.avatar_url\n            });\n            \n            setIsAuthenticated(true);\n            \n            // Store in localStorage\n            localStorage.setItem('healthsync_auth', 'true');\n            localStorage.setItem('healthsync_user', JSON.stringify({\n              id: userData.user_id,\n              name: userData.name,\n              email: userData.email,\n              isPremium: userData.is_premium,\n              avatar: userData.avatar_url\n            }));\n          }\n        }\n        \n        if (event === 'SIGNED_OUT') {\n          setUser(null);\n          setIsAuthenticated(false);\n          localStorage.removeItem('healthsync_auth');\n          localStorage.removeItem('healthsync_user');\n        }\n      }\n    );\n\n    checkUser();\n\n    // Clean up subscription\n    return () => {\n      if (authListener && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // Sign out function\n  const signOut = async () => {\n    try {\n      await supabase.auth.signOut();\n      // Clear local storage\n      localStorage.removeItem('healthsync_auth');\n      localStorage.removeItem('healthsync_user');\n      setUser(null);\n      setIsAuthenticated(false);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Value to be provided to consuming components\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    signOut\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,QAAQ,MAAM,mBAAmB;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,OAAOR,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAACE,EAAA,CAFWD,OAAO;AAIpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE7DC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAM;UAAEC,IAAI,EAAE;YAAEC;UAAQ,CAAC;UAAEC;QAAM,CAAC,GAAG,MAAMlB,QAAQ,CAACmB,IAAI,CAACC,UAAU,CAAC,CAAC;QAErE,IAAIF,KAAK,EAAE;UACT,MAAMA,KAAK;QACb;QAEA,IAAID,OAAO,EAAE;UACX;UACA,MAAM;YAAED,IAAI,EAAEK,QAAQ;YAAEH,KAAK,EAAEI;UAAU,CAAC,GAAG,MAAMtB,QAAQ,CACxDuB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,OAAO,EAAER,OAAO,CAACR,IAAI,CAACiB,KAAK,CAAC,CAC/BC,MAAM,CAAC,CAAC;UAEX,IAAIL,SAAS,EAAE;YACb,MAAMA,SAAS;UACjB;UAEAZ,OAAO,CAAC;YACNkB,EAAE,EAAEP,QAAQ,CAACQ,OAAO;YACpBC,IAAI,EAAET,QAAQ,CAACS,IAAI;YACnBJ,KAAK,EAAEL,QAAQ,CAACK,KAAK;YACrBK,SAAS,EAAEV,QAAQ,CAACW,UAAU;YAC9BC,MAAM,EAAEZ,QAAQ,CAACa;UACnB,CAAC,CAAC;UAEFpB,kBAAkB,CAAC,IAAI,CAAC;;UAExB;UACAqB,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;UAC/CD,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,IAAI,CAACC,SAAS,CAAC;YACrDV,EAAE,EAAEP,QAAQ,CAACQ,OAAO;YACpBC,IAAI,EAAET,QAAQ,CAACS,IAAI;YACnBJ,KAAK,EAAEL,QAAQ,CAACK,KAAK;YACrBK,SAAS,EAAEV,QAAQ,CAACW,UAAU;YAC9BC,MAAM,EAAEZ,QAAQ,CAACa;UACnB,CAAC,CAAC,CAAC;QACL,CAAC,MAAM;UACL;UACA,MAAMK,UAAU,GAAGJ,YAAY,CAACK,OAAO,CAAC,iBAAiB,CAAC;UAC1D,MAAMC,UAAU,GAAGN,YAAY,CAACK,OAAO,CAAC,iBAAiB,CAAC;UAE1D,IAAID,UAAU,KAAK,MAAM,IAAIE,UAAU,EAAE;YACvC/B,OAAO,CAAC2B,IAAI,CAACK,KAAK,CAACD,UAAU,CAAC,CAAC;YAC/B3B,kBAAkB,CAAC,IAAI,CAAC;UAC1B,CAAC,MAAM;YACLJ,OAAO,CAAC,IAAI,CAAC;YACbI,kBAAkB,CAAC,KAAK,CAAC;UAC3B;QACF;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdyB,OAAO,CAACzB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC0B,OAAO,CAAC;QAC3C;QACAT,YAAY,CAACU,UAAU,CAAC,iBAAiB,CAAC;QAC1CV,YAAY,CAACU,UAAU,CAAC,iBAAiB,CAAC;QAC1CnC,OAAO,CAAC,IAAI,CAAC;QACbI,kBAAkB,CAAC,KAAK,CAAC;MAC3B,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACA,MAAM;MAAEI,IAAI,EAAE8B;IAAa,CAAC,GAAG9C,QAAQ,CAACmB,IAAI,CAAC4B,iBAAiB,CAC5D,OAAOC,KAAK,EAAE/B,OAAO,KAAK;MACxB,IAAI+B,KAAK,KAAK,WAAW,IAAI/B,OAAO,EAAE;QACpC;QACA,MAAM;UAAED,IAAI,EAAEK,QAAQ;UAAEH,KAAK,EAAEI;QAAU,CAAC,GAAG,MAAMtB,QAAQ,CACxDuB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,OAAO,EAAER,OAAO,CAACR,IAAI,CAACiB,KAAK,CAAC,CAC/BC,MAAM,CAAC,CAAC;QAEX,IAAI,CAACL,SAAS,IAAID,QAAQ,EAAE;UAC1BX,OAAO,CAAC;YACNkB,EAAE,EAAEP,QAAQ,CAACQ,OAAO;YACpBC,IAAI,EAAET,QAAQ,CAACS,IAAI;YACnBJ,KAAK,EAAEL,QAAQ,CAACK,KAAK;YACrBK,SAAS,EAAEV,QAAQ,CAACW,UAAU;YAC9BC,MAAM,EAAEZ,QAAQ,CAACa;UACnB,CAAC,CAAC;UAEFpB,kBAAkB,CAAC,IAAI,CAAC;;UAExB;UACAqB,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;UAC/CD,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEC,IAAI,CAACC,SAAS,CAAC;YACrDV,EAAE,EAAEP,QAAQ,CAACQ,OAAO;YACpBC,IAAI,EAAET,QAAQ,CAACS,IAAI;YACnBJ,KAAK,EAAEL,QAAQ,CAACK,KAAK;YACrBK,SAAS,EAAEV,QAAQ,CAACW,UAAU;YAC9BC,MAAM,EAAEZ,QAAQ,CAACa;UACnB,CAAC,CAAC,CAAC;QACL;MACF;MAEA,IAAIc,KAAK,KAAK,YAAY,EAAE;QAC1BtC,OAAO,CAAC,IAAI,CAAC;QACbI,kBAAkB,CAAC,KAAK,CAAC;QACzBqB,YAAY,CAACU,UAAU,CAAC,iBAAiB,CAAC;QAC1CV,YAAY,CAACU,UAAU,CAAC,iBAAiB,CAAC;MAC5C;IACF,CACF,CAAC;IAED9B,SAAS,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACX,IAAI+B,YAAY,IAAIA,YAAY,CAACG,YAAY,EAAE;QAC7CH,YAAY,CAACG,YAAY,CAACC,WAAW,CAAC,CAAC;MACzC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMnD,QAAQ,CAACmB,IAAI,CAACgC,OAAO,CAAC,CAAC;MAC7B;MACAhB,YAAY,CAACU,UAAU,CAAC,iBAAiB,CAAC;MAC1CV,YAAY,CAACU,UAAU,CAAC,iBAAiB,CAAC;MAC1CnC,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;MACzB,OAAO;QAAEsC,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACd,OAAO;QAAEkC,OAAO,EAAE,KAAK;QAAElC,KAAK,EAAEA,KAAK,CAAC0B;MAAQ,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMS,KAAK,GAAG;IACZ5C,IAAI;IACJI,eAAe;IACfF,OAAO;IACPwC;EACF,CAAC;EAED,oBACEjD,OAAA,CAACC,WAAW,CAACmD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA9C,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAgD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAClD,GAAA,CAzJWF,YAAY;AAAAqD,EAAA,GAAZrD,YAAY;AA2JzB,eAAeA,YAAY;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}