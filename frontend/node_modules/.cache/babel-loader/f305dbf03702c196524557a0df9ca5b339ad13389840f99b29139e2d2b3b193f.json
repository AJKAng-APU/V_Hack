{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\n// Fixed VideoCallScreen.jsx with more aggressive state transitions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  const [forceDisplay, setForceDisplay] = useState(false);\n\n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const hasMedia = useRef(false);\n  const stateTransitionAttempt = useRef(0);\n\n  // Function to update call status with logging\n  const updateCallStatus = newStatus => {\n    console.log(`[VideoCallScreen] Updating call status: ${callStatus} -> ${newStatus}`);\n    setCallStatus(newStatus);\n\n    // If transitioning to active, also set forceDisplay\n    if (newStatus === 'active') {\n      setForceDisplay(true);\n      console.log('[VideoCallScreen] Force display set to true');\n\n      // Start call timer if needed\n      if (!callDurationTimer.current) {\n        console.log('[VideoCallScreen] Starting call duration timer');\n        callDurationTimer.current = setInterval(() => {\n          setCallDuration(prev => prev + 1);\n        }, 1000);\n      }\n    }\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    console.log('[VideoCallScreen] Toggle video:', videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('[VideoCallScreen] Toggling video through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('[VideoCallScreen] Setting video state directly');\n      setIsVideoOff(videoOff);\n    }\n  };\n\n  // CRITICAL EFFECT: Check WebRTC service state directly\n  useEffect(() => {\n    if (!isOpen) return;\n    console.log('[VideoCallScreen] Starting WebRTC state monitor');\n    const stateMonitor = setInterval(() => {\n      var _webRTCService$connec;\n      // Check WebRTC service state directly\n      const serviceActive = webRTCService.isCallActive();\n      const serviceConnected = webRTCService.isCallConnected();\n      const hasRemoteStream = (_webRTCService$connec = webRTCService.connectionManager) === null || _webRTCService$connec === void 0 ? void 0 : _webRTCService$connec.remoteStream;\n      console.log(`[VideoCallScreen] State check - UI: ${callStatus}, Service active: ${serviceActive}, Service connected: ${serviceConnected}, Remote stream: ${!!hasRemoteStream}`);\n\n      // Force transition to active if needed\n      if ((serviceActive || serviceConnected || hasRemoteStream) && callStatus !== 'active') {\n        stateTransitionAttempt.current += 1;\n        console.log(`[VideoCallScreen] !!! FORCING ACTIVE STATE !!! (attempt ${stateTransitionAttempt.current})`);\n        updateCallStatus('active');\n\n        // Directly call the WebRTC service to update its state too\n        if (typeof webRTCService.updateCallState === 'function') {\n          webRTCService.updateCallState('active');\n        }\n      }\n    }, 500); // Check every 500ms\n\n    return () => clearInterval(stateMonitor);\n  }, [isOpen, callStatus]);\n\n  // Additional direct check for remote stream\n  useEffect(() => {\n    if (!isOpen || !remoteVideoRef.current) return;\n    const streamChecker = setInterval(() => {\n      if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        console.log(`[VideoCallScreen] Remote video has ${tracks.length} tracks`);\n        if (tracks.length > 0 && callStatus !== 'active') {\n          console.log('[VideoCallScreen] Remote tracks detected, forcing active state');\n          updateCallStatus('active');\n          hasMedia.current = true;\n          clearInterval(streamChecker);\n        }\n      }\n    }, 700);\n    return () => clearInterval(streamChecker);\n  }, [isOpen, remoteVideoRef.current, callStatus]);\n\n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('[VideoCallScreen] Opening for doctor:', doctor.name);\n\n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: stream => {\n          console.log('[VideoCallScreen] Got local stream with tracks:', stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('[VideoCallScreen] Set local video source');\n          }\n        },\n        onRemoteStream: stream => {\n          console.log('[VideoCallScreen] Got remote stream with tracks:', stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            remoteVideoRef.current.muted = isSpeakerOff;\n            console.log('[VideoCallScreen] Set remote video source');\n\n            // IMPORTANT: Force active state\n            updateCallStatus('active');\n            hasMedia.current = true;\n          }\n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        onCallStarted: () => {\n          var _webRTCService$connec2;\n          console.log('[VideoCallScreen] onCallStarted callback fired');\n          updateCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n\n          // Store peer connection reference\n          if ((_webRTCService$connec2 = webRTCService.connectionManager) !== null && _webRTCService$connec2 !== void 0 && _webRTCService$connec2.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n        },\n        onCallEnded: () => {\n          console.log('[VideoCallScreen] onCallEnded callback fired');\n          updateCallStatus('ended');\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n            callDurationTimer.current = null;\n          }\n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        onCallConnecting: () => {\n          console.log('[VideoCallScreen] onCallConnecting callback fired');\n          // Only update if not already active (don't go backwards)\n          if (callStatus !== 'active') {\n            updateCallStatus('connecting');\n          }\n        },\n        onICEConnectionStateChange: state => {\n          console.log('[VideoCallScreen] ICE connection state changed:', state);\n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n\n            // IMPORTANT: Force call to active state on ICE connected\n            console.log('[VideoCallScreen] ICE connected/completed, forcing active state');\n            updateCallStatus('active');\n\n            // Double-check after a short delay\n            setTimeout(() => {\n              updateCallStatus('active');\n            }, 500);\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n\n            // Try reconnection\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              webRTCService.attemptReconnection(true);\n            }\n          }\n        }\n      };\n\n      // IMPORTANT: Listen for call state changes with enhanced reliability\n      const callStateListener = state => {\n        console.log('[VideoCallScreen] callStateChanged event received:', state);\n\n        // Never go backwards from active to connecting\n        if (state === 'active' || state === 'connecting' && callStatus !== 'active') {\n          updateCallStatus(state);\n        } else if (state === 'ended') {\n          updateCallStatus('ended');\n        }\n      };\n      const unsubscribeCallState = webRTCService.on('callStateChanged', callStateListener);\n\n      // Listen for errors\n      const unsubscribeError = webRTCService.on('error', error => {\n        console.log('[VideoCallScreen] WebRTC error:', error);\n        setErrorMessage(error.message || 'Call error');\n        if (error.fatal) {\n          updateCallStatus('ended');\n        }\n      });\n      webRTCService.updateCallbacks(callbacks);\n\n      // Get media access if needed\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('[VideoCallScreen] Requesting media access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('[VideoCallScreen] Media access error:', error);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n      }\n\n      // IMPORTANT: Force check WebRTC service state\n      console.log('[VideoCallScreen] Initial state check:', webRTCService.callState);\n      if (webRTCService.callState === 'active') {\n        console.log('[VideoCallScreen] WebRTC service reports active on mount, syncing UI');\n        updateCallStatus('active');\n      }\n      return () => {\n        var _localVideoRef$curren, _remoteVideoRef$curre;\n        console.log('[VideoCallScreen] Cleaning up resources');\n        unsubscribeCallState();\n        unsubscribeError();\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n\n        // Always end call on cleanup\n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, isSpeakerOff]);\n\n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            if (statsCount > 0) {\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        return () => clearInterval(statsInterval);\n      };\n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = stream => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            setConnectionQuality(prevQuality => prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n        }\n      };\n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n\n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('[VideoCallScreen] User ending call');\n    webRTCService.endCall(true);\n  };\n\n  // FORCE ACTIVE on mount\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Force check WebRTC state after a delay\n    const initialTimeouts = [1000, 2000, 3000, 5000].map(delay => setTimeout(() => {\n      var _remoteVideoRef$curre2, _remoteVideoRef$curre3;\n      const isServiceActive = webRTCService === null || webRTCService === void 0 ? void 0 : webRTCService.isCallActive();\n      console.log(`[VideoCallScreen] Delayed check (${delay}ms): WebRTC active: ${isServiceActive}, UI: ${callStatus}`);\n      if (isServiceActive && callStatus !== 'active') {\n        console.log(`[VideoCallScreen] Forcing active state after ${delay}ms delay`);\n        updateCallStatus('active');\n      }\n\n      // IMPORTANT: If there's a remote video stream, force active\n      if (((_remoteVideoRef$curre2 = remoteVideoRef.current) === null || _remoteVideoRef$curre2 === void 0 ? void 0 : (_remoteVideoRef$curre3 = _remoteVideoRef$curre2.srcObject) === null || _remoteVideoRef$curre3 === void 0 ? void 0 : _remoteVideoRef$curre3.getTracks().length) > 0) {\n        console.log(`[VideoCallScreen] Remote video has tracks at ${delay}ms, forcing active`);\n        updateCallStatus('active');\n      }\n    }, delay));\n    return () => initialTimeouts.forEach(clearTimeout);\n  }, [isOpen]);\n  if (!isOpen) return null;\n\n  // Enhanced rendering logic - show video in more cases\n  const shouldShowVideo = callStatus === 'active' || hasMedia.current || forceDisplay || (webRTCService === null || webRTCService === void 0 ? void 0 : webRTCService.isCallActive()) || remoteVideoRef.current && remoteVideoRef.current.srcObject && remoteVideoRef.current.srcObject.getTracks().length > 0;\n  console.log(`[VideoCallScreen] Render decision - callStatus: ${callStatus}, shouldShowVideo: ${shouldShowVideo}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [shouldShowVideo ? /*#__PURE__*/_jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 11\n      }, this) : callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"x7tC6MbgGfnmuoN8pRGT3xfYd1I=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","VideoDisplay","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","audioMonitorCleanup","setAudioMonitorCleanup","forceDisplay","setForceDisplay","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","peerConnectionRef","hasMedia","stateTransitionAttempt","updateCallStatus","newStatus","console","log","current","setInterval","prev","toggleVideo","videoOff","mediaManager","hasLocalStream","stateMonitor","_webRTCService$connec","serviceActive","isCallActive","serviceConnected","isCallConnected","hasRemoteStream","connectionManager","remoteStream","updateCallState","clearInterval","streamChecker","srcObject","tracks","getTracks","length","name","callbacks","onLocalStream","stream","map","t","kind","enabled","join","onRemoteStream","muted","cleanup","monitorAudioLevel","onCallStarted","_webRTCService$connec2","peerConnection","onCallEnded","setTimeout","onCallConnecting","onICEConnectionStateChange","state","attemptReconnection","callStateListener","unsubscribeCallState","on","unsubscribeError","error","message","fatal","updateCallbacks","getLocalMedia","catch","callState","_localVideoRef$curren","_remoteVideoRef$curre","forEach","track","stop","endCall","monitorConnectionQuality","statsInterval","stats","getStats","packetLoss","jitter","roundTripTime","statsCount","report","type","packetsLost","packetsReceived","window","AudioContext","webkitAudioContext","audioContext","analyser","createAnalyser","microphone","createMediaStreamSource","javascriptNode","createScriptProcessor","connect","destination","lowAudioCounter","LOW_AUDIO_THRESHOLD","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","values","reduce","a","b","prevQuality","disconnect","close","toggleAudio","handleKeyDown","e","key","handleEndCall","addEventListener","removeEventListener","timer","handleMouseMove","now","Date","clearTimeout","formatTime","seconds","mins","Math","floor","secs","toString","padStart","initialTimeouts","delay","_remoteVideoRef$curre2","_remoteVideoRef$curre3","isServiceActive","shouldShowVideo","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","jsx","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["// Fixed VideoCallScreen.jsx with more aggressive state transitions\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport VideoDisplay from './VideoDisplay';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [audioMonitorCleanup, setAudioMonitorCleanup] = useState(null);\n  const [forceDisplay, setForceDisplay] = useState(false);\n  \n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const hasMedia = useRef(false);\n  const stateTransitionAttempt = useRef(0);\n  \n  // Function to update call status with logging\n  const updateCallStatus = (newStatus) => {\n    console.log(`[VideoCallScreen] Updating call status: ${callStatus} -> ${newStatus}`);\n    setCallStatus(newStatus);\n    \n    // If transitioning to active, also set forceDisplay\n    if (newStatus === 'active') {\n      setForceDisplay(true);\n      console.log('[VideoCallScreen] Force display set to true');\n      \n      // Start call timer if needed\n      if (!callDurationTimer.current) {\n        console.log('[VideoCallScreen] Starting call duration timer');\n        callDurationTimer.current = setInterval(() => {\n          setCallDuration(prev => prev + 1);\n        }, 1000);\n      }\n    }\n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    console.log('[VideoCallScreen] Toggle video:', videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      console.log('[VideoCallScreen] Toggling video through webRTCService');\n      webRTCService.toggleVideo(videoOff);\n      setIsVideoOff(videoOff);\n    } else {\n      console.log('[VideoCallScreen] Setting video state directly');\n      setIsVideoOff(videoOff);\n    }\n  };\n  \n  // CRITICAL EFFECT: Check WebRTC service state directly\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    console.log('[VideoCallScreen] Starting WebRTC state monitor');\n    \n    const stateMonitor = setInterval(() => {\n      // Check WebRTC service state directly\n      const serviceActive = webRTCService.isCallActive();\n      const serviceConnected = webRTCService.isCallConnected();\n      const hasRemoteStream = webRTCService.connectionManager?.remoteStream;\n      \n      console.log(`[VideoCallScreen] State check - UI: ${callStatus}, Service active: ${serviceActive}, Service connected: ${serviceConnected}, Remote stream: ${!!hasRemoteStream}`);\n      \n      // Force transition to active if needed\n      if ((serviceActive || serviceConnected || hasRemoteStream) && callStatus !== 'active') {\n        stateTransitionAttempt.current += 1;\n        console.log(`[VideoCallScreen] !!! FORCING ACTIVE STATE !!! (attempt ${stateTransitionAttempt.current})`);\n        updateCallStatus('active');\n        \n        // Directly call the WebRTC service to update its state too\n        if (typeof webRTCService.updateCallState === 'function') {\n          webRTCService.updateCallState('active');\n        }\n      }\n    }, 500); // Check every 500ms\n    \n    return () => clearInterval(stateMonitor);\n  }, [isOpen, callStatus]);\n  \n  // Additional direct check for remote stream\n  useEffect(() => {\n    if (!isOpen || !remoteVideoRef.current) return;\n    \n    const streamChecker = setInterval(() => {\n      if (remoteVideoRef.current && remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        console.log(`[VideoCallScreen] Remote video has ${tracks.length} tracks`);\n        \n        if (tracks.length > 0 && callStatus !== 'active') {\n          console.log('[VideoCallScreen] Remote tracks detected, forcing active state');\n          updateCallStatus('active');\n          hasMedia.current = true;\n          clearInterval(streamChecker);\n        }\n      }\n    }, 700);\n    \n    return () => clearInterval(streamChecker);\n  }, [isOpen, remoteVideoRef.current, callStatus]);\n  \n  // Initialize or clean up WebRTC when component mounts/unmounts\n  useEffect(() => {\n    if (isOpen && doctor) {\n      console.log('[VideoCallScreen] Opening for doctor:', doctor.name);\n      \n      // Set up WebRTC callbacks\n      const callbacks = {\n        onLocalStream: (stream) => {\n          console.log('[VideoCallScreen] Got local stream with tracks:', \n            stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          \n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            console.log('[VideoCallScreen] Set local video source');\n          }\n        },\n        \n        onRemoteStream: (stream) => {\n          console.log('[VideoCallScreen] Got remote stream with tracks:', \n            stream.getTracks().map(t => `${t.kind}:${t.enabled}`).join(','));\n          \n          if (remoteVideoRef.current) {\n            remoteVideoRef.current.srcObject = stream;\n            remoteVideoRef.current.muted = isSpeakerOff;\n            console.log('[VideoCallScreen] Set remote video source');\n            \n            // IMPORTANT: Force active state\n            updateCallStatus('active');\n            hasMedia.current = true;\n          }\n          \n          const cleanup = monitorAudioLevel(stream);\n          if (cleanup) setAudioMonitorCleanup(cleanup);\n        },\n        \n        onCallStarted: () => {\n          console.log('[VideoCallScreen] onCallStarted callback fired');\n          updateCallStatus('active');\n          setReconnectAttempt(0);\n          setErrorMessage('');\n          \n          // Store peer connection reference\n          if (webRTCService.connectionManager?.peerConnection) {\n            peerConnectionRef.current = webRTCService.connectionManager.peerConnection;\n          }\n        },\n        \n        onCallEnded: () => {\n          console.log('[VideoCallScreen] onCallEnded callback fired');\n          updateCallStatus('ended');\n          \n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n            callDurationTimer.current = null;\n          }\n          \n          setTimeout(() => {\n            onClose();\n          }, 2000);\n        },\n        \n        onCallConnecting: () => {\n          console.log('[VideoCallScreen] onCallConnecting callback fired');\n          // Only update if not already active (don't go backwards)\n          if (callStatus !== 'active') {\n            updateCallStatus('connecting');\n          }\n        },\n        \n        onICEConnectionStateChange: (state) => {\n          console.log('[VideoCallScreen] ICE connection state changed:', state);\n          \n          if (state === 'checking') {\n            setConnectionQuality('unstable');\n          } else if (state === 'connected' || state === 'completed') {\n            setConnectionQuality('good');\n            \n            // IMPORTANT: Force call to active state on ICE connected\n            console.log('[VideoCallScreen] ICE connected/completed, forcing active state');\n            updateCallStatus('active');\n            \n            // Double-check after a short delay\n            setTimeout(() => {\n              updateCallStatus('active');\n            }, 500);\n          } else if (state === 'disconnected') {\n            setConnectionQuality('poor');\n            setReconnectAttempt(prev => prev + 1);\n          } else if (state === 'failed') {\n            setConnectionQuality('unstable');\n            setReconnectAttempt(prev => prev + 1);\n            \n            // Try reconnection\n            if (webRTCService && typeof webRTCService.attemptReconnection === 'function') {\n              webRTCService.attemptReconnection(true);\n            }\n          }\n        }\n      };\n      \n      // IMPORTANT: Listen for call state changes with enhanced reliability\n      const callStateListener = (state) => {\n        console.log('[VideoCallScreen] callStateChanged event received:', state);\n        \n        // Never go backwards from active to connecting\n        if (state === 'active' || (state === 'connecting' && callStatus !== 'active')) {\n          updateCallStatus(state);\n        } else if (state === 'ended') {\n          updateCallStatus('ended');\n        }\n      };\n      \n      const unsubscribeCallState = webRTCService.on('callStateChanged', callStateListener);\n      \n      // Listen for errors\n      const unsubscribeError = webRTCService.on('error', (error) => {\n        console.log('[VideoCallScreen] WebRTC error:', error);\n        setErrorMessage(error.message || 'Call error');\n        \n        if (error.fatal) {\n          updateCallStatus('ended');\n        }\n      });\n      \n      webRTCService.updateCallbacks(callbacks);\n      \n      // Get media access if needed\n      if (!webRTCService.mediaManager.hasLocalStream()) {\n        console.log('[VideoCallScreen] Requesting media access');\n        webRTCService.getLocalMedia(true, true).catch(error => {\n          console.error('[VideoCallScreen] Media access error:', error);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n      }\n      \n      // IMPORTANT: Force check WebRTC service state\n      console.log('[VideoCallScreen] Initial state check:', webRTCService.callState);\n      if (webRTCService.callState === 'active') {\n        console.log('[VideoCallScreen] WebRTC service reports active on mount, syncing UI');\n        updateCallStatus('active');\n      }\n      \n      return () => {\n        console.log('[VideoCallScreen] Cleaning up resources');\n        \n        unsubscribeCallState();\n        unsubscribeError();\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        if (audioMonitorCleanup) {\n          audioMonitorCleanup();\n        }\n        \n        if (localVideoRef.current?.srcObject) {\n          const stream = localVideoRef.current.srcObject;\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          localVideoRef.current.srcObject = null;\n        }\n        \n        if (remoteVideoRef.current?.srcObject) {\n          remoteVideoRef.current.srcObject = null;\n        }\n        \n        // Always end call on cleanup\n        webRTCService.endCall(true);\n      };\n    }\n  }, [isOpen, doctor, onClose, isSpeakerOff]);\n  \n  // Monitor WebRTC stats for connection quality\n  useEffect(() => {\n    if (peerConnectionRef.current && callStatus === 'active') {\n      const monitorConnectionQuality = () => {\n        const statsInterval = setInterval(async () => {\n          try {\n            const stats = await peerConnectionRef.current.getStats();\n            let packetLoss = 0;\n            let jitter = 0;\n            let roundTripTime = 0;\n            let statsCount = 0;\n            \n            stats.forEach(report => {\n              if (report.type === 'inbound-rtp' && report.kind === 'video') {\n                if (report.packetsLost && report.packetsReceived) {\n                  packetLoss = report.packetsLost / (report.packetsLost + report.packetsReceived);\n                }\n                if (report.jitter) {\n                  jitter = report.jitter;\n                }\n                statsCount++;\n              }\n              if (report.type === 'remote-inbound-rtp') {\n                if (report.roundTripTime) {\n                  roundTripTime = report.roundTripTime;\n                }\n                statsCount++;\n              }\n            });\n            \n            if (statsCount > 0) {\n              if (packetLoss > 0.1 || jitter > 50 || roundTripTime > 500) {\n                setConnectionQuality('poor');\n              } else if (packetLoss > 0.05 || jitter > 30 || roundTripTime > 300) {\n                setConnectionQuality('unstable');\n              } else {\n                setConnectionQuality('good');\n              }\n            }\n          } catch (error) {\n            console.error('Error getting connection stats:', error);\n          }\n        }, 2000);\n        \n        return () => clearInterval(statsInterval);\n      };\n      \n      const cleanup = monitorConnectionQuality();\n      return cleanup;\n    }\n  }, [peerConnectionRef.current, callStatus]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Function to monitor audio levels for connection quality checks\n  const monitorAudioLevel = (stream) => {\n    if (!window.AudioContext && !window.webkitAudioContext) {\n      return null;\n    }\n    \n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new AudioContext();\n      const analyser = audioContext.createAnalyser();\n      const microphone = audioContext.createMediaStreamSource(stream);\n      const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n      \n      microphone.connect(analyser);\n      analyser.connect(javascriptNode);\n      javascriptNode.connect(audioContext.destination);\n      \n      let lowAudioCounter = 0;\n      const LOW_AUDIO_THRESHOLD = 10;\n      \n      javascriptNode.onaudioprocess = () => {\n        const array = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(array);\n        const values = array.reduce((a, b) => a + b, 0) / array.length;\n        \n        if (values < 5 && callStatus === 'active' && connectionQuality !== 'poor') {\n          lowAudioCounter++;\n          if (lowAudioCounter >= LOW_AUDIO_THRESHOLD && callDuration > 5) {\n            setConnectionQuality(prevQuality => \n              prevQuality === 'unstable' ? 'poor' : prevQuality);\n          }\n        } else {\n          lowAudioCounter = 0;\n        }\n      };\n      \n      return () => {\n        try {\n          javascriptNode.disconnect();\n          analyser.disconnect();\n          microphone.disconnect();\n          if (audioContext.state !== 'closed') {\n            audioContext.close();\n          }\n        } catch (error) {\n          console.error('Error cleaning up audio monitoring:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Error setting up audio monitoring:', error);\n      return null;\n    }\n  };\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Handle key press to end call\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        handleEndCall();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen]);\n  \n  // Mouse movement handler to show/hide controls\n  useEffect(() => {\n    let timer;\n    \n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (callStatus === 'active' && now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(timer);\n    };\n  }, [callStatus, showControls]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    console.log('[VideoCallScreen] User ending call');\n    webRTCService.endCall(true);\n  };\n  \n  // FORCE ACTIVE on mount\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    // Force check WebRTC state after a delay\n    const initialTimeouts = [1000, 2000, 3000, 5000].map(delay => \n      setTimeout(() => {\n        const isServiceActive = webRTCService?.isCallActive();\n        console.log(`[VideoCallScreen] Delayed check (${delay}ms): WebRTC active: ${isServiceActive}, UI: ${callStatus}`);\n        \n        if (isServiceActive && callStatus !== 'active') {\n          console.log(`[VideoCallScreen] Forcing active state after ${delay}ms delay`);\n          updateCallStatus('active');\n        }\n        \n        // IMPORTANT: If there's a remote video stream, force active\n        if (remoteVideoRef.current?.srcObject?.getTracks().length > 0) {\n          console.log(`[VideoCallScreen] Remote video has tracks at ${delay}ms, forcing active`);\n          updateCallStatus('active');\n        }\n      }, delay)\n    );\n    \n    return () => initialTimeouts.forEach(clearTimeout);\n  }, [isOpen]);\n  \n  if (!isOpen) return null;\n  \n  // Enhanced rendering logic - show video in more cases\n  const shouldShowVideo = \n    callStatus === 'active' || \n    hasMedia.current || \n    forceDisplay || \n    webRTCService?.isCallActive() ||\n    (remoteVideoRef.current && remoteVideoRef.current.srcObject && \n     remoteVideoRef.current.srcObject.getTracks().length > 0);\n  \n  console.log(`[VideoCallScreen] Render decision - callStatus: ${callStatus}, shouldShowVideo: ${shouldShowVideo}`);\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        \n        {shouldShowVideo ? (\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n          >\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls}\n            />\n          </VideoDisplay>\n        ) : callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : (\n          <ConnectingState doctor={doctor} colors={colors} />\n        )}\n        \n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n      </div>\n      \n      <style jsx>{`\n        @keyframes pulse {\n          0%, 100% { opacity: 0.5; transform: scale(1); }\n          50% { opacity: 1; transform: scale(1.2); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}