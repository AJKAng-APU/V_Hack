{"ast":null,"code":"// api.js - Client for communicating with Python backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n/**\n * API client for communicating with the Python backend\n */\nclass ApiClient {\n  /**\n   * Authenticate with Google Fit\n   * @param {string} authCode - Google OAuth2 authorization code\n   * @returns {Promise} - Resolves to the authentication status\n   */\n  async authenticateGoogleFit(authCode) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/google-fit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          authCode\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to authenticate with Google Fit');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Google Fit authentication error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch health data from Google Fit via the Python backend\n   * @param {Object} options - Options to customize the data retrieval\n   * @param {number} options.days - Number of days to fetch data for\n   * @param {Array} options.fields - Specific fields to fetch\n   * @returns {Promise} - Resolves to the health data\n   */\n  async fetchHealthData(options = {\n    days: 30,\n    fields: null\n  }) {\n    try {\n      const queryParams = new URLSearchParams();\n      queryParams.append('days', options.days);\n      if (options.fields && Array.isArray(options.fields)) {\n        options.fields.forEach(field => queryParams.append('fields', field));\n      }\n      const response = await fetch(`${API_BASE_URL}/health-data?${queryParams}`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to fetch health data');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get an AI-generated health insight based on symptoms and metrics\n   * @param {Object} data - Combined symptom and health metric data\n   * @returns {Promise} - Resolves to the AI-generated insight\n   */\n  async getHealthInsight(data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai/insights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get AI insights');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get AI insights:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get biorhythm advice based on chronotype and health data\n   * @param {string} chronotype - User's chronotype (e.g., \"morning\", \"evening\")\n   * @param {string} medicationTime - Preferred medication time\n   * @returns {Promise} - Resolves to biorhythm advice\n   */\n  async getBiorhythmAdvice(chronotype, medicationTime) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/biorhythm/advice`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chronotype,\n          medicationTime\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get biorhythm advice');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a new symptom with health context\n   * @param {Object} symptomData - The symptom data to submit\n   * @returns {Promise} - Resolves when the symptom is saved\n   */\n  async submitSymptom(symptomData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/symptoms`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(symptomData),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to submit symptom');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to submit symptom:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get prediction results based on health metrics\n   * @param {Object} healthMetrics - The health metrics to analyze\n   * @returns {Promise} - Resolves to the prediction results\n   */\n  async getPrediction(healthMetrics) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/prediction`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(healthMetrics),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get prediction');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get environment health advice based on user's location\n   * @returns {Promise} - Resolves to environment health advice\n   */\n  async getEnvironmentAdvice() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/environment/advice`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get environment advice');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get environment advice:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Mock method to generate demo data when backend is unavailable\n   * @returns {Object} - Demo health data\n   */\n  generateMockHealthData() {\n    return {\n      height: 1.75,\n      weight: 70.5,\n      BMI: 23.0,\n      systolic: 120,\n      diastolic: 80,\n      glucose: 95,\n      sleep_time: \"23:30\",\n      wake_time: \"07:15\",\n      age: 35\n    };\n  }\n\n  /**\n   * Mock method to generate demo symptoms when backend is unavailable\n   * @returns {Array} - Demo symptoms\n   */\n  generateMockSymptoms() {\n    return [{\n      id: 1,\n      symptom: \"Headache\",\n      severity: \"Moderate\",\n      time: \"15:30\",\n      date: \"April 20, 2025\",\n      notes: \"Throbbing pain on left side of head, started after working on computer for 3 hours\",\n      triggers: [\"Screen time\", \"Stress\"],\n      associatedSymptoms: [\"Fatigue\"]\n    }, {\n      id: 2,\n      symptom: \"Nausea\",\n      severity: \"Mild\",\n      time: \"08:45\",\n      date: \"April 21, 2025\",\n      notes: \"Felt queasy after breakfast, subsided after 30 minutes\",\n      triggers: [\"Coffee\"],\n      associatedSymptoms: [\"Dizziness\"]\n    }];\n  }\n\n  /**\n   * Mock method to generate demo AI insights when backend is unavailable\n   * @returns {Object} - Demo AI insights\n   */\n  generateMockAIInsights() {\n    return {\n      pattern: \"Your headaches tend to occur after extended screen time and coincide with slightly elevated blood pressure. The most common time is afternoon (between 2-4pm).\",\n      recommendation: \"Consider implementing the 20-20-20 rule while working (every 20 minutes, look at something 20 feet away for 20 seconds). Stay hydrated and take short walking breaks every hour.\",\n      relatedMetrics: [\"blood pressure\", \"screen time\", \"stress\"]\n    };\n  }\n}\nexport default new ApiClient();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiClient","authenticateGoogleFit","authCode","response","fetch","method","headers","body","JSON","stringify","credentials","ok","errorData","json","catch","Error","detail","error","console","fetchHealthData","options","days","fields","queryParams","URLSearchParams","append","Array","isArray","forEach","field","getHealthInsight","data","getBiorhythmAdvice","chronotype","medicationTime","submitSymptom","symptomData","getPrediction","healthMetrics","getEnvironmentAdvice","generateMockHealthData","height","weight","BMI","systolic","diastolic","glucose","sleep_time","wake_time","age","generateMockSymptoms","id","symptom","severity","time","date","notes","triggers","associatedSymptoms","generateMockAIInsights","pattern","recommendation","relatedMetrics"],"sources":["/Users/ang/V_Hack_Ver4/frontend2/src/components/ApiClient.js"],"sourcesContent":["// api.js - Client for communicating with Python backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n/**\n * API client for communicating with the Python backend\n */\nclass ApiClient {\n  /**\n   * Authenticate with Google Fit\n   * @param {string} authCode - Google OAuth2 authorization code\n   * @returns {Promise} - Resolves to the authentication status\n   */\n  async authenticateGoogleFit(authCode) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/google-fit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ authCode }),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to authenticate with Google Fit');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Google Fit authentication error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch health data from Google Fit via the Python backend\n   * @param {Object} options - Options to customize the data retrieval\n   * @param {number} options.days - Number of days to fetch data for\n   * @param {Array} options.fields - Specific fields to fetch\n   * @returns {Promise} - Resolves to the health data\n   */\n  async fetchHealthData(options = { days: 30, fields: null }) {\n    try {\n      const queryParams = new URLSearchParams();\n      queryParams.append('days', options.days);\n      \n      if (options.fields && Array.isArray(options.fields)) {\n        options.fields.forEach(field => queryParams.append('fields', field));\n      }\n      \n      const response = await fetch(`${API_BASE_URL}/health-data?${queryParams}`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to fetch health data');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get an AI-generated health insight based on symptoms and metrics\n   * @param {Object} data - Combined symptom and health metric data\n   * @returns {Promise} - Resolves to the AI-generated insight\n   */\n  async getHealthInsight(data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai/insights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get AI insights');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get AI insights:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get biorhythm advice based on chronotype and health data\n   * @param {string} chronotype - User's chronotype (e.g., \"morning\", \"evening\")\n   * @param {string} medicationTime - Preferred medication time\n   * @returns {Promise} - Resolves to biorhythm advice\n   */\n  async getBiorhythmAdvice(chronotype, medicationTime) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/biorhythm/advice`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ chronotype, medicationTime }),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get biorhythm advice');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a new symptom with health context\n   * @param {Object} symptomData - The symptom data to submit\n   * @returns {Promise} - Resolves when the symptom is saved\n   */\n  async submitSymptom(symptomData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/symptoms`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(symptomData),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to submit symptom');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Failed to submit symptom:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get prediction results based on health metrics\n   * @param {Object} healthMetrics - The health metrics to analyze\n   * @returns {Promise} - Resolves to the prediction results\n   */\n  async getPrediction(healthMetrics) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/prediction`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(healthMetrics),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get prediction');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get environment health advice based on user's location\n   * @returns {Promise} - Resolves to environment health advice\n   */\n  async getEnvironmentAdvice() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/environment/advice`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || 'Failed to get environment advice');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get environment advice:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Mock method to generate demo data when backend is unavailable\n   * @returns {Object} - Demo health data\n   */\n  generateMockHealthData() {\n    return {\n      height: 1.75,\n      weight: 70.5,\n      BMI: 23.0,\n      systolic: 120,\n      diastolic: 80,\n      glucose: 95,\n      sleep_time: \"23:30\",\n      wake_time: \"07:15\",\n      age: 35\n    };\n  }\n  \n  /**\n   * Mock method to generate demo symptoms when backend is unavailable\n   * @returns {Array} - Demo symptoms\n   */\n  generateMockSymptoms() {\n    return [\n      {\n        id: 1,\n        symptom: \"Headache\",\n        severity: \"Moderate\",\n        time: \"15:30\",\n        date: \"April 20, 2025\",\n        notes: \"Throbbing pain on left side of head, started after working on computer for 3 hours\",\n        triggers: [\"Screen time\", \"Stress\"],\n        associatedSymptoms: [\"Fatigue\"]\n      },\n      {\n        id: 2,\n        symptom: \"Nausea\",\n        severity: \"Mild\",\n        time: \"08:45\",\n        date: \"April 21, 2025\",\n        notes: \"Felt queasy after breakfast, subsided after 30 minutes\",\n        triggers: [\"Coffee\"],\n        associatedSymptoms: [\"Dizziness\"]\n      }\n    ];\n  }\n  \n  /**\n   * Mock method to generate demo AI insights when backend is unavailable\n   * @returns {Object} - Demo AI insights\n   */\n  generateMockAIInsights() {\n    return {\n      pattern: \"Your headaches tend to occur after extended screen time and coincide with slightly elevated blood pressure. The most common time is afternoon (between 2-4pm).\",\n      recommendation: \"Consider implementing the 20-20-20 rule while working (every 20 minutes, look at something 20 feet away for 20 seconds). Stay hydrated and take short walking breaks every hour.\",\n      relatedMetrics: [\"blood pressure\", \"screen time\", \"stress\"]\n    };\n  }\n}\n\nexport default new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}