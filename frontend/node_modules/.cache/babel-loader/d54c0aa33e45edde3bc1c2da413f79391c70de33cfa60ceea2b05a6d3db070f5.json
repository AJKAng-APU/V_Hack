{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver4_2/frontend2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport HealthAssistantUI from './components';\nimport GlobalCallUI from './components/screens/GlobalCallUI';\nimport DoctorAvailabilityIndicator from './components/screens/DoctorAvailabilityIndicator';\nimport FloatingCallButton from './components/shared/FloatingCallButton.jsx';\nimport { useAuth } from './components/AuthProvider';\nimport useGlobalCallStore from './components/services/GlobalCallService';\nimport webRTCService from './components/services/WebRTCService';\nimport { HealthDataProvider } from './components/HealthDataContext';\nimport { ApiMiddlewareProvider } from './components/ApiMiddleware';\nimport { useTheme } from './components/ThemeContext';\n\n// Theme color configuration\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst themeColors = {\n  light: {\n    primary: '#2563EB',\n    accent: '#0EA5E9',\n    success: '#10B981',\n    warning: '#F59E0B',\n    danger: '#EF4444',\n    info: '#6366F1',\n    gradientAlt1: '#7C3AED',\n    gradientAlt2: '#3B82F6',\n    accentAlt: '#EC4899',\n    primaryLight: '#DBEAFE',\n    textPrimary: '#1F2937',\n    textSecondary: '#6B7280',\n    cardBg: 'white',\n    darkBg: 'white'\n  },\n  dark: {\n    primary: '#3B82F6',\n    accent: '#0EA5E9',\n    success: '#10B981',\n    warning: '#F59E0B',\n    danger: '#EF4444',\n    info: '#818CF8',\n    gradientAlt1: '#8B5CF6',\n    gradientAlt2: '#3B82F6',\n    accentAlt: '#EC4899',\n    primaryLight: '#1E3A8A',\n    textPrimary: '#F9FAFB',\n    textSecondary: '#9CA3AF',\n    cardBg: '#1F2937',\n    darkBg: '#111827'\n  }\n};\nfunction App() {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const {\n    loadAvailableDoctors,\n    setIncomingCall\n  } = useGlobalCallStore();\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // Get the appropriate color theme based on dark mode setting\n  const colors = isDarkMode ? themeColors.dark : themeColors.light;\n\n  // Set up WebRTC event listeners for incoming calls\n  useEffect(() => {\n    if (isAuthenticated && !(user !== null && user !== void 0 && user.isDoctor)) {\n      // Load available doctors on app start\n      loadAvailableDoctors();\n\n      // Only set up incoming call handling for patients (not doctors)\n      const setupIncomingCallHandler = () => {\n        // Generate a unique user ID if not already set\n        const userId = localStorage.getItem('user_instance_id') || `user-${Math.random().toString(36).substring(2, 15)}`;\n\n        // Store the ID for future use\n        if (!localStorage.getItem('user_instance_id')) {\n          localStorage.setItem('user_instance_id', userId);\n        }\n\n        // Initialize WebRTC with callbacks\n        webRTCService.initialize(userId, {\n          onIncomingCall: callerId => {\n            console.log('App received incoming call from:', callerId);\n\n            // Try to find the doctor in our data\n            useGlobalCallStore.getState().loadAvailableDoctors().then(() => {\n              const doctors = useGlobalCallStore.getState().availableDoctors;\n              const callerDoctorId = parseInt(callerId.replace('doctor-', ''));\n\n              // Find the doctor or create a placeholder\n              const callingDoctor = doctors.find(doc => doc.id === callerDoctorId) || {\n                id: callerDoctorId,\n                name: `Doctor ${callerId.replace('doctor-', '')}`,\n                specialty: \"Medical Professional\",\n                image: \"https://randomuser.me/api/portraits/men/32.jpg\",\n                availability: \"Available now\",\n                rating: 5\n              };\n\n              // Set incoming call in global store\n              setIncomingCall({\n                doctor: callingDoctor,\n                timestamp: Date.now(),\n                id: `call-${Date.now()}`\n              });\n            });\n          }\n        });\n\n        // Register with signaling server\n        setTimeout(() => {\n          if (webRTCService.signalingService && webRTCService.signalingService.isConnected()) {\n            webRTCService.signalingService.send('register', userId);\n            console.log('Registered with signaling server as:', userId);\n          }\n        }, 1000);\n      };\n      setupIncomingCallHandler();\n\n      // Set up interval to ensure registration with signaling server\n      const registrationInterval = setInterval(() => {\n        const userId = localStorage.getItem('user_instance_id');\n        if (userId && webRTCService.signalingService && webRTCService.signalingService.isConnected()) {\n          webRTCService.signalingService.send('register', userId);\n        }\n      }, 30000); // Re-register every 30 seconds\n\n      return () => {\n        clearInterval(registrationInterval);\n      };\n    }\n  }, [isAuthenticated, user, loadAvailableDoctors, setIncomingCall]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ApiMiddlewareProvider, {\n      colors: colors,\n      children: /*#__PURE__*/_jsxDEV(HealthDataProvider, {\n        children: [/*#__PURE__*/_jsxDEV(HealthAssistantUI, {\n          colors: colors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), isAuthenticated && !(user !== null && user !== void 0 && user.isDoctor) && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DoctorAvailabilityIndicator, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(GlobalCallUI, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FloatingCallButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"v3LzhK6x0ox9uvsPU66+Pgeow8k=\", false, function () {\n  return [useAuth, useGlobalCallStore, useTheme];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","HealthAssistantUI","GlobalCallUI","DoctorAvailabilityIndicator","FloatingCallButton","useAuth","useGlobalCallStore","webRTCService","HealthDataProvider","ApiMiddlewareProvider","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","themeColors","light","primary","accent","success","warning","danger","info","gradientAlt1","gradientAlt2","accentAlt","primaryLight","textPrimary","textSecondary","cardBg","darkBg","dark","App","_s","user","isAuthenticated","loadAvailableDoctors","setIncomingCall","isDarkMode","colors","isDoctor","setupIncomingCallHandler","userId","localStorage","getItem","Math","random","toString","substring","setItem","initialize","onIncomingCall","callerId","console","log","getState","then","doctors","availableDoctors","callerDoctorId","parseInt","replace","callingDoctor","find","doc","id","name","specialty","image","availability","rating","doctor","timestamp","Date","now","setTimeout","signalingService","isConnected","send","registrationInterval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver4_2/frontend2/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport HealthAssistantUI from './components';\nimport GlobalCallUI from './components/screens/GlobalCallUI';\nimport DoctorAvailabilityIndicator from './components/screens/DoctorAvailabilityIndicator';\nimport FloatingCallButton from './components/shared/FloatingCallButton.jsx';\nimport { useAuth } from './components/AuthProvider';\nimport useGlobalCallStore from './components/services/GlobalCallService';\nimport webRTCService from './components/services/WebRTCService';\nimport { HealthDataProvider } from './components/HealthDataContext';\nimport { ApiMiddlewareProvider } from './components/ApiMiddleware';\nimport { useTheme } from './components/ThemeContext';\n\n// Theme color configuration\nconst themeColors = {\n  light: {\n    primary: '#2563EB',\n    accent: '#0EA5E9',\n    success: '#10B981',\n    warning: '#F59E0B',\n    danger: '#EF4444',\n    info: '#6366F1',\n    gradientAlt1: '#7C3AED',\n    gradientAlt2: '#3B82F6',\n    accentAlt: '#EC4899',\n    primaryLight: '#DBEAFE',\n    textPrimary: '#1F2937',\n    textSecondary: '#6B7280',\n    cardBg: 'white',\n    darkBg: 'white'\n  },\n  dark: {\n    primary: '#3B82F6',\n    accent: '#0EA5E9',\n    success: '#10B981',\n    warning: '#F59E0B',\n    danger: '#EF4444',\n    info: '#818CF8',\n    gradientAlt1: '#8B5CF6',\n    gradientAlt2: '#3B82F6',\n    accentAlt: '#EC4899',\n    primaryLight: '#1E3A8A',\n    textPrimary: '#F9FAFB',\n    textSecondary: '#9CA3AF',\n    cardBg: '#1F2937',\n    darkBg: '#111827'\n  }\n};\n\nfunction App() {\n  const { user, isAuthenticated } = useAuth();\n  const { loadAvailableDoctors, setIncomingCall } = useGlobalCallStore();\n  const { isDarkMode } = useTheme();\n  \n  // Get the appropriate color theme based on dark mode setting\n  const colors = isDarkMode ? themeColors.dark : themeColors.light;\n  \n  // Set up WebRTC event listeners for incoming calls\n  useEffect(() => {\n    if (isAuthenticated && !user?.isDoctor) {\n      // Load available doctors on app start\n      loadAvailableDoctors();\n      \n      // Only set up incoming call handling for patients (not doctors)\n      const setupIncomingCallHandler = () => {\n        // Generate a unique user ID if not already set\n        const userId = localStorage.getItem('user_instance_id') ||\n                      `user-${Math.random().toString(36).substring(2, 15)}`;\n        \n        // Store the ID for future use\n        if (!localStorage.getItem('user_instance_id')) {\n          localStorage.setItem('user_instance_id', userId);\n        }\n        \n        // Initialize WebRTC with callbacks\n        webRTCService.initialize(userId, {\n          onIncomingCall: (callerId) => {\n            console.log('App received incoming call from:', callerId);\n            \n            // Try to find the doctor in our data\n            useGlobalCallStore.getState().loadAvailableDoctors().then(() => {\n              const doctors = useGlobalCallStore.getState().availableDoctors;\n              const callerDoctorId = parseInt(callerId.replace('doctor-', ''));\n              \n              // Find the doctor or create a placeholder\n              const callingDoctor = doctors.find(doc => doc.id === callerDoctorId) || {\n                id: callerDoctorId,\n                name: `Doctor ${callerId.replace('doctor-', '')}`,\n                specialty: \"Medical Professional\",\n                image: \"https://randomuser.me/api/portraits/men/32.jpg\",\n                availability: \"Available now\",\n                rating: 5\n              };\n              \n              // Set incoming call in global store\n              setIncomingCall({\n                doctor: callingDoctor,\n                timestamp: Date.now(),\n                id: `call-${Date.now()}`\n              });\n            });\n          }\n        });\n        \n        // Register with signaling server\n        setTimeout(() => {\n          if (webRTCService.signalingService && \n              webRTCService.signalingService.isConnected()) {\n            webRTCService.signalingService.send('register', userId);\n            console.log('Registered with signaling server as:', userId);\n          }\n        }, 1000);\n      };\n      \n      setupIncomingCallHandler();\n      \n      // Set up interval to ensure registration with signaling server\n      const registrationInterval = setInterval(() => {\n        const userId = localStorage.getItem('user_instance_id');\n        if (userId && webRTCService.signalingService && \n            webRTCService.signalingService.isConnected()) {\n          webRTCService.signalingService.send('register', userId);\n        }\n      }, 30000); // Re-register every 30 seconds\n      \n      return () => {\n        clearInterval(registrationInterval);\n      };\n    }\n  }, [isAuthenticated, user, loadAvailableDoctors, setIncomingCall]);\n  \n  return (\n    <div className=\"App\">\n      {/* Wrap with providers in the correct order */}\n      <ApiMiddlewareProvider colors={colors}>\n        <HealthDataProvider>\n          <HealthAssistantUI colors={colors} />\n          \n          {/* Only show call-related UI components for authenticated patients */}\n          {isAuthenticated && !user?.isDoctor && (\n            <>\n              <DoctorAvailabilityIndicator />\n              <GlobalCallUI />\n              <FloatingCallButton />\n            </>\n          )}\n        </HealthDataProvider>\n      </ApiMiddlewareProvider>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,iBAAiB,MAAM,cAAc;AAC5C,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,2BAA2B,MAAM,kDAAkD;AAC1F,OAAOC,kBAAkB,MAAM,4CAA4C;AAC3E,SAASC,OAAO,QAAQ,2BAA2B;AACnD,OAAOC,kBAAkB,MAAM,yCAAyC;AACxE,OAAOC,aAAa,MAAM,qCAAqC;AAC/D,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,QAAQ,QAAQ,2BAA2B;;AAEpD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE;IACLC,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAE,SAAS;IACjBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAE,SAAS;IACjBC,IAAI,EAAE,SAAS;IACfC,YAAY,EAAE,SAAS;IACvBC,YAAY,EAAE,SAAS;IACvBC,SAAS,EAAE,SAAS;IACpBC,YAAY,EAAE,SAAS;IACvBC,WAAW,EAAE,SAAS;IACtBC,aAAa,EAAE,SAAS;IACxBC,MAAM,EAAE,OAAO;IACfC,MAAM,EAAE;EACV,CAAC;EACDC,IAAI,EAAE;IACJd,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAE,SAAS;IACjBC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAE,SAAS;IACjBC,IAAI,EAAE,SAAS;IACfC,YAAY,EAAE,SAAS;IACvBC,YAAY,EAAE,SAAS;IACvBC,SAAS,EAAE,SAAS;IACpBC,YAAY,EAAE,SAAS;IACvBC,WAAW,EAAE,SAAS;IACtBC,aAAa,EAAE,SAAS;IACxBC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACV;AACF,CAAC;AAED,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM;IAAEC,IAAI;IAAEC;EAAgB,CAAC,GAAG9B,OAAO,CAAC,CAAC;EAC3C,MAAM;IAAE+B,oBAAoB;IAAEC;EAAgB,CAAC,GAAG/B,kBAAkB,CAAC,CAAC;EACtE,MAAM;IAAEgC;EAAW,CAAC,GAAG5B,QAAQ,CAAC,CAAC;;EAEjC;EACA,MAAM6B,MAAM,GAAGD,UAAU,GAAGvB,WAAW,CAACgB,IAAI,GAAGhB,WAAW,CAACC,KAAK;;EAEhE;EACAhB,SAAS,CAAC,MAAM;IACd,IAAImC,eAAe,IAAI,EAACD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEM,QAAQ,GAAE;MACtC;MACAJ,oBAAoB,CAAC,CAAC;;MAEtB;MACA,MAAMK,wBAAwB,GAAGA,CAAA,KAAM;QACrC;QACA,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,IACzC,QAAQC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;;QAEnE;QACA,IAAI,CAACL,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,EAAE;UAC7CD,YAAY,CAACM,OAAO,CAAC,kBAAkB,EAAEP,MAAM,CAAC;QAClD;;QAEA;QACAnC,aAAa,CAAC2C,UAAU,CAACR,MAAM,EAAE;UAC/BS,cAAc,EAAGC,QAAQ,IAAK;YAC5BC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;;YAEzD;YACA9C,kBAAkB,CAACiD,QAAQ,CAAC,CAAC,CAACnB,oBAAoB,CAAC,CAAC,CAACoB,IAAI,CAAC,MAAM;cAC9D,MAAMC,OAAO,GAAGnD,kBAAkB,CAACiD,QAAQ,CAAC,CAAC,CAACG,gBAAgB;cAC9D,MAAMC,cAAc,GAAGC,QAAQ,CAACR,QAAQ,CAACS,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;;cAEhE;cACA,MAAMC,aAAa,GAAGL,OAAO,CAACM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKN,cAAc,CAAC,IAAI;gBACtEM,EAAE,EAAEN,cAAc;gBAClBO,IAAI,EAAE,UAAUd,QAAQ,CAACS,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,EAAE;gBACjDM,SAAS,EAAE,sBAAsB;gBACjCC,KAAK,EAAE,gDAAgD;gBACvDC,YAAY,EAAE,eAAe;gBAC7BC,MAAM,EAAE;cACV,CAAC;;cAED;cACAjC,eAAe,CAAC;gBACdkC,MAAM,EAAET,aAAa;gBACrBU,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;gBACrBT,EAAE,EAAE,QAAQQ,IAAI,CAACC,GAAG,CAAC,CAAC;cACxB,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;;QAEF;QACAC,UAAU,CAAC,MAAM;UACf,IAAIpE,aAAa,CAACqE,gBAAgB,IAC9BrE,aAAa,CAACqE,gBAAgB,CAACC,WAAW,CAAC,CAAC,EAAE;YAChDtE,aAAa,CAACqE,gBAAgB,CAACE,IAAI,CAAC,UAAU,EAAEpC,MAAM,CAAC;YACvDW,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEZ,MAAM,CAAC;UAC7D;QACF,CAAC,EAAE,IAAI,CAAC;MACV,CAAC;MAEDD,wBAAwB,CAAC,CAAC;;MAE1B;MACA,MAAMsC,oBAAoB,GAAGC,WAAW,CAAC,MAAM;QAC7C,MAAMtC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;QACvD,IAAIF,MAAM,IAAInC,aAAa,CAACqE,gBAAgB,IACxCrE,aAAa,CAACqE,gBAAgB,CAACC,WAAW,CAAC,CAAC,EAAE;UAChDtE,aAAa,CAACqE,gBAAgB,CAACE,IAAI,CAAC,UAAU,EAAEpC,MAAM,CAAC;QACzD;MACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAEX,OAAO,MAAM;QACXuC,aAAa,CAACF,oBAAoB,CAAC;MACrC,CAAC;IACH;EACF,CAAC,EAAE,CAAC5C,eAAe,EAAED,IAAI,EAAEE,oBAAoB,EAAEC,eAAe,CAAC,CAAC;EAElE,oBACEzB,OAAA;IAAKsE,SAAS,EAAC,KAAK;IAAAC,QAAA,eAElBvE,OAAA,CAACH,qBAAqB;MAAC8B,MAAM,EAAEA,MAAO;MAAA4C,QAAA,eACpCvE,OAAA,CAACJ,kBAAkB;QAAA2E,QAAA,gBACjBvE,OAAA,CAACX,iBAAiB;UAACsC,MAAM,EAAEA;QAAO;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAGpCpD,eAAe,IAAI,EAACD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEM,QAAQ,kBACjC5B,OAAA,CAAAE,SAAA;UAAAqE,QAAA,gBACEvE,OAAA,CAACT,2BAA2B;YAAAiF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC/B3E,OAAA,CAACV,YAAY;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAChB3E,OAAA,CAACR,kBAAkB;YAAAgF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA,eACtB,CACH;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACiB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV;AAACtD,EAAA,CArGQD,GAAG;EAAA,QACwB3B,OAAO,EACSC,kBAAkB,EAC7CI,QAAQ;AAAA;AAAA8E,EAAA,GAHxBxD,GAAG;AAuGZ,eAAeA,GAAG;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}