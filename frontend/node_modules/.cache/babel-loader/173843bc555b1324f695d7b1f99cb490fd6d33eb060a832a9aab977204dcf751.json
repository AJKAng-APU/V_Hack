{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver3/frontend2/src/components/AuthProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport supabase from './supabaseClient';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check if using demo account\n  const isDemoAccount = (user === null || user === void 0 ? void 0 : user.email) === 'demo@healthsync.com' || (user === null || user === void 0 ? void 0 : user.email) === 'doctor@healthsync.com';\n\n  // Initial auth check on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      setIsLoading(true);\n      try {\n        // First check localStorage for demo accounts\n        const isAuth = localStorage.getItem('healthsync_auth') === 'true';\n        const storedUser = localStorage.getItem('healthsync_user');\n        if (isAuth && storedUser) {\n          // Parse stored user\n          const parsedUser = JSON.parse(storedUser);\n          setUser(parsedUser);\n          setIsAuthenticated(true);\n          setIsLoading(false);\n          return;\n        }\n\n        // Otherwise check Supabase auth\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        if (session) {\n          // Get user profile from users table\n          const {\n            data: userData,\n            error: userError\n          } = await supabase.from('users').select('*, doctor:doctors(*)').eq('email', session.user.email).single();\n          if (userError) {\n            console.error('Error fetching user profile:', userError);\n            throw userError;\n          }\n\n          // Build user info object\n          const userInfo = {\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url,\n            emailVerified: session.user.email_confirmed_at !== null,\n            isDoctor: userData.is_doctor || false\n          };\n\n          // If user is a doctor, add doctor details\n          if (userData.is_doctor && userData.doctor) {\n            userInfo.doctorId = userData.doctor_id;\n            userInfo.specialty = userData.doctor.specialty;\n            userInfo.doctorAvailability = userData.doctor.availability;\n            userInfo.doctorRating = userData.doctor.rating;\n          }\n\n          // Get user preferences for 2FA\n          const {\n            data: prefsData\n          } = await supabase.from('user_preferences').select('two_factor_enabled, factor_id').eq('user_id', userData.user_id).single();\n          if (prefsData) {\n            userInfo.twoFactorEnabled = prefsData.two_factor_enabled;\n            userInfo.factorId = prefsData.factor_id;\n          }\n          setUser(userInfo);\n          setIsAuthenticated(true);\n        } else {\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n\n    // Set up auth state change listener\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session) {\n        // Handle sign in - fetch user profile\n        const {\n          data: userData,\n          error: userError\n        } = await supabase.from('users').select('*, doctor:doctors(*)').eq('email', session.user.email).single();\n        if (userError) {\n          console.error('Error fetching user profile on auth change:', userError);\n          return;\n        }\n\n        // Build user info\n        const userInfo = {\n          id: userData.user_id,\n          name: userData.name,\n          email: userData.email,\n          isPremium: userData.is_premium,\n          avatar: userData.avatar_url,\n          emailVerified: session.user.email_confirmed_at !== null,\n          isDoctor: userData.is_doctor || false\n        };\n\n        // Add doctor details if applicable\n        if (userData.is_doctor && userData.doctor) {\n          userInfo.doctorId = userData.doctor_id;\n          userInfo.specialty = userData.doctor.specialty;\n          userInfo.doctorAvailability = userData.doctor.availability;\n          userInfo.doctorRating = userData.doctor.rating;\n        }\n        setUser(userInfo);\n        setIsAuthenticated(true);\n      } else if (event === 'SIGNED_OUT') {\n        // Handle sign out\n        setUser(null);\n        setIsAuthenticated(false);\n        localStorage.removeItem('healthsync_auth');\n        localStorage.removeItem('healthsync_user');\n      }\n    });\n\n    // Clean up listener on unmount\n    return () => {\n      if (authListener && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // Sign in function\n  const signIn = async (email, password) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Sign in error:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Sign up function\n  const signUp = async (email, password, name) => {\n    try {\n      // First register with Supabase Auth\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback`\n        }\n      });\n      if (authError) throw authError;\n\n      // Then create user profile in database\n      const {\n        error: profileError\n      } = await supabase.from('users').insert([{\n        email,\n        name,\n        avatar_url: null,\n        // Default avatar\n        is_premium: false // Default to non-premium\n      }]);\n      if (profileError) throw profileError;\n      return {\n        success: true,\n        data: authData,\n        verificationEmailSent: true\n      };\n    } catch (error) {\n      console.error('Sign up error:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Sign out function\n  const signOut = async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n\n      // Clear local storage\n      localStorage.removeItem('healthsync_auth');\n      localStorage.removeItem('healthsync_user');\n      localStorage.removeItem('is_doctor');\n      localStorage.removeItem('doctor_id');\n      setUser(null);\n      setIsAuthenticated(false);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Sign out error:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Send verification email\n  const sendVerificationEmail = async email => {\n    try {\n      if (!email) {\n        return {\n          success: false,\n          error: 'Email is required'\n        };\n      }\n\n      // Send OTP to email\n      const {\n        error\n      } = await supabase.auth.resend({\n        type: 'signup',\n        email\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        message: 'Verification email sent! Please check your inbox (and spam folder).'\n      };\n    } catch (error) {\n      console.error('Error sending verification email:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async updates => {\n    try {\n      if (!user) {\n        return {\n          success: false,\n          error: 'Not authenticated'\n        };\n      }\n\n      // For demo accounts, just update local state\n      if (isDemoAccount) {\n        const updatedUser = {\n          ...user,\n          ...updates\n        };\n        setUser(updatedUser);\n        localStorage.setItem('healthsync_user', JSON.stringify(updatedUser));\n        return {\n          success: true\n        };\n      }\n\n      // Update user data in database\n      const {\n        error\n      } = await supabase.from('users').update(updates).eq('user_id', user.id);\n      if (error) throw error;\n\n      // Update preferences if 2FA settings included\n      if (updates.twoFactorEnabled !== undefined || updates.factorId !== undefined) {\n        const {\n          error: prefsError\n        } = await supabase.from('user_preferences').upsert({\n          user_id: user.id,\n          two_factor_enabled: updates.twoFactorEnabled,\n          factor_id: updates.factorId\n        }, {\n          onConflict: 'user_id'\n        });\n        if (prefsError) throw prefsError;\n      }\n\n      // Update local state\n      const updatedUser = {\n        ...user,\n        ...updates\n      };\n      setUser(updatedUser);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error updating user profile:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Reauthenticate user with password\n  const reauthenticate = async password => {\n    try {\n      if (!user || !user.email) {\n        return {\n          success: false,\n          error: 'Not authenticated'\n        };\n      }\n\n      // Use Supabase to sign in with the current email and provided password to verify\n      const {\n        error\n      } = await supabase.auth.signInWithPassword({\n        email: user.email,\n        password: password\n      });\n      if (error) {\n        console.error('Reauthentication failed:', error.message);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Error during reauthentication:', err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n\n  // MFA/2FA Functions\n  // Enroll in MFA/2FA\n  const enrollMFA = async password => {\n    try {\n      if (!user) {\n        return {\n          success: false,\n          error: 'Not authenticated'\n        };\n      }\n\n      // For demo accounts, simulate successful enrollment\n      if (isDemoAccount) {\n        return {\n          success: true,\n          factorId: 'demo-factor-id',\n          qrCode: 'https://via.placeholder.com/200x200.png?text=Demo+QR+Code',\n          secret: 'DEMOSECRETKEY123456'\n        };\n      }\n\n      // Start MFA enrollment\n      const {\n        data,\n        error\n      } = await supabase.auth.mfa.enroll({\n        factorType: 'totp' // Time-based one-time password\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        factorId: data.id,\n        qrCode: data.totp.qr_code,\n        secret: data.totp.secret\n      };\n    } catch (error) {\n      console.error('MFA enrollment error:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Verify MFA/2FA setup\n  const verifyMFA = async (factorId, code) => {\n    try {\n      if (!user) {\n        return {\n          success: false,\n          error: 'Not authenticated'\n        };\n      }\n\n      // For demo accounts, accept any 6-digit code\n      if (isDemoAccount) {\n        if (!/^\\d{6}$/.test(code)) {\n          return {\n            success: false,\n            error: 'Invalid code format'\n          };\n        }\n        return {\n          success: true\n        };\n      }\n\n      // Verify the TOTP code\n      const {\n        data,\n        error\n      } = await supabase.auth.mfa.verify({\n        factorId,\n        code\n      });\n      if (error) throw error;\n\n      // Update user preferences to mark 2FA as enabled\n      const {\n        error: updateError\n      } = await supabase.from('user_preferences').upsert({\n        user_id: user.id,\n        two_factor_enabled: true,\n        factor_id: factorId\n      }, {\n        onConflict: 'user_id'\n      });\n      if (updateError) throw updateError;\n\n      // Update local state\n      setUser({\n        ...user,\n        twoFactorEnabled: true,\n        factorId\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('MFA verification error:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Unenroll from MFA/2FA\n  const unenrollMFA = async factorId => {\n    try {\n      if (!user) {\n        return {\n          success: false,\n          error: 'Not authenticated'\n        };\n      }\n\n      // For demo accounts, simulate successful unenrollment\n      if (isDemoAccount) {\n        return {\n          success: true\n        };\n      }\n\n      // Unenroll from MFA\n      const {\n        error\n      } = await supabase.auth.mfa.unenroll({\n        factorId\n      });\n      if (error) throw error;\n\n      // Update user preferences to mark 2FA as disabled\n      const {\n        error: updateError\n      } = await supabase.from('user_preferences').update({\n        two_factor_enabled: false,\n        factor_id: null\n      }).eq('user_id', user.id);\n      if (updateError) throw updateError;\n\n      // Update local state\n      setUser({\n        ...user,\n        twoFactorEnabled: false,\n        factorId: null\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('MFA unenrollment error:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Generate backup codes for 2FA recovery\n  const generateBackupCodes = async userId => {\n    try {\n      if (!user) {\n        return {\n          success: false,\n          error: 'Not authenticated'\n        };\n      }\n\n      // For demo accounts, return mock backup codes\n      if (isDemoAccount) {\n        const mockCodes = ['DEMO-12345-ABCDE', 'DEMO-67890-FGHIJ', 'DEMO-13579-KLMNO', 'DEMO-24680-PQRST', 'DEMO-98765-UVWXY', 'DEMO-54321-ZABCD', 'DEMO-11111-EFGHI', 'DEMO-22222-JKLMN', 'DEMO-33333-OPQRS', 'DEMO-44444-TUVWX'];\n        return {\n          success: true,\n          codes: mockCodes\n        };\n      }\n\n      // Generate 10 random backup codes\n      const generateRandomCode = () => {\n        const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        let code = '';\n        for (let i = 0; i < 10; i++) {\n          code += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return code.match(/.{1,5}/g).join('-');\n      };\n      const backupCodes = Array.from({\n        length: 10\n      }, generateRandomCode);\n\n      // Delete existing backup codes\n      const {\n        error: deleteError\n      } = await supabase.from('user_backup_codes').delete().eq('user_id', userId);\n      if (deleteError) throw deleteError;\n\n      // Insert new backup codes\n      const codesForInsert = backupCodes.map(code => ({\n        user_id: userId,\n        code,\n        used: false,\n        created_at: new Date().toISOString()\n      }));\n      const {\n        error: insertError\n      } = await supabase.from('user_backup_codes').insert(codesForInsert);\n      if (insertError) throw insertError;\n      return {\n        success: true,\n        codes: backupCodes\n      };\n    } catch (error) {\n      console.error('Error generating backup codes:', error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Provide the auth context value\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      isDemoAccount,\n      signIn,\n      signOut,\n      signUp,\n      sendVerificationEmail,\n      updateUserProfile,\n      enrollMFA,\n      verifyMFA,\n      unenrollMFA,\n      generateBackupCodes,\n      reauthenticate\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 521,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"v1LRzRO747hYRtRdhUIJv9BiM4M=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","isDemoAccount","email","checkAuth","isAuth","localStorage","getItem","storedUser","parsedUser","JSON","parse","data","session","auth","getSession","userData","error","userError","from","select","eq","single","console","userInfo","id","user_id","name","isPremium","is_premium","avatar","avatar_url","emailVerified","email_confirmed_at","isDoctor","is_doctor","doctor","doctorId","doctor_id","specialty","doctorAvailability","availability","doctorRating","rating","prefsData","twoFactorEnabled","two_factor_enabled","factorId","factor_id","authListener","onAuthStateChange","event","removeItem","subscription","unsubscribe","signIn","password","signInWithPassword","success","message","signUp","authData","authError","options","emailRedirectTo","window","location","origin","profileError","insert","verificationEmailSent","signOut","sendVerificationEmail","resend","type","updateUserProfile","updates","updatedUser","setItem","stringify","update","undefined","prefsError","upsert","onConflict","reauthenticate","err","enrollMFA","qrCode","secret","mfa","enroll","factorType","totp","qr_code","verifyMFA","code","test","verify","updateError","unenrollMFA","unenroll","generateBackupCodes","userId","mockCodes","codes","generateRandomCode","chars","i","charAt","Math","floor","random","length","match","join","backupCodes","Array","deleteError","delete","codesForInsert","map","used","created_at","Date","toISOString","insertError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver3/frontend2/src/components/AuthProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport supabase from './supabaseClient';\n\n// Create auth context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Check if using demo account\n  const isDemoAccount = user?.email === 'demo@healthsync.com' || user?.email === 'doctor@healthsync.com';\n\n  // Initial auth check on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      setIsLoading(true);\n      \n      try {\n        // First check localStorage for demo accounts\n        const isAuth = localStorage.getItem('healthsync_auth') === 'true';\n        const storedUser = localStorage.getItem('healthsync_user');\n        \n        if (isAuth && storedUser) {\n          // Parse stored user\n          const parsedUser = JSON.parse(storedUser);\n          setUser(parsedUser);\n          setIsAuthenticated(true);\n          setIsLoading(false);\n          return;\n        }\n        \n        // Otherwise check Supabase auth\n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (session) {\n          // Get user profile from users table\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('*, doctor:doctors(*)')\n            .eq('email', session.user.email)\n            .single();\n            \n          if (userError) {\n            console.error('Error fetching user profile:', userError);\n            throw userError;\n          }\n          \n          // Build user info object\n          const userInfo = {\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url,\n            emailVerified: session.user.email_confirmed_at !== null,\n            isDoctor: userData.is_doctor || false\n          };\n          \n          // If user is a doctor, add doctor details\n          if (userData.is_doctor && userData.doctor) {\n            userInfo.doctorId = userData.doctor_id;\n            userInfo.specialty = userData.doctor.specialty;\n            userInfo.doctorAvailability = userData.doctor.availability;\n            userInfo.doctorRating = userData.doctor.rating;\n          }\n          \n          // Get user preferences for 2FA\n          const { data: prefsData } = await supabase\n            .from('user_preferences')\n            .select('two_factor_enabled, factor_id')\n            .eq('user_id', userData.user_id)\n            .single();\n            \n          if (prefsData) {\n            userInfo.twoFactorEnabled = prefsData.two_factor_enabled;\n            userInfo.factorId = prefsData.factor_id;\n          }\n          \n          setUser(userInfo);\n          setIsAuthenticated(true);\n        } else {\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        console.error('Auth check error:', error);\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    checkAuth();\n    \n    // Set up auth state change listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (event === 'SIGNED_IN' && session) {\n          // Handle sign in - fetch user profile\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('*, doctor:doctors(*)')\n            .eq('email', session.user.email)\n            .single();\n            \n          if (userError) {\n            console.error('Error fetching user profile on auth change:', userError);\n            return;\n          }\n          \n          // Build user info\n          const userInfo = {\n            id: userData.user_id,\n            name: userData.name,\n            email: userData.email,\n            isPremium: userData.is_premium,\n            avatar: userData.avatar_url,\n            emailVerified: session.user.email_confirmed_at !== null,\n            isDoctor: userData.is_doctor || false\n          };\n          \n          // Add doctor details if applicable\n          if (userData.is_doctor && userData.doctor) {\n            userInfo.doctorId = userData.doctor_id;\n            userInfo.specialty = userData.doctor.specialty;\n            userInfo.doctorAvailability = userData.doctor.availability;\n            userInfo.doctorRating = userData.doctor.rating;\n          }\n          \n          setUser(userInfo);\n          setIsAuthenticated(true);\n        } else if (event === 'SIGNED_OUT') {\n          // Handle sign out\n          setUser(null);\n          setIsAuthenticated(false);\n          localStorage.removeItem('healthsync_auth');\n          localStorage.removeItem('healthsync_user');\n        }\n      }\n    );\n    \n    // Clean up listener on unmount\n    return () => {\n      if (authListener && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  // Sign in function\n  const signIn = async (email, password) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      \n      if (error) throw error;\n      \n      return { success: true, data };\n    } catch (error) {\n      console.error('Sign in error:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Sign up function\n  const signUp = async (email, password, name) => {\n    try {\n      // First register with Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback`\n        }\n      });\n      \n      if (authError) throw authError;\n      \n      // Then create user profile in database\n      const { error: profileError } = await supabase\n        .from('users')\n        .insert([\n          {\n            email,\n            name,\n            avatar_url: null, // Default avatar\n            is_premium: false // Default to non-premium\n          }\n        ]);\n        \n      if (profileError) throw profileError;\n      \n      return {\n        success: true,\n        data: authData,\n        verificationEmailSent: true\n      };\n    } catch (error) {\n      console.error('Sign up error:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Sign out function\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      // Clear local storage\n      localStorage.removeItem('healthsync_auth');\n      localStorage.removeItem('healthsync_user');\n      localStorage.removeItem('is_doctor');\n      localStorage.removeItem('doctor_id');\n      \n      setUser(null);\n      setIsAuthenticated(false);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Sign out error:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Send verification email\n  const sendVerificationEmail = async (email) => {\n    try {\n      if (!email) {\n        return { success: false, error: 'Email is required' };\n      }\n      \n      // Send OTP to email\n      const { error } = await supabase.auth.resend({\n        type: 'signup',\n        email\n      });\n      \n      if (error) throw error;\n      \n      return { \n        success: true, \n        message: 'Verification email sent! Please check your inbox (and spam folder).' \n      };\n    } catch (error) {\n      console.error('Error sending verification email:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Update user profile\n  const updateUserProfile = async (updates) => {\n    try {\n      if (!user) {\n        return { success: false, error: 'Not authenticated' };\n      }\n      \n      // For demo accounts, just update local state\n      if (isDemoAccount) {\n        const updatedUser = { ...user, ...updates };\n        setUser(updatedUser);\n        localStorage.setItem('healthsync_user', JSON.stringify(updatedUser));\n        return { success: true };\n      }\n      \n      // Update user data in database\n      const { error } = await supabase\n        .from('users')\n        .update(updates)\n        .eq('user_id', user.id);\n        \n      if (error) throw error;\n      \n      // Update preferences if 2FA settings included\n      if (updates.twoFactorEnabled !== undefined || updates.factorId !== undefined) {\n        const { error: prefsError } = await supabase\n          .from('user_preferences')\n          .upsert({\n            user_id: user.id,\n            two_factor_enabled: updates.twoFactorEnabled,\n            factor_id: updates.factorId\n          }, { onConflict: 'user_id' });\n          \n        if (prefsError) throw prefsError;\n      }\n      \n      // Update local state\n      const updatedUser = { ...user, ...updates };\n      setUser(updatedUser);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user profile:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Reauthenticate user with password\n  const reauthenticate = async (password) => {\n    try {\n      if (!user || !user.email) {\n        return { success: false, error: 'Not authenticated' };\n      }\n      \n      // Use Supabase to sign in with the current email and provided password to verify\n      const { error } = await supabase.auth.signInWithPassword({\n        email: user.email,\n        password: password\n      });\n      \n      if (error) {\n        console.error('Reauthentication failed:', error.message);\n        return { success: false, error: error.message };\n      }\n      \n      return { success: true };\n    } catch (err) {\n      console.error('Error during reauthentication:', err.message);\n      return { success: false, error: err.message };\n    }\n  };\n\n  // MFA/2FA Functions\n  // Enroll in MFA/2FA\n  const enrollMFA = async (password) => {\n    try {\n      if (!user) {\n        return { success: false, error: 'Not authenticated' };\n      }\n      \n      // For demo accounts, simulate successful enrollment\n      if (isDemoAccount) {\n        return {\n          success: true,\n          factorId: 'demo-factor-id',\n          qrCode: 'https://via.placeholder.com/200x200.png?text=Demo+QR+Code',\n          secret: 'DEMOSECRETKEY123456'\n        };\n      }\n      \n      // Start MFA enrollment\n      const { data, error } = await supabase.auth.mfa.enroll({\n        factorType: 'totp' // Time-based one-time password\n      });\n      \n      if (error) throw error;\n      \n      return {\n        success: true,\n        factorId: data.id,\n        qrCode: data.totp.qr_code,\n        secret: data.totp.secret\n      };\n    } catch (error) {\n      console.error('MFA enrollment error:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Verify MFA/2FA setup\n  const verifyMFA = async (factorId, code) => {\n    try {\n      if (!user) {\n        return { success: false, error: 'Not authenticated' };\n      }\n      \n      // For demo accounts, accept any 6-digit code\n      if (isDemoAccount) {\n        if (!/^\\d{6}$/.test(code)) {\n          return { success: false, error: 'Invalid code format' };\n        }\n        \n        return { success: true };\n      }\n      \n      // Verify the TOTP code\n      const { data, error } = await supabase.auth.mfa.verify({\n        factorId,\n        code\n      });\n      \n      if (error) throw error;\n      \n      // Update user preferences to mark 2FA as enabled\n      const { error: updateError } = await supabase\n        .from('user_preferences')\n        .upsert({\n          user_id: user.id,\n          two_factor_enabled: true,\n          factor_id: factorId\n        }, { onConflict: 'user_id' });\n        \n      if (updateError) throw updateError;\n      \n      // Update local state\n      setUser({ ...user, twoFactorEnabled: true, factorId });\n      \n      return { success: true };\n    } catch (error) {\n      console.error('MFA verification error:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Unenroll from MFA/2FA\n  const unenrollMFA = async (factorId) => {\n    try {\n      if (!user) {\n        return { success: false, error: 'Not authenticated' };\n      }\n      \n      // For demo accounts, simulate successful unenrollment\n      if (isDemoAccount) {\n        return { success: true };\n      }\n      \n      // Unenroll from MFA\n      const { error } = await supabase.auth.mfa.unenroll({\n        factorId\n      });\n      \n      if (error) throw error;\n      \n      // Update user preferences to mark 2FA as disabled\n      const { error: updateError } = await supabase\n        .from('user_preferences')\n        .update({\n          two_factor_enabled: false,\n          factor_id: null\n        })\n        .eq('user_id', user.id);\n        \n      if (updateError) throw updateError;\n      \n      // Update local state\n      setUser({ ...user, twoFactorEnabled: false, factorId: null });\n      \n      return { success: true };\n    } catch (error) {\n      console.error('MFA unenrollment error:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Generate backup codes for 2FA recovery\n  const generateBackupCodes = async (userId) => {\n    try {\n      if (!user) {\n        return { success: false, error: 'Not authenticated' };\n      }\n      \n      // For demo accounts, return mock backup codes\n      if (isDemoAccount) {\n        const mockCodes = [\n          'DEMO-12345-ABCDE',\n          'DEMO-67890-FGHIJ',\n          'DEMO-13579-KLMNO',\n          'DEMO-24680-PQRST',\n          'DEMO-98765-UVWXY',\n          'DEMO-54321-ZABCD',\n          'DEMO-11111-EFGHI',\n          'DEMO-22222-JKLMN',\n          'DEMO-33333-OPQRS',\n          'DEMO-44444-TUVWX'\n        ];\n        \n        return { success: true, codes: mockCodes };\n      }\n      \n      // Generate 10 random backup codes\n      const generateRandomCode = () => {\n        const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        let code = '';\n        for (let i = 0; i < 10; i++) {\n          code += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return code.match(/.{1,5}/g).join('-');\n      };\n      \n      const backupCodes = Array.from({ length: 10 }, generateRandomCode);\n      \n      // Delete existing backup codes\n      const { error: deleteError } = await supabase\n        .from('user_backup_codes')\n        .delete()\n        .eq('user_id', userId);\n        \n      if (deleteError) throw deleteError;\n      \n      // Insert new backup codes\n      const codesForInsert = backupCodes.map(code => ({\n        user_id: userId,\n        code,\n        used: false,\n        created_at: new Date().toISOString()\n      }));\n      \n      const { error: insertError } = await supabase\n        .from('user_backup_codes')\n        .insert(codesForInsert);\n        \n      if (insertError) throw insertError;\n      \n      return { success: true, codes: backupCodes };\n    } catch (error) {\n      console.error('Error generating backup codes:', error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Provide the auth context value\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isAuthenticated,\n      isLoading,\n      isDemoAccount,\n      signIn,\n      signOut,\n      signUp,\n      sendVerificationEmail,\n      updateUserProfile,\n      enrollMFA,\n      verifyMFA,\n      unenrollMFA,\n      generateBackupCodes,\n      reauthenticate\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}