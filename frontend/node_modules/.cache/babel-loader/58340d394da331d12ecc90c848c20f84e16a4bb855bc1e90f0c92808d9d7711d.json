{"ast":null,"code":"import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n\n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n\n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n\n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n\n    // Callback functions\n    this.onLocalStream = null;\n    this.onRemoteStream = null;\n    this.onCallStarted = null;\n    this.onCallEnded = null;\n    this.onCallConnecting = null;\n    this.onIncomingCall = null;\n    this.onICEConnectionStateChange = null;\n\n    // Initialization state\n    this.isInitialized = false;\n  }\n\n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    // Don't reinitialize with the same user ID\n    if (this.isInitialized && this.userId === userId) {\n      console.log('WebRTC service already initialized for user:', userId);\n      // Just update callbacks if provided\n      this.updateCallbacks(callbacks);\n      return;\n    }\n\n    // If we're already initialized with a different user, disconnect first\n    if (this.isInitialized) {\n      this.disconnect();\n    }\n    console.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n    this.isInitialized = true;\n\n    // Set up callbacks\n    this.updateCallbacks(callbacks);\n\n    // Connect to the signaling server\n    // Use provided URL, fallback to production URL, then localhost as last resort\n    const signalingServer = serverUrl || process.env.REACT_APP_SIGNALING_SERVER || 'http://localhost:3001';\n    console.log('Connecting to signaling server:', signalingServer);\n    this.socket = io(signalingServer);\n\n    // Register user ID with the signaling server\n    this.socket.emit('register', userId);\n\n    // Set up event listeners for signaling messages\n    this.setupSocketListeners();\n  }\n\n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Only update provided callbacks, keep existing ones otherwise\n    if (callbacks.onLocalStream !== undefined) this.onLocalStream = callbacks.onLocalStream;\n    if (callbacks.onRemoteStream !== undefined) this.onRemoteStream = callbacks.onRemoteStream;\n    if (callbacks.onCallStarted !== undefined) this.onCallStarted = callbacks.onCallStarted;\n    if (callbacks.onCallEnded !== undefined) this.onCallEnded = callbacks.onCallEnded;\n    if (callbacks.onCallConnecting !== undefined) this.onCallConnecting = callbacks.onCallConnecting;\n    if (callbacks.onIncomingCall !== undefined) this.onIncomingCall = callbacks.onIncomingCall;\n    if (callbacks.onICEConnectionStateChange !== undefined) this.onICEConnectionStateChange = callbacks.onICEConnectionStateChange;\n\n    // Initialize default callback functions if not already set\n    this.onLocalStream = this.onLocalStream || (() => {});\n    this.onRemoteStream = this.onRemoteStream || (() => {});\n    this.onCallStarted = this.onCallStarted || (() => {});\n    this.onCallEnded = this.onCallEnded || (() => {});\n    this.onCallConnecting = this.onCallConnecting || (() => {});\n    this.onIncomingCall = this.onIncomingCall || (() => {});\n    this.onICEConnectionStateChange = this.onICEConnectionStateChange || (() => {});\n  }\n\n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({\n      callerUserId,\n      offerSDP\n    }) => {\n      console.log('Incoming call from:', callerUserId);\n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n\n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n\n      // Notify the application of the incoming call\n      this.onIncomingCall(callerUserId);\n    });\n\n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({\n      answerSDP\n    }) => {\n      console.log('Call was answered, setting remote description');\n      try {\n        await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answerSDP));\n      } catch (error) {\n        console.error('Error setting remote description:', error);\n      }\n    });\n\n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({\n      candidate\n    }) => {\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n          console.log('Added ICE candidate');\n        }\n      } catch (error) {\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n\n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      console.log('Call ended remotely');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n\n    // Handle call failure\n    this.socket.on('call-failed', ({\n      message,\n      targetUserId\n    }) => {\n      console.error('Call failed:', message);\n      this.onCallEnded();\n      this.resetCallState();\n    });\n  }\n\n  /**\n   * Initialize the WebRTC peer connection with STUN/TURN servers\n   * STUN servers help discover your public IP address\n   * TURN servers relay traffic when direct connection fails\n   */\n  initializePeerConnection() {\n    // ICE servers configuration (STUN/TURN)\n    const configuration = {\n      iceServers: [\n      // Google's public STUN server\n      {\n        urls: 'stun:stun.l.google.com:19302'\n      },\n      // For production, use your TURN server configuration\n      // Try to get from environment variables if available\n      ...(process.env.REACT_APP_TURN_SERVER ? [{\n        urls: process.env.REACT_APP_TURN_SERVER,\n        username: process.env.REACT_APP_TURN_USERNAME || '',\n        credential: process.env.REACT_APP_TURN_CREDENTIAL || ''\n      }] : [])]\n    };\n    console.log('Initializing peer connection with configuration:', configuration);\n\n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n\n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n\n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = event => {\n      console.log('Received remote track:', event.track.kind);\n\n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.onRemoteStream(this.remoteStream);\n      }\n\n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        console.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n\n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('Generated ICE candidate for type:', event.candidate.type);\n\n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Monitor connection state changes\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      console.log('ICE connection state changed to:', state);\n      this.onICEConnectionStateChange(state);\n\n      // Handle connection establishment\n      if (state === 'connected') {\n        console.log('Call connected successfully!');\n        this.onCallStarted();\n      }\n      // Handle connection failures\n      else if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n        console.log('Connection lost or failed');\n        this.endCall(true);\n      }\n    };\n  }\n\n  /**\n   * Get access to the user's camera and microphone\n   * @param {boolean|object} videoConstraints - Video constraints or false to disable video\n   * @param {boolean|object} audioConstraints - Audio constraints or false to disable audio\n   * @returns {Promise<MediaStream>} The local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      console.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n\n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      console.log('Access to local media granted');\n      this.localStream = stream;\n      this.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      console.error('Error accessing media devices:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      console.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.onCallConnecting();\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Create an offer (SDP)\n      console.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n\n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n\n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      console.log('Call offer sent');\n    } catch (error) {\n      console.error('Error making call:', error);\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      console.log('Accepting incoming call from:', this.targetUserId);\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Set the remote description from the stored offer\n      console.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(this.pendingOffer));\n\n      // Create an answer\n      console.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n\n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n\n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      console.log('Call accepted, answer sent');\n      this.onCallConnecting();\n    } catch (error) {\n      console.error('Error accepting call:', error);\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * Reject an incoming call\n   */\n  rejectCall() {\n    console.log('Rejecting call from:', this.targetUserId);\n    this.socket.emit('end-call', {\n      targetUserId: this.targetUserId\n    });\n    this.resetCallState();\n  }\n\n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    console.log('Ending call, notify peer:', notifyPeer);\n\n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', {\n        targetUserId: this.targetUserId\n      });\n    }\n\n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n\n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Stopping track:', track.kind);\n        track.stop();\n      });\n    }\n\n    // Trigger callback\n    this.onCallEnded();\n\n    // Reset state\n    this.resetCallState();\n  }\n\n  /**\n   * Toggle the mute state of the audio\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        console.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n\n  /**\n   * Toggle the camera on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        console.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n\n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    console.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n  }\n\n  /**\n   * Disconnect from signaling server and clean up\n   */\n  disconnect() {\n    console.log('Disconnecting WebRTC service');\n\n    // End any active call\n    this.endCall(true);\n\n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n    // Reset initialization status\n    this.isInitialized = false;\n\n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;","map":{"version":3,"names":["io","WebRTCService","constructor","socket","peerConnection","localStream","remoteStream","userId","targetUserId","isCallInitiator","pendingOffer","onLocalStream","onRemoteStream","onCallStarted","onCallEnded","onCallConnecting","onIncomingCall","onICEConnectionStateChange","isInitialized","initialize","callbacks","serverUrl","console","log","updateCallbacks","disconnect","signalingServer","process","env","REACT_APP_SIGNALING_SERVER","emit","setupSocketListeners","undefined","on","callerUserId","offerSDP","answerSDP","setRemoteDescription","RTCSessionDescription","error","candidate","addIceCandidate","RTCIceCandidate","endCall","message","resetCallState","initializePeerConnection","configuration","iceServers","urls","REACT_APP_TURN_SERVER","username","REACT_APP_TURN_USERNAME","credential","REACT_APP_TURN_CREDENTIAL","RTCPeerConnection","getTracks","forEach","track","kind","addTrack","ontrack","event","MediaStream","streams","onicecandidate","type","oniceconnectionstatechange","state","iceConnectionState","getLocalMedia","videoConstraints","audioConstraints","video","audio","stream","navigator","mediaDevices","getUserMedia","makeCall","offer","createOffer","setLocalDescription","acceptCall","answer","createAnswer","rejectCall","notifyPeer","close","stop","toggleAudio","muted","getAudioTracks","enabled","toggleVideo","videoOff","getVideoTracks","webRTCService"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/services/WebRTCService.js"],"sourcesContent":["import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n    \n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n    \n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n    \n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    \n    // Callback functions\n    this.onLocalStream = null;\n    this.onRemoteStream = null;\n    this.onCallStarted = null;\n    this.onCallEnded = null;\n    this.onCallConnecting = null;\n    this.onIncomingCall = null;\n    this.onICEConnectionStateChange = null;\n    \n    // Initialization state\n    this.isInitialized = false;\n  }\n  \n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    // Don't reinitialize with the same user ID\n    if (this.isInitialized && this.userId === userId) {\n      console.log('WebRTC service already initialized for user:', userId);\n      // Just update callbacks if provided\n      this.updateCallbacks(callbacks);\n      return;\n    }\n    \n    // If we're already initialized with a different user, disconnect first\n    if (this.isInitialized) {\n      this.disconnect();\n    }\n    \n    console.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n    this.isInitialized = true;\n    \n    // Set up callbacks\n    this.updateCallbacks(callbacks);\n    \n    // Connect to the signaling server\n    // Use provided URL, fallback to production URL, then localhost as last resort\n    const signalingServer = serverUrl || \n                           (process.env.REACT_APP_SIGNALING_SERVER || \n                            'http://localhost:3001');\n    \n    console.log('Connecting to signaling server:', signalingServer);\n    this.socket = io(signalingServer);\n    \n    // Register user ID with the signaling server\n    this.socket.emit('register', userId);\n    \n    // Set up event listeners for signaling messages\n    this.setupSocketListeners();\n  }\n  \n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Only update provided callbacks, keep existing ones otherwise\n    if (callbacks.onLocalStream !== undefined) \n      this.onLocalStream = callbacks.onLocalStream;\n    if (callbacks.onRemoteStream !== undefined) \n      this.onRemoteStream = callbacks.onRemoteStream;\n    if (callbacks.onCallStarted !== undefined) \n      this.onCallStarted = callbacks.onCallStarted;\n    if (callbacks.onCallEnded !== undefined) \n      this.onCallEnded = callbacks.onCallEnded;\n    if (callbacks.onCallConnecting !== undefined) \n      this.onCallConnecting = callbacks.onCallConnecting;\n    if (callbacks.onIncomingCall !== undefined) \n      this.onIncomingCall = callbacks.onIncomingCall;\n    if (callbacks.onICEConnectionStateChange !== undefined) \n      this.onICEConnectionStateChange = callbacks.onICEConnectionStateChange;\n    \n    // Initialize default callback functions if not already set\n    this.onLocalStream = this.onLocalStream || (() => {});\n    this.onRemoteStream = this.onRemoteStream || (() => {});\n    this.onCallStarted = this.onCallStarted || (() => {});\n    this.onCallEnded = this.onCallEnded || (() => {});\n    this.onCallConnecting = this.onCallConnecting || (() => {});\n    this.onIncomingCall = this.onIncomingCall || (() => {});\n    this.onICEConnectionStateChange = this.onICEConnectionStateChange || (() => {});\n  }\n  \n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({ callerUserId, offerSDP }) => {\n      console.log('Incoming call from:', callerUserId);\n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n      \n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n      \n      // Notify the application of the incoming call\n      this.onIncomingCall(callerUserId);\n    });\n    \n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({ answerSDP }) => {\n      console.log('Call was answered, setting remote description');\n      try {\n        await this.peerConnection.setRemoteDescription(\n          new RTCSessionDescription(answerSDP)\n        );\n      } catch (error) {\n        console.error('Error setting remote description:', error);\n      }\n    });\n    \n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({ candidate }) => {\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.addIceCandidate(\n            new RTCIceCandidate(candidate)\n          );\n          console.log('Added ICE candidate');\n        }\n      } catch (error) {\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n    \n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      console.log('Call ended remotely');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n    \n    // Handle call failure\n    this.socket.on('call-failed', ({ message, targetUserId }) => {\n      console.error('Call failed:', message);\n      this.onCallEnded();\n      this.resetCallState();\n    });\n  }\n  \n  /**\n   * Initialize the WebRTC peer connection with STUN/TURN servers\n   * STUN servers help discover your public IP address\n   * TURN servers relay traffic when direct connection fails\n   */\n  initializePeerConnection() {\n    // ICE servers configuration (STUN/TURN)\n    const configuration = {\n      iceServers: [\n        // Google's public STUN server\n        { urls: 'stun:stun.l.google.com:19302' },\n        // For production, use your TURN server configuration\n        // Try to get from environment variables if available\n        ...(process.env.REACT_APP_TURN_SERVER ? [{\n          urls: process.env.REACT_APP_TURN_SERVER,\n          username: process.env.REACT_APP_TURN_USERNAME || '',\n          credential: process.env.REACT_APP_TURN_CREDENTIAL || ''\n        }] : [])\n      ]\n    };\n    \n    console.log('Initializing peer connection with configuration:', configuration);\n    \n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n    \n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n    \n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = (event) => {\n      console.log('Received remote track:', event.track.kind);\n      \n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.onRemoteStream(this.remoteStream);\n      }\n      \n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        console.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n    \n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('Generated ICE candidate for type:', event.candidate.type);\n        \n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n    \n    // Monitor connection state changes\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      console.log('ICE connection state changed to:', state);\n      \n      this.onICEConnectionStateChange(state);\n      \n      // Handle connection establishment\n      if (state === 'connected') {\n        console.log('Call connected successfully!');\n        this.onCallStarted();\n      } \n      // Handle connection failures\n      else if (\n        state === 'disconnected' || \n        state === 'failed' ||\n        state === 'closed'\n      ) {\n        console.log('Connection lost or failed');\n        this.endCall(true);\n      }\n    };\n  }\n  \n  /**\n   * Get access to the user's camera and microphone\n   * @param {boolean|object} videoConstraints - Video constraints or false to disable video\n   * @param {boolean|object} audioConstraints - Audio constraints or false to disable audio\n   * @returns {Promise<MediaStream>} The local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      console.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      console.log('Access to local media granted');\n      \n      this.localStream = stream;\n      this.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      console.error('Error accessing media devices:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      console.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.onCallConnecting();\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Create an offer (SDP)\n      console.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n      \n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n      \n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      \n      console.log('Call offer sent');\n    } catch (error) {\n      console.error('Error making call:', error);\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      console.log('Accepting incoming call from:', this.targetUserId);\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Set the remote description from the stored offer\n      console.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(\n        new RTCSessionDescription(this.pendingOffer)\n      );\n      \n      // Create an answer\n      console.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n      \n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n      \n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      \n      console.log('Call accepted, answer sent');\n      this.onCallConnecting();\n    } catch (error) {\n      console.error('Error accepting call:', error);\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * Reject an incoming call\n   */\n  rejectCall() {\n    console.log('Rejecting call from:', this.targetUserId);\n    this.socket.emit('end-call', { targetUserId: this.targetUserId });\n    this.resetCallState();\n  }\n  \n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    console.log('Ending call, notify peer:', notifyPeer);\n    \n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', { targetUserId: this.targetUserId });\n    }\n    \n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n    \n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Stopping track:', track.kind);\n        track.stop();\n      });\n    }\n    \n    // Trigger callback\n    this.onCallEnded();\n    \n    // Reset state\n    this.resetCallState();\n  }\n  \n  /**\n   * Toggle the mute state of the audio\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        console.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n  \n  /**\n   * Toggle the camera on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        console.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n  \n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    console.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n  }\n  \n  /**\n   * Disconnect from signaling server and clean up\n   */\n  disconnect() {\n    console.log('Disconnecting WebRTC service');\n    \n    // End any active call\n    this.endCall(true);\n    \n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    // Reset initialization status\n    this.isInitialized = false;\n    \n    // Clear user ID\n    this.userId = null;\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}