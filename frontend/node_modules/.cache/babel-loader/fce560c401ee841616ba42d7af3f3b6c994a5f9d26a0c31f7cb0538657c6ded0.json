{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  var _remoteVideoRef$curre4;\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // New state for control preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n\n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n  const endingCallRef = useRef(false); // Track if we're in the process of ending call\n\n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null); // Added ref for the timer\n  const endCheckIntervalRef = useRef(null); // New ref for checking if call has ended\n  const autoCloseTimerRef = useRef(null); // Timer for auto-closing the call UI\n\n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n\n  // Enhanced logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n\n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n\n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      mouseMoveTimerRef.current = setTimeout(() => {\n        if (!alwaysShowControls) {\n          setShowControls(false);\n        }\n      }, 15000); // 15 seconds for initial call activation\n    }\n  }, [callStatus, alwaysShowControls]);\n\n  // Create a synchronized end call function that ensures both sides end at the same time\n  const synchronizedEndCall = () => {\n    var _localVideoRef$curren, _remoteVideoRef$curre;\n    // Prevent multiple calls\n    if (endingCallRef.current) return;\n    endingCallRef.current = true;\n    log('Performing synchronized call end');\n\n    // 1. Immediately set local state to ended\n    setCallStatus('ended');\n    callStatusRef.current = 'ended';\n\n    // 2. Stop media tracks\n    if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n      log('Stopping local video tracks');\n      const stream = localVideoRef.current.srcObject;\n      stream.getTracks().forEach(track => {\n        log(`Stopping ${track.kind} track`);\n        track.stop();\n      });\n      localVideoRef.current.srcObject = null;\n    }\n\n    // 3. Clean up remote video\n    if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n      remoteVideoRef.current.srcObject = null;\n    }\n\n    // 4. Clear call duration timer\n    if (callDurationTimer.current) {\n      clearInterval(callDurationTimer.current);\n      callDurationTimer.current = null;\n    }\n\n    // 5. Notify other party multiple times for reliability\n    if (webRTCService.signalingService && webRTCService.targetUserId) {\n      const targetUserId = webRTCService.targetUserId;\n\n      // IMPROVED: Send end call signals with more reliability\n      try {\n        // First standard end-call signal\n        webRTCService.signalingService.send('end-call', {\n          targetUserId\n        });\n\n        // Also try the direct-call-ended signal as a backup\n        webRTCService.signalingService.send('direct-call-ended', {\n          targetUserId\n        });\n\n        // Send multiple notifications with increasing delays\n        const sendDelays = [300, 600, 1000, 2000];\n        sendDelays.forEach(delay => {\n          setTimeout(() => {\n            // Check if service is still available\n            if (webRTCService.signalingService) {\n              log(`Sending additional end-call signal (${delay}ms delay)`);\n              webRTCService.signalingService.send('end-call', {\n                targetUserId\n              });\n\n              // Also send backup signal\n              if (delay > 500) {\n                // Only send backup on longer delays\n                webRTCService.signalingService.send('direct-call-ended', {\n                  targetUserId\n                });\n              }\n            }\n          }, delay);\n        });\n\n        // Dispatch a global event as an additional fallback\n        try {\n          window.dispatchEvent(new CustomEvent('webrtc-call-ended', {\n            detail: {\n              targetUserId\n            }\n          }));\n          log('Dispatched global webrtc-call-ended event');\n        } catch (e) {\n          log('Error dispatching global event: ' + e.message);\n        }\n      } catch (err) {\n        log('Error sending end call signals: ' + err.message);\n      }\n    }\n\n    // 6. Tell WebRTCService to end the call (with explicit notification flag)\n    webRTCService.endCall(true);\n\n    // 7. Schedule UI close after a fixed delay (2 seconds)\n    // First clear any existing auto-close timer\n    if (autoCloseTimerRef.current) {\n      clearTimeout(autoCloseTimerRef.current);\n    }\n\n    // Set new timer to close the call UI\n    autoCloseTimerRef.current = setTimeout(() => {\n      log('Auto-closing call UI after ended state');\n      onClose();\n\n      // After closing UI, create a small delay and then try to reconnect to signaling server\n      setTimeout(() => {\n        if (webRTCService.signalingService && !webRTCService.signalingService.isConnected()) {\n          log('Attempting to reconnect to signaling server after UI closed');\n\n          // Force reconnection attempt\n          if (typeof webRTCService.signalingService.reconnect === 'function') {\n            webRTCService.signalingService.reconnect().then(success => {\n              log('Reconnection to signaling server ' + (success ? 'successful' : 'failed'));\n\n              // Re-register if reconnection was successful\n              if (success) {\n                const userId = webRTCService.userId;\n                if (userId) {\n                  webRTCService.signalingService.send('register', userId);\n                  log('Re-registered with signaling server');\n                }\n              }\n            });\n          } else if (webRTCService.signalingService.socket && webRTCService.signalingService.socket.connect) {\n            log('Using socket.connect() to reconnect');\n            webRTCService.signalingService.socket.connect();\n\n            // Re-register after a small delay\n            setTimeout(() => {\n              if (webRTCService.signalingService.isConnected() && webRTCService.userId) {\n                webRTCService.signalingService.send('register', webRTCService.userId);\n                log('Re-registered with signaling server after connection');\n              }\n            }, 1000);\n          }\n        }\n      }, 1000);\n    }, 2000);\n  };\n\n  // NEW: Specifically handle call-ended events more aggressively\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Helper function to check and fix socket connection\n    const checkSocketConnection = () => {\n      try {\n        if (webRTCService && webRTCService.signalingService) {\n          const isConnected = webRTCService.signalingService.isConnected();\n          if (!isConnected) {\n            log('Detected disconnected socket, attempting to reconnect');\n            if (typeof webRTCService.signalingService.reconnect === 'function') {\n              webRTCService.signalingService.reconnect().then(success => {\n                log('Socket reconnection ' + (success ? 'successful' : 'failed'));\n\n                // Re-register if reconnection was successful\n                if (success) {\n                  const userId = webRTCService.userId;\n                  if (userId) {\n                    webRTCService.signalingService.send('register', userId);\n                    log('Re-registered with signaling server');\n                  }\n                }\n              });\n            } else if (webRTCService.signalingService.socket && webRTCService.signalingService.socket.connect) {\n              log('Using socket.connect() to reconnect');\n              webRTCService.signalingService.socket.connect();\n\n              // Re-register after a small delay\n              setTimeout(() => {\n                if (webRTCService.signalingService.isConnected() && webRTCService.userId) {\n                  webRTCService.signalingService.send('register', webRTCService.userId);\n                  log('Re-registered with signaling server after connection');\n                }\n              }, 1000);\n            }\n          }\n        }\n      } catch (err) {\n        log('Error in socket connection check: ' + err.message);\n      }\n    };\n\n    // Check socket connection regularly\n    const socketCheckInterval = setInterval(checkSocketConnection, 5000);\n\n    // Run an immediate check\n    checkSocketConnection();\n\n    // Enhanced call end event listener\n    const handleGlobalCallEnded = event => {\n      log('Global call-ended event received - forcing ended state');\n      if (callStatusRef.current !== 'ended') {\n        synchronizedEndCall();\n      }\n    };\n\n    // Add global event listener for call end events\n    window.addEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    return () => {\n      clearInterval(socketCheckInterval);\n      window.removeEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    };\n  }, [isOpen]);\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Create direct event listener for direct-call-ended\n    const handleDirectCallEndedEvent = data => {\n      log('Direct-call-ended event received - forcing ended state');\n      synchronizedEndCall();\n    };\n\n    // Subscribe to the direct-call-ended event\n    const unsubscribeDirectCallEnded = webRTCService.on('direct-call-ended', handleDirectCallEndedEvent);\n    return () => {\n      if (typeof unsubscribeDirectCallEnded === 'function') {\n        unsubscribeDirectCallEnded();\n      }\n    };\n  }, [isOpen]);\n\n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    var _webRTCService$connec2;\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    log('Performing forced video state check');\n    let shouldSetActive = false;\n\n    // IMPROVED: Better remote video stream checking\n    if (remoteVideoRef.current) {\n      var _webRTCService$connec;\n      // Check if we need to attach the remote stream from webRTCService\n      if (!remoteVideoRef.current.srcObject && (_webRTCService$connec = webRTCService.connectionManager) !== null && _webRTCService$connec !== void 0 && _webRTCService$connec.remoteStream) {\n        log('Remote video has no srcObject but webRTCService has remote stream, attaching it now');\n        remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n        try {\n          remoteVideoRef.current.play().catch(e => {\n            log(`Remote video play error: ${e.message}`);\n          });\n        } catch (err) {\n          log(`Error playing remote video: ${err.message}`);\n        }\n\n        // Since we found and attached a stream, we should be active\n        shouldSetActive = true;\n      }\n\n      // Check existing stream for tracks\n      if (remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        log(`Remote video has ${tracks.length} tracks`);\n\n        // Log specific track info for debugging\n        tracks.forEach(track => {\n          log(`Track: ${track.kind}, ID: ${track.id}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n        });\n        if (tracks.length > 0) {\n          log('Tracks detected, should force active UI state');\n          shouldSetActive = true;\n\n          // Try to play the video if paused\n          if (remoteVideoRef.current.paused) {\n            log('Video is paused, attempting to play');\n            remoteVideoRef.current.play().catch(e => {\n              log(`Auto-play failed: ${e.message}`);\n            });\n          }\n        }\n      }\n    }\n\n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n\n    // IMPROVED: More aggressive check for remote stream\n    if ((_webRTCService$connec2 = webRTCService.connectionManager) !== null && _webRTCService$connec2 !== void 0 && _webRTCService$connec2.remoteStream) {\n      log('WebRTC has remote stream, force attaching to video element and setting active state');\n\n      // Always re-attach the stream to ensure it's the latest\n      if (remoteVideoRef.current) {\n        if (remoteVideoRef.current.srcObject !== webRTCService.connectionManager.remoteStream) {\n          log('Updating remote video with current stream from connectionManager');\n          remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n          try {\n            remoteVideoRef.current.play().catch(e => {\n              log(`Remote video play error: ${e.message}`);\n            });\n          } catch (err) {\n            log(`Error playing remote video: ${err.message}`);\n          }\n        }\n      }\n      shouldSetActive = true;\n    }\n\n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n\n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && Date.now() - activeSinceRef.current > 5000) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n\n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n\n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n\n    // IMPROVED: Local video checking and attachment\n    if (localVideoRef.current) {\n      var _webRTCService$mediaM;\n      if (!localVideoRef.current.srcObject && (_webRTCService$mediaM = webRTCService.mediaManager) !== null && _webRTCService$mediaM !== void 0 && _webRTCService$mediaM.localStream) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n\n        // Trigger a play with better error handling\n        try {\n          localVideoRef.current.play().catch(e => {\n            log(`Local play error: ${e.message}`);\n            // Try muted playback as a fallback (helps with autoplay restrictions)\n            localVideoRef.current.muted = true;\n            localVideoRef.current.play().catch(innerErr => {\n              log(`Local muted play also failed: ${innerErr.message}`);\n            });\n          });\n        } catch (err) {\n          log(`Error during local play: ${err.message}`);\n        }\n      } else if (localVideoRef.current.srcObject) {\n        // Check if tracks are enabled\n        const videoTracks = localVideoRef.current.srcObject.getVideoTracks();\n        if (videoTracks.length > 0) {\n          log(`Local video has ${videoTracks.length} video tracks`);\n          videoTracks.forEach(track => {\n            log(`Local track: ${track.kind}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n\n            // If video is not disabled by user but track is disabled, enable it\n            if (!isVideoOff && !track.enabled) {\n              log('Local track was disabled but should be enabled, enabling it now');\n              track.enabled = true;\n            }\n          });\n        } else {\n          log('Local video has no video tracks, only audio');\n        }\n      }\n    }\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n\n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      // Use functional state update to ensure we work with the latest state\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n\n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n\n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        }\n\n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        return newValue;\n      });\n\n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n\n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n\n  // Handle ending call using the synchronized end function\n  const handleEndCall = () => {\n    log('User ending call');\n\n    // Check if we're in doctor mode\n    const isDoctorMode = localStorage.getItem('is_doctor') === 'true';\n    log(`Ending call in ${isDoctorMode ? 'doctor' : 'patient'} mode`);\n\n    // Get the current targetUserId from webRTCService (important for proper ending)\n    const currentTargetId = webRTCService.targetUserId;\n    log(`Current target user ID: ${currentTargetId}`);\n\n    // Special handling for doctor mode\n    if (isDoctorMode && currentTargetId) {\n      log('Doctor mode special handling for end call');\n\n      // In doctor mode, send extra direct signal to the patient\n      try {\n        // Try multiple times to ensure delivery\n        webRTCService.signalingService.send('end-call', {\n          targetUserId: currentTargetId\n        });\n        webRTCService.signalingService.send('direct-call-ended', {\n          targetUserId: currentTargetId\n        });\n\n        // Also send delayed messages\n        setTimeout(() => {\n          webRTCService.signalingService.send('end-call', {\n            targetUserId: currentTargetId\n          });\n        }, 300);\n        setTimeout(() => {\n          webRTCService.signalingService.send('direct-call-ended', {\n            targetUserId: currentTargetId\n          });\n        }, 1000);\n      } catch (e) {\n        log(`Error sending end-call signal: ${e.message}`);\n      }\n    }\n\n    // Proceed with synchronized call end\n    synchronizedEndCall();\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n    endingCallRef.current = false; // Reset ending call flag\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n\n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n\n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = stream => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n\n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n\n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n\n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n\n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Make sure controls are visible when call starts\n        setShowControls(true);\n\n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        synchronizedEndCall();\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state changed to: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n\n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n\n          // Show controls during connection issues\n          setShowControls(true);\n\n          // If connection completely fails, transition to ended state after a short timeout\n          setTimeout(() => {\n            var _webRTCService$connec3, _webRTCService$connec4;\n            if (callStatusRef.current !== 'ended' && ((_webRTCService$connec3 = webRTCService.connectionManager) === null || _webRTCService$connec3 === void 0 ? void 0 : (_webRTCService$connec4 = _webRTCService$connec3.peerConnection) === null || _webRTCService$connec4 === void 0 ? void 0 : _webRTCService$connec4.iceConnectionState) === 'failed') {\n              log('ICE connection failed, forcing ended state');\n              synchronizedEndCall();\n            }\n          }, 5000);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).then(stream => {\n        log(`Local media access granted with ${stream.getTracks().length} tracks`);\n        // Explicitly set local video source here as well for redundancy\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n\n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n\n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [setTimeout(() => forceVideoStateCheck(), 2000), setTimeout(() => forceVideoStateCheck(), 5000), setTimeout(() => forceVideoStateCheck(), 8000),\n    // Force active state after 10 seconds\n    setTimeout(() => {\n      if (callStatusRef.current === 'connecting') {\n        log('10 seconds passed, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Show controls again when forcing active state\n        setShowControls(true);\n      }\n    }, 10000)];\n\n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n\n      // Always handle 'ended' state immediately regardless of current state\n      if (state === 'ended') {\n        log('Call ended event received, closing call immediately');\n        synchronizedEndCall();\n      }\n      // Handle other state changes as before...\n    });\n    const unsubscribeCallEnded = webRTCService.on('call-ended', () => {\n      log('Direct call-ended event received');\n      synchronizedEndCall();\n    });\n\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', error => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n\n      // Show controls during errors\n      setShowControls(true);\n      if (error.fatal) {\n        synchronizedEndCall();\n      }\n    });\n\n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n\n      // Show controls when tracks are added\n      setShowControls(true);\n    });\n\n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n\n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000); // Increased from 5000 to 10000 (10 seconds)\n        }\n      }\n    };\n\n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n\n    // Double-tap handler to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = e => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n\n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      lastTapTime = now;\n    };\n\n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n\n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls after forcing active\n        setShowControls(true);\n      }\n    }, 1000);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren2, _remoteVideoRef$curre2;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      unsubscribeCallEnded();\n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      if (endCheckIntervalRef.current) {\n        clearInterval(endCheckIntervalRef.current);\n        endCheckIntervalRef.current = null;\n      }\n      if (autoCloseTimerRef.current) {\n        clearTimeout(autoCloseTimerRef.current);\n        autoCloseTimerRef.current = null;\n      }\n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren2 = localVideoRef.current) !== null && _localVideoRef$curren2 !== void 0 && _localVideoRef$curren2.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre2 = remoteVideoRef.current) !== null && _remoteVideoRef$curre2 !== void 0 && _remoteVideoRef$curre2.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    var _remoteVideoRef$curre3;\n    if ((_remoteVideoRef$curre3 = remoteVideoRef.current) !== null && _remoteVideoRef$curre3 !== void 0 && _remoteVideoRef$curre3.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n\n          // Show controls when tracks are detected\n          setShowControls(true);\n          return true;\n        }\n        return false;\n      };\n      if (checkForTracks()) return; // Tracks already present\n\n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n\n        // Show controls when video can play\n        setShowControls(true);\n      };\n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n\n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) {\n        // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [(_remoteVideoRef$curre4 = remoteVideoRef.current) === null || _remoteVideoRef$curre4 === void 0 ? void 0 : _remoteVideoRef$curre4.srcObject]);\n\n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n\n        // Make sure controls are visible\n        setShowControls(true);\n      }, 15000); // Force active after 15 seconds max\n\n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n\n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n\n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n\n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n\n  // Enhanced detection of ended calls through peer connection state\n  useEffect(() => {\n    if (!isOpen) return;\n    const checkConnectionState = () => {\n      var _webRTCService$connec5;\n      // Check the peer connection state\n      const peerConnection = (_webRTCService$connec5 = webRTCService.connectionManager) === null || _webRTCService$connec5 === void 0 ? void 0 : _webRTCService$connec5.peerConnection;\n      if (peerConnection) {\n        const connState = peerConnection.connectionState;\n        const iceState = peerConnection.iceConnectionState;\n\n        // If peer connection is closed, disconnected, or failed\n        if ((connState === 'closed' || connState === 'failed' || connState === 'disconnected' && Date.now() - lastMoveTimeRef.current > 5000) && callStatusRef.current !== 'ended') {\n          log(`Detected peer connection in ${connState} state, forcing ended state`);\n          synchronizedEndCall();\n        }\n\n        // If ICE connection is failed and has been for a while\n        if (iceState === 'failed' && callStatusRef.current !== 'ended') {\n          log('Detected ICE connection failure, forcing ended state');\n          synchronizedEndCall();\n        }\n      }\n    };\n\n    // Check connection state periodically\n    const connectionCheckInterval = setInterval(checkConnectionState, 2000);\n    return () => {\n      clearInterval(connectionCheckInterval);\n    };\n  }, [isOpen]);\n  useEffect(() => {\n    if (!isOpen) return;\n\n    // Setup global event listener as a backup mechanism to catch call end events\n    const handleGlobalCallEnded = event => {\n      log('Global call-ended event received - forcing ended state');\n      if (callStatusRef.current !== 'ended') {\n        synchronizedEndCall();\n      }\n    };\n\n    // Add the global event listener\n    window.addEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    return () => {\n      window.removeEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    };\n  }, [isOpen]);\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Using the improved VideoDisplay component for active call\n      _jsxDEV(VideoDisplay, {\n        remoteVideoRef: remoteVideoRef,\n        localVideoRef: localVideoRef,\n        isSpeakerOff: isSpeakerOff,\n        isVideoOff: isVideoOff,\n        doctor: doctor,\n        connectionQuality: connectionQuality,\n        reconnectAttempt: reconnectAttempt,\n        showControls: showControls,\n        isDarkMode: isDarkMode,\n        colors: colors,\n        callStatus: callStatus,\n        forceActiveState: forceActiveRef.current,\n        onClick: () => {\n          // Toggle controls on video click\n          setShowControls(prev => !prev);\n\n          // Reset hide timer if showing controls\n          if (!showControls && !alwaysShowControls) {\n            if (mouseMoveTimerRef.current) {\n              clearTimeout(mouseMoveTimerRef.current);\n            }\n            mouseMoveTimerRef.current = setTimeout(() => {\n              setShowControls(false);\n            }, 10000);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls || connectionQuality !== 'good' // Always show when connection is not good\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`,\n          style: {\n            zIndex: 500\n          },\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus,\n        resetControlsTimer: () => {\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n          }\n          if (!alwaysShowControls) {\n            mouseMoveTimerRef.current = setTimeout(() => {\n              setShowControls(false);\n            }, 10000);\n          }\n        },\n        setShowControls: setShowControls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1087,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1085,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"OKl+7u0vhdVDAb/l3A00Hc01rWQ=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","VideoDisplay","Users","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","_remoteVideoRef$curre4","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","alwaysShowControls","setAlwaysShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","streamReady","setStreamReady","forceActiveRef","endingCallRef","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","stateCheckerInterval","stateCheckTimeouts","activeSinceRef","callStatusRef","mouseMoveTimerRef","endCheckIntervalRef","autoCloseTimerRef","current","log","message","console","clearTimeout","setTimeout","synchronizedEndCall","_localVideoRef$curren","_remoteVideoRef$curre","srcObject","stream","getTracks","forEach","track","kind","stop","clearInterval","signalingService","targetUserId","send","sendDelays","delay","window","dispatchEvent","CustomEvent","detail","e","err","endCall","isConnected","reconnect","then","success","userId","socket","connect","checkSocketConnection","socketCheckInterval","setInterval","handleGlobalCallEnded","event","addEventListener","removeEventListener","handleDirectCallEndedEvent","data","unsubscribeDirectCallEnded","on","forceVideoStateCheck","_webRTCService$connec2","shouldSetActive","_webRTCService$connec","connectionManager","remoteStream","play","catch","tracks","length","id","enabled","readyState","paused","isCallActive","Date","now","_webRTCService$mediaM","mediaManager","localStream","muted","innerErr","videoTracks","getVideoTracks","toggleVideo","videoOff","hasLocalStream","toggleAlwaysShowControls","prevValue","newValue","localStorage","setItem","error","savedPreference","getItem","handleEndCall","isDoctorMode","currentTargetId","name","handleLocalStream","callbacks","onLocalStream","onRemoteStream","prev","onCallStarted","onCallEnded","onICEConnectionStateChange","state","_webRTCService$connec3","_webRTCService$connec4","peerConnection","iceConnectionState","updateCallbacks","getLocalMedia","unsubscribeCallState","unsubscribeCallEnded","unsubscribeError","fatal","unsubscribeTrackAdded","handleUserActivity","lastTapTime","handleDoubleTap","DOUBLE_TAP_THRESHOLD","preventDefault","_localVideoRef$curren2","_remoteVideoRef$curre2","timeout","toggleAudio","formatTime","seconds","mins","Math","floor","secs","toString","padStart","_remoteVideoRef$curre3","checkForTracks","handleCanPlay","handleLoadedMetadata","checkTimer","checkConnectionState","_webRTCService$connec5","connState","connectionState","iceState","connectionCheckInterval","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","forceActiveState","onClick","zIndex","resetControlsTimer","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport VideoDisplay from './VideoDisplay';\nimport { Users } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [alwaysShowControls, setAlwaysShowControls] = useState(false); // New state for control preference\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [streamReady, setStreamReady] = useState(false);\n  \n  // Use a ref for forceActive to avoid re-renders\n  const forceActiveRef = useRef(false);\n  const endingCallRef = useRef(false); // Track if we're in the process of ending call\n  \n  // Refs for video elements and timers\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  const stateCheckerInterval = useRef(null);\n  const stateCheckTimeouts = useRef([]);\n  const activeSinceRef = useRef(null);\n  const callStatusRef = useRef('connecting');\n  const mouseMoveTimerRef = useRef(null); // Added ref for the timer\n  const endCheckIntervalRef = useRef(null); // New ref for checking if call has ended\n  const autoCloseTimerRef = useRef(null); // Timer for auto-closing the call UI\n  \n  // Update the ref when state changes\n  useEffect(() => {\n    callStatusRef.current = callStatus;\n  }, [callStatus]);\n  \n  // Enhanced logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // When call becomes active, ensure controls are visible and reset timer\n  useEffect(() => {\n    if (callStatus === 'active') {\n      // Show controls when call becomes active\n      setShowControls(true);\n      \n      // Reset the timer for a better experience\n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      // Set a longer initial timeout (15 seconds) when call first becomes active\n      mouseMoveTimerRef.current = setTimeout(() => {\n        if (!alwaysShowControls) {\n          setShowControls(false);\n        }\n      }, 15000); // 15 seconds for initial call activation\n    }\n  }, [callStatus, alwaysShowControls]);\n\n  // Create a synchronized end call function that ensures both sides end at the same time\n  const synchronizedEndCall = () => {\n    // Prevent multiple calls\n    if (endingCallRef.current) return;\n    endingCallRef.current = true;\n    \n    log('Performing synchronized call end');\n    \n    // 1. Immediately set local state to ended\n    setCallStatus('ended');\n    callStatusRef.current = 'ended';\n    \n    // 2. Stop media tracks\n    if (localVideoRef.current?.srcObject) {\n      log('Stopping local video tracks');\n      const stream = localVideoRef.current.srcObject;\n      stream.getTracks().forEach(track => {\n        log(`Stopping ${track.kind} track`);\n        track.stop();\n      });\n      localVideoRef.current.srcObject = null;\n    }\n    \n    // 3. Clean up remote video\n    if (remoteVideoRef.current?.srcObject) {\n      remoteVideoRef.current.srcObject = null;\n    }\n    \n    // 4. Clear call duration timer\n    if (callDurationTimer.current) {\n      clearInterval(callDurationTimer.current);\n      callDurationTimer.current = null;\n    }\n    \n    // 5. Notify other party multiple times for reliability\n    if (webRTCService.signalingService && webRTCService.targetUserId) {\n      const targetUserId = webRTCService.targetUserId;\n      \n      // IMPROVED: Send end call signals with more reliability\n      try {\n        // First standard end-call signal\n        webRTCService.signalingService.send('end-call', { targetUserId });\n        \n        // Also try the direct-call-ended signal as a backup\n        webRTCService.signalingService.send('direct-call-ended', { targetUserId });\n        \n        // Send multiple notifications with increasing delays\n        const sendDelays = [300, 600, 1000, 2000];\n        sendDelays.forEach(delay => {\n          setTimeout(() => {\n            // Check if service is still available\n            if (webRTCService.signalingService) {\n              log(`Sending additional end-call signal (${delay}ms delay)`);\n              webRTCService.signalingService.send('end-call', { targetUserId });\n              \n              // Also send backup signal\n              if (delay > 500) { // Only send backup on longer delays\n                webRTCService.signalingService.send('direct-call-ended', { targetUserId });\n              }\n            }\n          }, delay);\n        });\n        \n        // Dispatch a global event as an additional fallback\n        try {\n          window.dispatchEvent(new CustomEvent('webrtc-call-ended', {\n            detail: { targetUserId }\n          }));\n          log('Dispatched global webrtc-call-ended event');\n        } catch (e) {\n          log('Error dispatching global event: ' + e.message);\n        }\n      } catch (err) {\n        log('Error sending end call signals: ' + err.message);\n      }\n    }\n    \n    // 6. Tell WebRTCService to end the call (with explicit notification flag)\n    webRTCService.endCall(true);\n    \n    // 7. Schedule UI close after a fixed delay (2 seconds)\n    // First clear any existing auto-close timer\n    if (autoCloseTimerRef.current) {\n      clearTimeout(autoCloseTimerRef.current);\n    }\n    \n    // Set new timer to close the call UI\n    autoCloseTimerRef.current = setTimeout(() => {\n      log('Auto-closing call UI after ended state');\n      onClose();\n      \n      // After closing UI, create a small delay and then try to reconnect to signaling server\n      setTimeout(() => {\n        if (webRTCService.signalingService && \n            !webRTCService.signalingService.isConnected()) {\n          log('Attempting to reconnect to signaling server after UI closed');\n          \n          // Force reconnection attempt\n          if (typeof webRTCService.signalingService.reconnect === 'function') {\n            webRTCService.signalingService.reconnect()\n              .then(success => {\n                log('Reconnection to signaling server ' + \n                  (success ? 'successful' : 'failed'));\n                \n                // Re-register if reconnection was successful\n                if (success) {\n                  const userId = webRTCService.userId;\n                  if (userId) {\n                    webRTCService.signalingService.send('register', userId);\n                    log('Re-registered with signaling server');\n                  }\n                }\n              });\n          } else if (webRTCService.signalingService.socket && \n                     webRTCService.signalingService.socket.connect) {\n            log('Using socket.connect() to reconnect');\n            webRTCService.signalingService.socket.connect();\n            \n            // Re-register after a small delay\n            setTimeout(() => {\n              if (webRTCService.signalingService.isConnected() && webRTCService.userId) {\n                webRTCService.signalingService.send('register', webRTCService.userId);\n                log('Re-registered with signaling server after connection');\n              }\n            }, 1000);\n          }\n        }\n      }, 1000);\n    }, 2000);\n  };\n\n  // NEW: Specifically handle call-ended events more aggressively\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    // Helper function to check and fix socket connection\n    const checkSocketConnection = () => {\n      try {\n        if (webRTCService && webRTCService.signalingService) {\n          const isConnected = webRTCService.signalingService.isConnected();\n          \n          if (!isConnected) {\n            log('Detected disconnected socket, attempting to reconnect');\n            \n            if (typeof webRTCService.signalingService.reconnect === 'function') {\n              webRTCService.signalingService.reconnect()\n                .then(success => {\n                  log('Socket reconnection ' + (success ? 'successful' : 'failed'));\n                  \n                  // Re-register if reconnection was successful\n                  if (success) {\n                    const userId = webRTCService.userId;\n                    if (userId) {\n                      webRTCService.signalingService.send('register', userId);\n                      log('Re-registered with signaling server');\n                    }\n                  }\n                });\n            } else if (webRTCService.signalingService.socket && \n                       webRTCService.signalingService.socket.connect) {\n              log('Using socket.connect() to reconnect');\n              webRTCService.signalingService.socket.connect();\n              \n              // Re-register after a small delay\n              setTimeout(() => {\n                if (webRTCService.signalingService.isConnected() && webRTCService.userId) {\n                  webRTCService.signalingService.send('register', webRTCService.userId);\n                  log('Re-registered with signaling server after connection');\n                }\n              }, 1000);\n            }\n          }\n        }\n      } catch (err) {\n        log('Error in socket connection check: ' + err.message);\n      }\n    };\n    \n    // Check socket connection regularly\n    const socketCheckInterval = setInterval(checkSocketConnection, 5000);\n    \n    // Run an immediate check\n    checkSocketConnection();\n    \n    // Enhanced call end event listener\n    const handleGlobalCallEnded = (event) => {\n      log('Global call-ended event received - forcing ended state');\n      if (callStatusRef.current !== 'ended') {\n        synchronizedEndCall();\n      }\n    };\n    \n    // Add global event listener for call end events\n    window.addEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    \n    return () => {\n      clearInterval(socketCheckInterval);\n      window.removeEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    };\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    // Create direct event listener for direct-call-ended\n    const handleDirectCallEndedEvent = (data) => {\n      log('Direct-call-ended event received - forcing ended state');\n      synchronizedEndCall();\n    };\n    \n    // Subscribe to the direct-call-ended event\n    const unsubscribeDirectCallEnded = webRTCService.on('direct-call-ended', handleDirectCallEndedEvent);\n    \n    return () => {\n      if (typeof unsubscribeDirectCallEnded === 'function') {\n        unsubscribeDirectCallEnded();\n      }\n    };\n  }, [isOpen]);\n  \n  // Force check and update UI state - FIXED to prevent infinite loops\n  const forceVideoStateCheck = () => {\n    // Only run when component is mounted and call isn't ended\n    if (callStatusRef.current === 'ended') return;\n    \n    log('Performing forced video state check');\n    let shouldSetActive = false;\n    \n    // IMPROVED: Better remote video stream checking\n    if (remoteVideoRef.current) {\n      // Check if we need to attach the remote stream from webRTCService\n      if (!remoteVideoRef.current.srcObject && webRTCService.connectionManager?.remoteStream) {\n        log('Remote video has no srcObject but webRTCService has remote stream, attaching it now');\n        remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n        \n        try {\n          remoteVideoRef.current.play().catch(e => {\n            log(`Remote video play error: ${e.message}`);\n          });\n        } catch (err) {\n          log(`Error playing remote video: ${err.message}`);\n        }\n        \n        // Since we found and attached a stream, we should be active\n        shouldSetActive = true;\n      }\n      \n      // Check existing stream for tracks\n      if (remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        log(`Remote video has ${tracks.length} tracks`);\n        \n        // Log specific track info for debugging\n        tracks.forEach(track => {\n          log(`Track: ${track.kind}, ID: ${track.id}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n        });\n        \n        if (tracks.length > 0) {\n          log('Tracks detected, should force active UI state');\n          shouldSetActive = true;\n          \n          // Try to play the video if paused\n          if (remoteVideoRef.current.paused) {\n            log('Video is paused, attempting to play');\n            remoteVideoRef.current.play().catch(e => {\n              log(`Auto-play failed: ${e.message}`);\n            });\n          }\n        }\n      }\n    }\n    \n    // Check WebRTC service state as well\n    if (webRTCService.isCallActive() && callStatusRef.current !== 'active') {\n      log('WebRTC reports active call but UI shows connecting, should force update');\n      shouldSetActive = true;\n    }\n    \n    // IMPROVED: More aggressive check for remote stream\n    if (webRTCService.connectionManager?.remoteStream) {\n      log('WebRTC has remote stream, force attaching to video element and setting active state');\n      \n      // Always re-attach the stream to ensure it's the latest\n      if (remoteVideoRef.current) {\n        if (remoteVideoRef.current.srcObject !== webRTCService.connectionManager.remoteStream) {\n          log('Updating remote video with current stream from connectionManager');\n          remoteVideoRef.current.srcObject = webRTCService.connectionManager.remoteStream;\n          \n          try {\n            remoteVideoRef.current.play().catch(e => {\n              log(`Remote video play error: ${e.message}`);\n            });\n          } catch (err) {\n            log(`Error playing remote video: ${err.message}`);\n          }\n        }\n      }\n      \n      shouldSetActive = true;\n    }\n    \n    // Track active time with refs to avoid renders\n    if (!activeSinceRef.current && callStatusRef.current === 'active') {\n      activeSinceRef.current = Date.now();\n    }\n    \n    // If we've been \"active\" for more than 5 seconds but still no video\n    if (activeSinceRef.current && (Date.now() - activeSinceRef.current > 5000)) {\n      log('Active for 5+ seconds, forcing active display state');\n      forceActiveRef.current = true;\n    }\n    \n    // Only update state if needed, and do it in one batch\n    if (shouldSetActive && callStatusRef.current !== 'active') {\n      setCallStatus('active');\n      setStreamReady(true);\n      \n      // Also ensure controls are visible when call becomes active\n      setShowControls(true);\n    }\n  \n    // IMPROVED: Local video checking and attachment\n    if (localVideoRef.current) {\n      if (!localVideoRef.current.srcObject && webRTCService.mediaManager?.localStream) {\n        log('Local video element has no srcObject, setting it now');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        \n        // Trigger a play with better error handling\n        try {\n          localVideoRef.current.play().catch(e => {\n            log(`Local play error: ${e.message}`);\n            // Try muted playback as a fallback (helps with autoplay restrictions)\n            localVideoRef.current.muted = true;\n            localVideoRef.current.play().catch(innerErr => {\n              log(`Local muted play also failed: ${innerErr.message}`);\n            });\n          });\n        } catch (err) {\n          log(`Error during local play: ${err.message}`);\n        }\n      } else if (localVideoRef.current.srcObject) {\n        // Check if tracks are enabled\n        const videoTracks = localVideoRef.current.srcObject.getVideoTracks();\n        if (videoTracks.length > 0) {\n          log(`Local video has ${videoTracks.length} video tracks`);\n          videoTracks.forEach(track => {\n            log(`Local track: ${track.kind}, Enabled: ${track.enabled}, Ready: ${track.readyState}`);\n            \n            // If video is not disabled by user but track is disabled, enable it\n            if (!isVideoOff && !track.enabled) {\n              log('Local track was disabled but should be enabled, enabling it now');\n              track.enabled = true;\n            }\n          });\n        } else {\n          log('Local video has no video tracks, only audio');\n        }\n      }\n    }  \n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n  \n  // Toggle always showing controls\n  const toggleAlwaysShowControls = () => {\n    try {\n      // Use functional state update to ensure we work with the latest state\n      setAlwaysShowControls(prevValue => {\n        const newValue = !prevValue;\n        \n        // If enabling always show, make sure controls are visible\n        if (newValue) {\n          setShowControls(true);\n          \n          // Clear any hide timer\n          if (mouseMoveTimerRef.current) {\n            clearTimeout(mouseMoveTimerRef.current);\n            mouseMoveTimerRef.current = null;\n          }\n        }\n        \n        // Save preference\n        try {\n          localStorage.setItem('always_show_controls', newValue ? 'true' : 'false');\n        } catch (e) {\n          // Ignore storage errors\n        }\n        \n        return newValue;\n      });\n      \n      // Log the action for debugging\n      console.log('Toggle always show controls button clicked');\n    } catch (err) {\n      console.error('Error in toggleAlwaysShowControls:', err);\n    }\n  };\n  \n  // Load saved preference for always showing controls\n  useEffect(() => {\n    try {\n      const savedPreference = localStorage.getItem('always_show_controls');\n      if (savedPreference === 'true') {\n        setAlwaysShowControls(true);\n      }\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }, []);\n  \n  // Handle ending call using the synchronized end function\n  const handleEndCall = () => {\n    log('User ending call');\n    \n    // Check if we're in doctor mode\n    const isDoctorMode = localStorage.getItem('is_doctor') === 'true';\n    log(`Ending call in ${isDoctorMode ? 'doctor' : 'patient'} mode`);\n    \n    // Get the current targetUserId from webRTCService (important for proper ending)\n    const currentTargetId = webRTCService.targetUserId;\n    log(`Current target user ID: ${currentTargetId}`);\n    \n    // Special handling for doctor mode\n    if (isDoctorMode && currentTargetId) {\n      log('Doctor mode special handling for end call');\n      \n      // In doctor mode, send extra direct signal to the patient\n      try {\n        // Try multiple times to ensure delivery\n        webRTCService.signalingService.send('end-call', { targetUserId: currentTargetId });\n        webRTCService.signalingService.send('direct-call-ended', { targetUserId: currentTargetId });\n        \n        // Also send delayed messages\n        setTimeout(() => {\n          webRTCService.signalingService.send('end-call', { targetUserId: currentTargetId });\n        }, 300);\n        \n        setTimeout(() => {\n          webRTCService.signalingService.send('direct-call-ended', { targetUserId: currentTargetId });\n        }, 1000);\n      } catch (e) {\n        log(`Error sending end-call signal: ${e.message}`);\n      }\n    }\n    \n    // Proceed with synchronized call end\n    synchronizedEndCall();\n  };\n  \n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    endingCallRef.current = false; // Reset ending call flag\n    activeSinceRef.current = null;\n    forceActiveRef.current = false;\n    \n    // Reset state when opening\n    setCallStatus('connecting');\n    callStatusRef.current = 'connecting';\n    setStreamReady(false);\n    \n    // Define handleLocalStream function first before using in callbacks\n    const handleLocalStream = (stream) => {\n      log(`Got local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        log('Set local video source');\n        \n        // Force play immediately\n        try {\n          localVideoRef.current.play().catch(err => {\n            log(`Local video play error: ${err.message}`);\n          });\n        } catch (err) {\n          log(`Error playing local video: ${err.message}`);\n        }\n        \n        // Check again after delay in case it didn't stick\n        setTimeout(() => {\n          if (localVideoRef.current) {\n            if (!localVideoRef.current.srcObject) {\n              log('Local video lost srcObject, resetting');\n              localVideoRef.current.srcObject = stream;\n            }\n            \n            if (localVideoRef.current.paused) {\n              log('Local video paused, trying to play again');\n              localVideoRef.current.play().catch(e => log(`Error: ${e.message}`));\n            }\n          }\n        }, 1000);\n      }\n    };\n    \n    // Set up callbacks with handleLocalStream defined first\n    const callbacks = {\n      onLocalStream: handleLocalStream,\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Set flag to indicate stream is ready\n          setStreamReady(true);\n          \n          // Force transition to active state\n          log('Remote stream received, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Try to play immediately\n          try {\n            remoteVideoRef.current.play().catch(err => {\n              log(`Initial play failed: ${err.message}`);\n            });\n          } catch (err) {\n            log(`Error during initial play: ${err.message}`);\n          }\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            log('Call timer tick, updating duration');\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Make sure controls are visible when call starts\n        setShowControls(true);\n        \n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        synchronizedEndCall();\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state changed to: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          \n          // Show controls when connection established\n          setShowControls(true);\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n          \n          // Show controls during connection issues\n          setShowControls(true);\n          \n          // If connection completely fails, transition to ended state after a short timeout\n          setTimeout(() => {\n            if (callStatusRef.current !== 'ended' && \n                webRTCService.connectionManager?.peerConnection?.iceConnectionState === 'failed') {\n              log('ICE connection failed, forcing ended state');\n              synchronizedEndCall();\n            }\n          }, 5000);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .then(stream => {\n          log(`Local media access granted with ${stream.getTracks().length} tracks`);\n          // Explicitly set local video source here as well for redundancy\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = stream;\n            localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n          }\n        })\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    } else {\n      // We already have local stream, make sure it's connected to video element\n      const stream = webRTCService.mediaManager.localStream;\n      log(`Using existing local stream with ${stream.getTracks().length} tracks`);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n      }\n    }\n    \n    // Set up state checker at regular intervals\n    stateCheckerInterval.current = setInterval(() => {\n      forceVideoStateCheck();\n    }, 1000);\n    \n    // Add specific timeouts for critical checks (use refs to avoid loops)\n    stateCheckTimeouts.current = [\n      setTimeout(() => forceVideoStateCheck(), 2000),\n      setTimeout(() => forceVideoStateCheck(), 5000),\n      setTimeout(() => forceVideoStateCheck(), 8000),\n      // Force active state after 10 seconds\n      setTimeout(() => {\n        if (callStatusRef.current === 'connecting') {\n          log('10 seconds passed, forcing active state');\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          forceActiveRef.current = true;\n          \n          // Show controls again when forcing active state\n          setShowControls(true);\n        }\n      }, 10000)\n    ];\n    \n    // Listen for call state changes with enhanced logging\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}, current UI state: ${callStatusRef.current}`);\n      \n      // Always handle 'ended' state immediately regardless of current state\n      if (state === 'ended') {\n        log('Call ended event received, closing call immediately');\n        synchronizedEndCall();\n      } \n      // Handle other state changes as before...\n    });\n    \n    const unsubscribeCallEnded = webRTCService.on('call-ended', () => {\n      log('Direct call-ended event received');\n      synchronizedEndCall();\n    });\n    \n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', (error) => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      \n      // Show controls during errors\n      setShowControls(true);\n      \n      if (error.fatal) {\n        synchronizedEndCall();\n      }\n    });\n    \n    // Listen for remote tracks added\n    const unsubscribeTrackAdded = webRTCService.on('remoteTrackAdded', () => {\n      log('Remote track added event received');\n      setCallStatus('active');\n      callStatusRef.current = 'active';\n      setStreamReady(true);\n      \n      // Show controls when tracks are added\n      setShowControls(true);\n    });\n    \n    // Set up improved mouse movement tracker for controls with touch support\n    const handleUserActivity = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        // Don't hide controls if always show is enabled\n        if (!alwaysShowControls) {\n          clearTimeout(mouseMoveTimerRef.current);\n          mouseMoveTimerRef.current = setTimeout(() => {\n            setShowControls(false);\n          }, 10000); // Increased from 5000 to 10000 (10 seconds)\n        }\n      }\n    };\n    \n    // Add both mouse and touch event listeners\n    window.addEventListener('mousemove', handleUserActivity);\n    window.addEventListener('touchstart', handleUserActivity);\n    \n    // Double-tap handler to toggle persistent controls\n    let lastTapTime = 0;\n    const handleDoubleTap = (e) => {\n      const now = Date.now();\n      const DOUBLE_TAP_THRESHOLD = 300; // ms\n      \n      if (now - lastTapTime < DOUBLE_TAP_THRESHOLD) {\n        // Double tap detected\n        toggleAlwaysShowControls();\n        e.preventDefault(); // Prevent zoom on double tap\n      }\n      \n      lastTapTime = now;\n    };\n    \n    // Add double tap listener for mobile\n    window.addEventListener('touchend', handleDoubleTap);\n    \n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls after forcing active\n        setShowControls(true);\n      }\n    }, 1000);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      unsubscribeError();\n      unsubscribeTrackAdded();\n      unsubscribeCallEnded();\n      \n      if (stateCheckerInterval.current) {\n        clearInterval(stateCheckerInterval.current);\n        stateCheckerInterval.current = null;\n      }\n      \n      if (endCheckIntervalRef.current) {\n        clearInterval(endCheckIntervalRef.current);\n        endCheckIntervalRef.current = null;\n      }\n      \n      if (autoCloseTimerRef.current) {\n        clearTimeout(autoCloseTimerRef.current);\n        autoCloseTimerRef.current = null;\n      }\n      \n      stateCheckTimeouts.current.forEach(timeout => clearTimeout(timeout));\n      stateCheckTimeouts.current = [];\n      \n      window.removeEventListener('mousemove', handleUserActivity);\n      window.removeEventListener('touchstart', handleUserActivity);\n      window.removeEventListener('touchend', handleDoubleTap);\n      \n      if (mouseMoveTimerRef.current) {\n        clearTimeout(mouseMoveTimerRef.current);\n      }\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose, alwaysShowControls]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  useEffect(() => {\n    if (callStatus === 'active' && !callDurationTimer.current) {\n      log('Starting call duration timer based on active call status');\n      callDurationTimer.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    \n    return () => {\n      if (callDurationTimer.current && callStatus !== 'active') {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n    };\n  }, [callStatus]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Additional effect to handle active state when remote video is detected\n  useEffect(() => {\n    if (remoteVideoRef.current?.srcObject) {\n      const checkForTracks = () => {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0) {\n          log(`Remote video has ${tracks.length} tracks, forcing active state`);\n          setCallStatus('active');\n          callStatusRef.current = 'active';\n          setStreamReady(true);\n          \n          // Show controls when tracks are detected\n          setShowControls(true);\n          return true;\n        }\n        return false;\n      };\n      \n      if (checkForTracks()) return; // Tracks already present\n      \n      // If no tracks yet, set up listeners\n      const handleCanPlay = () => {\n        log('Remote video can play event fired');\n        setStreamReady(true);\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        \n        // Show controls when video can play\n        setShowControls(true);\n      };\n      \n      const handleLoadedMetadata = () => {\n        log('Remote video loadedmetadata event fired');\n        checkForTracks();\n      };\n      \n      remoteVideoRef.current.addEventListener('canplay', handleCanPlay);\n      remoteVideoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);\n      \n      // Play video when ready\n      if (remoteVideoRef.current.readyState >= 3) { // HAVE_FUTURE_DATA or better\n        remoteVideoRef.current.play().catch(e => {\n          log('Error auto-playing video: ' + e.message);\n        });\n      }\n      \n      return () => {\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.removeEventListener('canplay', handleCanPlay);\n          remoteVideoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);\n        }\n      };\n    }\n  }, [remoteVideoRef.current?.srcObject]);\n  \n  // Force active state after a timeout - with refs to prevent loops\n  useEffect(() => {\n    if (callStatus === 'connecting') {\n      const timeout = setTimeout(() => {\n        log('Timeout reached, forcing active state');\n        setCallStatus('active');\n        callStatusRef.current = 'active';\n        forceActiveRef.current = true;\n        \n        // Make sure controls are visible\n        setShowControls(true);\n      }, 15000); // Force active after 15 seconds max\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [callStatus]);\n  \n  // ADDED: Special effect to ensure local video is displayed\n  useEffect(() => {\n    if (isOpen && localVideoRef.current) {\n      // Check if we have local media but it's not connected to video element\n      if (webRTCService.mediaManager.hasLocalStream() && !localVideoRef.current.srcObject) {\n        log('Connecting existing local stream to video element');\n        localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n        \n        // Try to play it\n        localVideoRef.current.play().catch(err => {\n          log(`Failed to play local video: ${err.message}`);\n        });\n      }\n      \n      // Check again after a delay to be sure\n      const checkTimer = setTimeout(() => {\n        if (webRTCService.mediaManager.hasLocalStream() && \n            (!localVideoRef.current.srcObject || localVideoRef.current.paused)) {\n          log('Delayed local video check - reconnecting stream');\n          localVideoRef.current.srcObject = webRTCService.mediaManager.localStream;\n          localVideoRef.current.play().catch(e => log(`Play error: ${e.message}`));\n        }\n      }, 2000);\n      \n      return () => clearTimeout(checkTimer);\n    }\n  }, [isOpen, callStatus]);\n\n  // Enhanced detection of ended calls through peer connection state\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const checkConnectionState = () => {\n      // Check the peer connection state\n      const peerConnection = webRTCService.connectionManager?.peerConnection;\n      \n      if (peerConnection) {\n        const connState = peerConnection.connectionState;\n        const iceState = peerConnection.iceConnectionState;\n        \n        // If peer connection is closed, disconnected, or failed\n        if ((connState === 'closed' || connState === 'failed' || \n            (connState === 'disconnected' && Date.now() - lastMoveTimeRef.current > 5000)) &&\n            callStatusRef.current !== 'ended') {\n          log(`Detected peer connection in ${connState} state, forcing ended state`);\n          synchronizedEndCall();\n        }\n        \n        // If ICE connection is failed and has been for a while\n        if (iceState === 'failed' && callStatusRef.current !== 'ended') {\n          log('Detected ICE connection failure, forcing ended state');\n          synchronizedEndCall();\n        }\n      }\n    };\n    \n    // Check connection state periodically\n    const connectionCheckInterval = setInterval(checkConnectionState, 2000);\n    \n    return () => {\n      clearInterval(connectionCheckInterval);\n    };\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    // Setup global event listener as a backup mechanism to catch call end events\n    const handleGlobalCallEnded = (event) => {\n      log('Global call-ended event received - forcing ended state');\n      if (callStatusRef.current !== 'ended') {\n        synchronizedEndCall();\n      }\n    };\n  \n    // Add the global event listener\n    window.addEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    \n    return () => {\n      window.removeEventListener('webrtc-call-ended', handleGlobalCallEnded);\n    };\n  }, [isOpen]);\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          // Using the improved VideoDisplay component for active call\n          <VideoDisplay\n            remoteVideoRef={remoteVideoRef}\n            localVideoRef={localVideoRef}\n            isSpeakerOff={isSpeakerOff}\n            isVideoOff={isVideoOff}\n            doctor={doctor}\n            connectionQuality={connectionQuality}\n            reconnectAttempt={reconnectAttempt}\n            showControls={showControls}\n            isDarkMode={isDarkMode}\n            colors={colors}\n            callStatus={callStatus}\n            forceActiveState={forceActiveRef.current}\n            onClick={() => {\n              // Toggle controls on video click\n              setShowControls(prev => !prev);\n              \n              // Reset hide timer if showing controls\n              if (!showControls && !alwaysShowControls) {\n                if (mouseMoveTimerRef.current) {\n                  clearTimeout(mouseMoveTimerRef.current);\n                }\n                mouseMoveTimerRef.current = setTimeout(() => {\n                  setShowControls(false);\n                }, 10000);\n              }\n            }}\n          >\n            {/* Render header and connection status inside VideoDisplay */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls || connectionQuality !== 'good'} // Always show when connection is not good\n            />\n            \n            {/* Active call visual indicator */}\n            <div \n              className={`absolute top-4 right-24 px-2 py-1 bg-green-500 bg-opacity-50 text-white text-xs rounded-full transition-opacity duration-300 ${showControls ? 'opacity-100' : 'opacity-50'}`}\n              style={{ zIndex: 500 }}\n            >\n              Active\n            </div>\n          </VideoDisplay>\n        )}\n        \n        {/* Controls - with improved visibility and state handling */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n          resetControlsTimer={() => {\n            if (mouseMoveTimerRef.current) {\n              clearTimeout(mouseMoveTimerRef.current);\n            }\n            if (!alwaysShowControls) {\n              mouseMoveTimerRef.current = setTimeout(() => {\n                setShowControls(false);\n              }, 10000);\n            }\n          }}\n          setShowControls={setShowControls}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}