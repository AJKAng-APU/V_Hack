{"ast":null,"code":"// api.js - Client for communicating with Python backend\n\n// In api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n/**\n * API client for communicating with the Python backend\n */\nclass ApiClient {\n  /**\n   * Authenticate with Google Fit\n   * @param {string} authCode - Google OAuth2 authorization code\n   * @returns {Promise} - Resolves to the authentication status\n   */\n  async authenticateGoogleFit(authCode) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/google-fit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          authCode\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to authenticate with Google Fit');\n      return await response.json();\n    } catch (error) {\n      console.error('Google Fit authentication error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch health data from Google Fit via the Python backend\n   * @param {Object} options - Options to customize the data retrieval\n   * @param {number} options.days - Number of days to fetch data for\n   * @param {Array} options.fields - Specific fields to fetch\n   * @returns {Promise} - Resolves to the health data\n   */\n  async fetchHealthData(options = {\n    days: 30,\n    fields: null\n  }) {\n    try {\n      const queryParams = new URLSearchParams();\n      queryParams.append('days', options.days);\n      if (options.fields && Array.isArray(options.fields)) {\n        options.fields.forEach(field => queryParams.append('fields', field));\n      }\n      const response = await fetch(`${API_BASE_URL}/health-data?${queryParams}`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch health data');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get an AI-generated health insight based on symptoms and metrics\n   * @param {Object} data - Combined symptom and health metric data\n   * @returns {Promise} - Resolves to the AI-generated insight\n   */\n  async getHealthInsight(data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai/insights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to get AI insights');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get AI insights:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get biorhythm advice based on chronotype and health data\n   * @param {string} chronotype - User's chronotype (e.g., \"morning\", \"evening\")\n   * @param {string} medicationTime - Preferred medication time\n   * @returns {Promise} - Resolves to biorhythm advice\n   */\n  async getBiorhythmAdvice(chronotype, medicationTime) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/biorhythm/advice`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chronotype,\n          medicationTime\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to get biorhythm advice');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a new symptom with health context\n   * @param {Object} symptomData - The symptom data to submit\n   * @returns {Promise} - Resolves when the symptom is saved\n   */\n  async submitSymptom(symptomData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/symptoms`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(symptomData),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to submit symptom');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to submit symptom:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get prediction results based on health metrics\n   * @param {Object} healthMetrics - The health metrics to analyze\n   * @returns {Promise} - Resolves to the prediction results\n   */\n  async getPrediction(healthMetrics) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/prediction`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(healthMetrics),\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to get prediction');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      throw error;\n    }\n  }\n}\nexport default new ApiClient();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiClient","authenticateGoogleFit","authCode","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","json","error","console","fetchHealthData","options","days","fields","queryParams","URLSearchParams","append","Array","isArray","forEach","field","getHealthInsight","data","getBiorhythmAdvice","chronotype","medicationTime","submitSymptom","symptomData","getPrediction","healthMetrics"],"sources":["/Users/ang/V_Hack_Ver4/frontend2/src/components/api.js"],"sourcesContent":["// api.js - Client for communicating with Python backend\n\n// In api.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n/**\n * API client for communicating with the Python backend\n */\nclass ApiClient {\n  /**\n   * Authenticate with Google Fit\n   * @param {string} authCode - Google OAuth2 authorization code\n   * @returns {Promise} - Resolves to the authentication status\n   */\n  async authenticateGoogleFit(authCode) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/google-fit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ authCode }),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to authenticate with Google Fit');\n      return await response.json();\n    } catch (error) {\n      console.error('Google Fit authentication error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch health data from Google Fit via the Python backend\n   * @param {Object} options - Options to customize the data retrieval\n   * @param {number} options.days - Number of days to fetch data for\n   * @param {Array} options.fields - Specific fields to fetch\n   * @returns {Promise} - Resolves to the health data\n   */\n  async fetchHealthData(options = { days: 30, fields: null }) {\n    try {\n      const queryParams = new URLSearchParams();\n      queryParams.append('days', options.days);\n      \n      if (options.fields && Array.isArray(options.fields)) {\n        options.fields.forEach(field => queryParams.append('fields', field));\n      }\n      \n      const response = await fetch(`${API_BASE_URL}/health-data?${queryParams}`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to fetch health data');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get an AI-generated health insight based on symptoms and metrics\n   * @param {Object} data - Combined symptom and health metric data\n   * @returns {Promise} - Resolves to the AI-generated insight\n   */\n  async getHealthInsight(data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai/insights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to get AI insights');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get AI insights:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get biorhythm advice based on chronotype and health data\n   * @param {string} chronotype - User's chronotype (e.g., \"morning\", \"evening\")\n   * @param {string} medicationTime - Preferred medication time\n   * @returns {Promise} - Resolves to biorhythm advice\n   */\n  async getBiorhythmAdvice(chronotype, medicationTime) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/biorhythm/advice`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ chronotype, medicationTime }),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to get biorhythm advice');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a new symptom with health context\n   * @param {Object} symptomData - The symptom data to submit\n   * @returns {Promise} - Resolves when the symptom is saved\n   */\n  async submitSymptom(symptomData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/symptoms`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(symptomData),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to submit symptom');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to submit symptom:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get prediction results based on health metrics\n   * @param {Object} healthMetrics - The health metrics to analyze\n   * @returns {Promise} - Resolves to the prediction results\n   */\n  async getPrediction(healthMetrics) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/prediction`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(healthMetrics),\n        credentials: 'include',\n      });\n      \n      if (!response.ok) throw new Error('Failed to get prediction');\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}