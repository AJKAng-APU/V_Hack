{"ast":null,"code":"import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n\n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n\n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n\n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n\n    // Callback functions\n    this.callbacks = {\n      onLocalStream: () => {},\n      onRemoteStream: () => {},\n      onCallStarted: () => {},\n      onCallEnded: () => {},\n      onCallConnecting: () => {},\n      onIncomingCall: () => {},\n      onICEConnectionStateChange: () => {}\n    };\n\n    // Initialization state\n    this.isInitialized = false;\n  }\n\n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    console.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n\n    // Update callbacks with provided functions\n    this.updateCallbacks(callbacks);\n\n    // Connect to the signaling server if not already connected\n    if (!this.socket || !this.socket.connected) {\n      // Use provided URL, fallback to production URL, then localhost as last resort\n      const signalingServer = serverUrl || process.env.REACT_APP_SIGNALING_SERVER || 'http://localhost:3001';\n      console.log('Connecting to signaling server:', signalingServer);\n      this.socket = io(signalingServer);\n\n      // Set up event listeners for signaling messages\n      this.setupSocketListeners();\n    }\n\n    // Register user ID with the signaling server\n    if (this.socket) {\n      this.socket.emit('register', userId);\n    }\n    this.isInitialized = true;\n    return this;\n  }\n\n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Merge provided callbacks with existing defaults\n    this.callbacks = {\n      ...this.callbacks,\n      ...callbacks\n    };\n    return this;\n  }\n\n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Prevent multiple listener setups\n    if (this.socket.hasListeners) return;\n    this.socket.hasListeners = true;\n\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({\n      callerUserId,\n      offerSDP\n    }) => {\n      console.log('Incoming call from:', callerUserId);\n\n      // Ignore if already in an active call\n      if (this.isCallActive) {\n        console.log('Already in a call, ignoring incoming call');\n        return;\n      }\n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n\n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n\n      // Notify the application of the incoming call\n      this.callbacks.onIncomingCall(callerUserId);\n    });\n\n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({\n      answerSDP\n    }) => {\n      console.log('Call was answered, setting remote description');\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answerSDP));\n        }\n      } catch (error) {\n        console.error('Error setting remote description:', error);\n        this.endCall(true);\n      }\n    });\n\n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({\n      candidate\n    }) => {\n      try {\n        if (this.peerConnection && candidate) {\n          await this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n          console.log('Added ICE candidate');\n        }\n      } catch (error) {\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n\n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      console.log('Call ended remotely');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n\n    // Handle call failure\n    this.socket.on('call-failed', ({\n      message,\n      targetUserId\n    }) => {\n      console.error('Call failed:', message);\n      this.callbacks.onCallEnded();\n      this.resetCallState();\n    });\n  }\n\n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // If there's already an active call, end it first\n      if (this.isCallActive) {\n        console.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      console.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.isCallActive = true;\n      this.callbacks.onCallConnecting();\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Create an offer (SDP)\n      console.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n\n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n\n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      console.log('Call offer sent');\n    } catch (error) {\n      console.error('Error making call:', error);\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      console.log('Accepting incoming call from:', this.targetUserId);\n      this.isCallActive = true;\n\n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n\n      // Create peer connection\n      this.initializePeerConnection();\n\n      // Set the remote description from the stored offer\n      console.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(this.pendingOffer));\n\n      // Create an answer\n      console.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n\n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n\n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      console.log('Call accepted, answer sent');\n      this.callbacks.onCallConnecting();\n    } catch (error) {\n      console.error('Error accepting call:', error);\n      this.endCall(true);\n    }\n  }\n\n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    console.log('Ending call, notify peer:', notifyPeer);\n\n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', {\n        targetUserId: this.targetUserId\n      });\n    }\n\n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n\n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Stopping track:', track.kind);\n        track.stop();\n      });\n      this.localStream = null;\n    }\n\n    // Mark call as inactive\n    this.isCallActive = false;\n\n    // Trigger callback\n    this.callbacks.onCallEnded();\n\n    // Reset state\n    this.resetCallState();\n  }\n\n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    console.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n  }\n\n  /**\n   * Initialize WebRTC Peer Connection\n   */\n  initializePeerConnection() {\n    // ICE servers configuration (STUN/TURN)\n    const configuration = {\n      iceServers: [\n      // Google's public STUN server\n      {\n        urls: 'stun:stun.l.google.com:19302'\n      },\n      // For production, add TURN servers for better NAT traversal\n      ...(process.env.REACT_APP_TURN_SERVERS ? JSON.parse(process.env.REACT_APP_TURN_SERVERS).map(server => ({\n        urls: server.urls,\n        username: server.username || '',\n        credential: server.credential || ''\n      })) : [])]\n    };\n    console.log('Initializing peer connection with configuration:', configuration);\n\n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n\n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n\n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = event => {\n      console.log('Received remote track:', event.track.kind);\n\n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.callbacks.onRemoteStream(this.remoteStream);\n      }\n\n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        console.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n\n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('Generated ICE candidate for type:', event.candidate.type);\n\n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Monitor connection state changes\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      console.log('ICE connection state changed to:', state);\n      this.callbacks.onICEConnectionStateChange(state);\n\n      // Handle connection establishment\n      if (state === 'connected') {\n        console.log('Call connected successfully!');\n        this.callbacks.onCallStarted();\n      }\n      // Handle connection failures\n      else if (state === 'disconnected' || state === 'failed' || state === 'closed') {\n        console.log('Connection lost or failed');\n        this.endCall(true);\n      }\n    };\n  }\n\n  /**\n   * Get local media stream\n   * @param {boolean|MediaTrackConstraints} videoConstraints - Video constraints\n   * @param {boolean|MediaTrackConstraints} audioConstraints - Audio constraints\n   * @returns {Promise<MediaStream>} Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      console.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n\n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      console.log('Access to local media granted');\n      this.localStream = stream;\n      this.callbacks.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      console.error('Error accessing media devices:', error);\n\n      // Provide more specific error handling\n      if (error.name === 'NotAllowedError') {\n        // User denied camera/microphone access\n        this.callbacks.onLocalStream(null);\n      } else if (error.name === 'NotFoundError') {\n        // No camera/microphone found\n        this.callbacks.onLocalStream(null);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Toggle audio track on/off\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        console.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n\n  /**\n   * Toggle video track on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        console.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n\n  /**\n   * Disconnect from the WebRTC service\n   */\n  disconnect() {\n    console.log('Disconnecting WebRTC service');\n\n    // End any active call\n    this.endCall(true);\n\n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.removeAllListeners();\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n    // Reset initialization status\n    this.isInitialized = false;\n\n    // Clear user ID and reset callbacks\n    this.userId = null;\n    this.callbacks = {\n      onLocalStream: () => {},\n      onRemoteStream: () => {},\n      onCallStarted: () => {},\n      onCallEnded: () => {},\n      onCallConnecting: () => {},\n      onIncomingCall: () => {},\n      onICEConnectionStateChange: () => {}\n    };\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;","map":{"version":3,"names":["io","WebRTCService","constructor","socket","peerConnection","localStream","remoteStream","userId","targetUserId","isCallInitiator","pendingOffer","isCallActive","callbacks","onLocalStream","onRemoteStream","onCallStarted","onCallEnded","onCallConnecting","onIncomingCall","onICEConnectionStateChange","isInitialized","initialize","serverUrl","console","log","updateCallbacks","connected","signalingServer","process","env","REACT_APP_SIGNALING_SERVER","setupSocketListeners","emit","hasListeners","on","callerUserId","offerSDP","answerSDP","setRemoteDescription","RTCSessionDescription","error","endCall","candidate","addIceCandidate","RTCIceCandidate","message","resetCallState","makeCall","getLocalMedia","initializePeerConnection","offer","createOffer","setLocalDescription","acceptCall","answer","createAnswer","notifyPeer","close","getTracks","forEach","track","kind","stop","configuration","iceServers","urls","REACT_APP_TURN_SERVERS","JSON","parse","map","server","username","credential","RTCPeerConnection","addTrack","ontrack","event","MediaStream","streams","onicecandidate","type","oniceconnectionstatechange","state","iceConnectionState","videoConstraints","audioConstraints","video","audio","stream","navigator","mediaDevices","getUserMedia","name","toggleAudio","muted","getAudioTracks","enabled","toggleVideo","videoOff","getVideoTracks","disconnect","removeAllListeners","webRTCService"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/services/WebRTCService.js"],"sourcesContent":["import io from 'socket.io-client';\n\n/**\n * Service that handles WebRTC connections for video calling\n */\nclass WebRTCService {\n  constructor() {\n    // Connection objects\n    this.socket = null;\n    this.peerConnection = null;\n    \n    // Media streams\n    this.localStream = null;\n    this.remoteStream = null;\n    \n    // User identifiers\n    this.userId = null;\n    this.targetUserId = null;\n    \n    // Call state\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n    \n    // Callback functions\n    this.callbacks = {\n      onLocalStream: () => {},\n      onRemoteStream: () => {},\n      onCallStarted: () => {},\n      onCallEnded: () => {},\n      onCallConnecting: () => {},\n      onIncomingCall: () => {},\n      onICEConnectionStateChange: () => {}\n    };\n    \n    // Initialization state\n    this.isInitialized = false;\n  }\n  \n  /**\n   * Initialize the WebRTC service with user information and callbacks\n   * @param {string} userId - The current user's ID\n   * @param {object} callbacks - Callback functions to handle events\n   * @param {string} serverUrl - The URL of the signaling server (optional)\n   */\n  initialize(userId, callbacks = {}, serverUrl = null) {\n    console.log('Initializing WebRTC service for user:', userId);\n    this.userId = userId;\n    \n    // Update callbacks with provided functions\n    this.updateCallbacks(callbacks);\n    \n    // Connect to the signaling server if not already connected\n    if (!this.socket || !this.socket.connected) {\n      // Use provided URL, fallback to production URL, then localhost as last resort\n      const signalingServer = serverUrl || \n                             (process.env.REACT_APP_SIGNALING_SERVER || \n                              'http://localhost:3001');\n      \n      console.log('Connecting to signaling server:', signalingServer);\n      this.socket = io(signalingServer);\n      \n      // Set up event listeners for signaling messages\n      this.setupSocketListeners();\n    }\n    \n    // Register user ID with the signaling server\n    if (this.socket) {\n      this.socket.emit('register', userId);\n    }\n    \n    this.isInitialized = true;\n    return this;\n  }\n  \n  /**\n   * Update callback functions\n   * @param {object} callbacks - Callback functions to update\n   */\n  updateCallbacks(callbacks = {}) {\n    // Merge provided callbacks with existing defaults\n    this.callbacks = { ...this.callbacks, ...callbacks };\n    return this;\n  }\n  \n  /**\n   * Set up all socket event listeners for signaling\n   */\n  setupSocketListeners() {\n    // Prevent multiple listener setups\n    if (this.socket.hasListeners) return;\n    this.socket.hasListeners = true;\n\n    // Handle incoming calls\n    this.socket.on('incoming-call', async ({ callerUserId, offerSDP }) => {\n      console.log('Incoming call from:', callerUserId);\n      \n      // Ignore if already in an active call\n      if (this.isCallActive) {\n        console.log('Already in a call, ignoring incoming call');\n        return;\n      }\n      \n      this.targetUserId = callerUserId;\n      this.isCallInitiator = false;\n      \n      // Store the offer to use when call is accepted\n      this.pendingOffer = offerSDP;\n      \n      // Notify the application of the incoming call\n      this.callbacks.onIncomingCall(callerUserId);\n    });\n    \n    // Handle when the other person answers our call\n    this.socket.on('call-answered', async ({ answerSDP }) => {\n      console.log('Call was answered, setting remote description');\n      try {\n        if (this.peerConnection) {\n          await this.peerConnection.setRemoteDescription(\n            new RTCSessionDescription(answerSDP)\n          );\n        }\n      } catch (error) {\n        console.error('Error setting remote description:', error);\n        this.endCall(true);\n      }\n    });\n    \n    // Handle ICE candidates from the other peer\n    this.socket.on('ice-candidate', async ({ candidate }) => {\n      try {\n        if (this.peerConnection && candidate) {\n          await this.peerConnection.addIceCandidate(\n            new RTCIceCandidate(candidate)\n          );\n          console.log('Added ICE candidate');\n        }\n      } catch (error) {\n        console.error('Error adding ICE candidate:', error);\n      }\n    });\n    \n    // Handle the other person ending the call\n    this.socket.on('call-ended', () => {\n      console.log('Call ended remotely');\n      this.endCall(false); // Don't notify the other person since they ended it\n    });\n    \n    // Handle call failure\n    this.socket.on('call-failed', ({ message, targetUserId }) => {\n      console.error('Call failed:', message);\n      this.callbacks.onCallEnded();\n      this.resetCallState();\n    });\n  }\n  \n  /**\n   * Initiate a call to another user\n   * @param {string} targetUserId - ID of the user to call\n   */\n  async makeCall(targetUserId) {\n    try {\n      // If there's already an active call, end it first\n      if (this.isCallActive) {\n        console.log('Ending current call before starting a new one');\n        this.endCall(true);\n      }\n      \n      console.log('Making call to user:', targetUserId);\n      this.targetUserId = targetUserId;\n      this.isCallInitiator = true;\n      this.isCallActive = true;\n      this.callbacks.onCallConnecting();\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Create an offer (SDP)\n      console.log('Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n      \n      // Set the offer as our local description\n      await this.peerConnection.setLocalDescription(offer);\n      \n      // Send the offer to the other user via signaling server\n      this.socket.emit('call-user', {\n        targetUserId: this.targetUserId,\n        offerSDP: offer,\n        callerUserId: this.userId\n      });\n      \n      console.log('Call offer sent');\n    } catch (error) {\n      console.error('Error making call:', error);\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * Accept an incoming call\n   */\n  async acceptCall() {\n    try {\n      console.log('Accepting incoming call from:', this.targetUserId);\n      this.isCallActive = true;\n      \n      // Make sure we have camera and microphone access\n      if (!this.localStream) {\n        await this.getLocalMedia();\n      }\n      \n      // Create peer connection\n      this.initializePeerConnection();\n      \n      // Set the remote description from the stored offer\n      console.log('Setting remote description from offer');\n      await this.peerConnection.setRemoteDescription(\n        new RTCSessionDescription(this.pendingOffer)\n      );\n      \n      // Create an answer\n      console.log('Creating answer...');\n      const answer = await this.peerConnection.createAnswer();\n      \n      // Set the answer as our local description\n      await this.peerConnection.setLocalDescription(answer);\n      \n      // Send the answer to the caller\n      this.socket.emit('call-accepted', {\n        targetUserId: this.targetUserId,\n        answerSDP: answer\n      });\n      \n      console.log('Call accepted, answer sent');\n      this.callbacks.onCallConnecting();\n    } catch (error) {\n      console.error('Error accepting call:', error);\n      this.endCall(true);\n    }\n  }\n  \n  /**\n   * End an ongoing call\n   * @param {boolean} notifyPeer - Whether to send end-call signal to the other user\n   */\n  endCall(notifyPeer = true) {\n    console.log('Ending call, notify peer:', notifyPeer);\n    \n    // Notify the other peer if needed\n    if (notifyPeer && this.socket && this.targetUserId) {\n      this.socket.emit('end-call', { targetUserId: this.targetUserId });\n    }\n    \n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n    \n    // Stop all media tracks\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Stopping track:', track.kind);\n        track.stop();\n      });\n      this.localStream = null;\n    }\n    \n    // Mark call as inactive\n    this.isCallActive = false;\n    \n    // Trigger callback\n    this.callbacks.onCallEnded();\n    \n    // Reset state\n    this.resetCallState();\n  }\n  \n  /**\n   * Reset call state variables\n   */\n  resetCallState() {\n    console.log('Resetting call state');\n    this.remoteStream = null;\n    this.targetUserId = null;\n    this.isCallInitiator = false;\n    this.pendingOffer = null;\n    this.isCallActive = false;\n  }\n  \n  /**\n   * Initialize WebRTC Peer Connection\n   */\n  initializePeerConnection() {\n    // ICE servers configuration (STUN/TURN)\n    const configuration = {\n      iceServers: [\n        // Google's public STUN server\n        { urls: 'stun:stun.l.google.com:19302' },\n        // For production, add TURN servers for better NAT traversal\n        ...(process.env.REACT_APP_TURN_SERVERS ? \n          JSON.parse(process.env.REACT_APP_TURN_SERVERS).map(server => ({\n            urls: server.urls,\n            username: server.username || '',\n            credential: server.credential || ''\n          })) : \n          []\n        )\n      ]\n    };\n    \n    console.log('Initializing peer connection with configuration:', configuration);\n    \n    // Create the RTCPeerConnection\n    this.peerConnection = new RTCPeerConnection(configuration);\n    \n    // Add local media tracks to the connection if we have them\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => {\n        console.log('Adding local track to peer connection:', track.kind);\n        this.peerConnection.addTrack(track, this.localStream);\n      });\n    }\n    \n    // Set up event handler for receiving remote media\n    this.peerConnection.ontrack = (event) => {\n      console.log('Received remote track:', event.track.kind);\n      \n      // Create remote stream if it doesn't exist\n      if (!this.remoteStream) {\n        this.remoteStream = new MediaStream();\n        this.callbacks.onRemoteStream(this.remoteStream);\n      }\n      \n      // Add all tracks from the remote stream\n      event.streams[0].getTracks().forEach(track => {\n        console.log('Adding remote track to remote stream:', track.kind);\n        this.remoteStream.addTrack(track);\n      });\n    };\n    \n    // Handle ICE candidates generated by our side\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('Generated ICE candidate for type:', event.candidate.type);\n        \n        // Send our ICE candidate to the other peer\n        this.socket.emit('ice-candidate', {\n          targetUserId: this.targetUserId,\n          candidate: event.candidate\n        });\n      }\n    };\n    \n    // Monitor connection state changes\n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection.iceConnectionState;\n      console.log('ICE connection state changed to:', state);\n      \n      this.callbacks.onICEConnectionStateChange(state);\n      \n      // Handle connection establishment\n      if (state === 'connected') {\n        console.log('Call connected successfully!');\n        this.callbacks.onCallStarted();\n      } \n      // Handle connection failures\n      else if (\n        state === 'disconnected' || \n        state === 'failed' ||\n        state === 'closed'\n      ) {\n        console.log('Connection lost or failed');\n        this.endCall(true);\n      }\n    };\n  }\n\n  /**\n   * Get local media stream\n   * @param {boolean|MediaTrackConstraints} videoConstraints - Video constraints\n   * @param {boolean|MediaTrackConstraints} audioConstraints - Audio constraints\n   * @returns {Promise<MediaStream>} Local media stream\n   */\n  async getLocalMedia(videoConstraints = true, audioConstraints = true) {\n    try {\n      console.log('Requesting access to local media with constraints:', {\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      // Request access to camera and microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: videoConstraints,\n        audio: audioConstraints\n      });\n      \n      console.log('Access to local media granted');\n      \n      this.localStream = stream;\n      this.callbacks.onLocalStream(stream);\n      return stream;\n    } catch (error) {\n      console.error('Error accessing media devices:', error);\n      \n      // Provide more specific error handling\n      if (error.name === 'NotAllowedError') {\n        // User denied camera/microphone access\n        this.callbacks.onLocalStream(null);\n      } else if (error.name === 'NotFoundError') {\n        // No camera/microphone found\n        this.callbacks.onLocalStream(null);\n      }\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Toggle audio track on/off\n   * @param {boolean} muted - Whether to mute audio\n   */\n  toggleAudio(muted) {\n    if (this.localStream) {\n      this.localStream.getAudioTracks().forEach(track => {\n        console.log(muted ? 'Muting audio' : 'Unmuting audio');\n        track.enabled = !muted;\n      });\n    }\n  }\n  \n  /**\n   * Toggle video track on/off\n   * @param {boolean} videoOff - Whether to turn off video\n   */\n  toggleVideo(videoOff) {\n    if (this.localStream) {\n      this.localStream.getVideoTracks().forEach(track => {\n        console.log(videoOff ? 'Turning off camera' : 'Turning on camera');\n        track.enabled = !videoOff;\n      });\n    }\n  }\n  \n  /**\n   * Disconnect from the WebRTC service\n   */\n  disconnect() {\n    console.log('Disconnecting WebRTC service');\n    \n    // End any active call\n    this.endCall(true);\n    \n    // Disconnect from signaling server\n    if (this.socket) {\n      this.socket.removeAllListeners();\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    \n    // Reset initialization status\n    this.isInitialized = false;\n    \n    // Clear user ID and reset callbacks\n    this.userId = null;\n    this.callbacks = {\n      onLocalStream: () => {},\n      onRemoteStream: () => {},\n      onCallStarted: () => {},\n      onCallEnded: () => {},\n      onCallConnecting: () => {},\n      onIncomingCall: () => {},\n      onICEConnectionStateChange: () => {}\n    };\n  }\n}\n\n// Create a singleton instance\nconst webRTCService = new WebRTCService();\nexport default webRTCService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}