{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver4/frontend2/src/components/HealthDataContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthProvider';\nimport api from './api';\n\n// Create health data context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthDataContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the health data context\nexport const useHealthData = () => {\n  _s();\n  return useContext(HealthDataContext);\n};\n_s(useHealthData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const HealthDataProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isAuthenticated\n  } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isGoogleFitConnected, setIsGoogleFitConnected] = useState(false);\n  const [healthMetrics, setHealthMetrics] = useState({\n    height: null,\n    weight: null,\n    BMI: null,\n    pressure: {\n      systolic: null,\n      diastolic: null\n    },\n    glucose: null,\n    sleep: {\n      sleep_time: null,\n      wake_time: null\n    }\n  });\n  const [symptoms, setSymptoms] = useState([]);\n  const [prediction, setPrediction] = useState(null);\n  const [biorhythmAdvice, setBiorhythmAdvice] = useState(null);\n  const [aiInsights, setAiInsights] = useState(null);\n  const [environmentAdvice, setEnvironmentAdvice] = useState(null);\n\n  // Track last refresh time\n  const [lastRefreshTime, setLastRefreshTime] = useState(null);\n\n  // Check Google Fit connection status\n  const checkGoogleFitConnection = async () => {\n    try {\n      // Check if we have local storage data indicating connection\n      const connected = localStorage.getItem('google_fit_connected') === 'true';\n      setIsGoogleFitConnected(connected);\n      return connected;\n    } catch (error) {\n      console.error('Failed to check Google Fit connection:', error);\n      return false;\n    }\n  };\n\n  // Connect to Google Fit and get OAuth2 token\n  const connectGoogleFit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Generate a mock OAuth code for demo purposes\n      const mockAuthCode = `demo_${Math.random().toString(36).substr(2, 9)}`;\n      try {\n        // Try real API first\n        await api.authenticateGoogleFit(mockAuthCode);\n      } catch (apiError) {\n        console.warn('API authentication failed:', apiError);\n        // Just continue - we'll use mock data\n      }\n\n      // Simulate connection delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Save connection status to local storage\n      localStorage.setItem('google_fit_connected', 'true');\n      setIsGoogleFitConnected(true);\n\n      // Fetch initial health data\n      await fetchHealthData();\n      return true;\n    } catch (error) {\n      console.error('Failed to connect Google Fit:', error);\n      setError('Failed to connect to Google Fit. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load mock health data for demo purposes\n  const loadMockHealthData = () => {\n    console.log(\"Loading mock health data\");\n    try {\n      const mockData = api.generateMockHealthData();\n\n      // Transform mock data into our expected format\n      const transformedData = {\n        height: mockData.height || null,\n        weight: mockData.weight || null,\n        BMI: mockData.BMI || null,\n        pressure: {\n          systolic: mockData.systolic || null,\n          diastolic: mockData.diastolic || null\n        },\n        glucose: mockData.glucose || null,\n        sleep: {\n          sleep_time: mockData.sleep_time || null,\n          wake_time: mockData.wake_time || null\n        }\n      };\n      setHealthMetrics(transformedData);\n\n      // Generate mock prediction\n      const mockPrediction = {\n        HealthScore: 85,\n        riskLevel: \"Low Risk\",\n        advice: \"Your metrics look quite good overall! To further improve your health score, consider incorporating more strength training and maintaining consistent sleep patterns.\"\n      };\n      setPrediction(mockPrediction);\n\n      // Set last refresh time\n      setLastRefreshTime(new Date());\n      return transformedData;\n    } catch (error) {\n      console.error('Failed to load mock health data:', error);\n      return null;\n    }\n  };\n\n  // Fetch health data from API\n  const fetchHealthData = async (options = {\n    days: 30\n  }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      if (!isAuthenticated) {\n        throw new Error('User not authenticated');\n      }\n      if (!isGoogleFitConnected) {\n        const connected = await checkGoogleFitConnection();\n        if (!connected) {\n          throw new Error('Google Fit not connected');\n        }\n      }\n      try {\n        // Try to call real API\n        const data = await api.fetchHealthData(options);\n\n        // Transform data into our expected format\n        const transformedData = {\n          height: data.height || null,\n          weight: data.weight || null,\n          BMI: data.BMI || null,\n          pressure: {\n            systolic: data.systolic || null,\n            diastolic: data.diastolic || null\n          },\n          glucose: data.glucose || null,\n          sleep: {\n            sleep_time: data.sleep_time || null,\n            wake_time: data.wake_time || null\n          }\n        };\n        setHealthMetrics(transformedData);\n\n        // Get prediction based on health metrics\n        if (data.systolic && data.diastolic && data.BMI && data.glucose && data.age) {\n          await getPrediction({\n            age: data.age,\n            BMI: data.BMI,\n            glucose: data.glucose,\n            sbp: data.systolic,\n            dbp: data.diastolic\n          });\n        }\n\n        // Set last refresh time\n        setLastRefreshTime(new Date());\n        return transformedData;\n      } catch (apiError) {\n        console.warn('API health data fetch failed:', apiError);\n        return loadMockHealthData();\n      }\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      setError(error.message || 'Failed to fetch health data');\n      // Try to load mock data anyway\n      return loadMockHealthData();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get prediction based on health metrics\n  const getPrediction = async metrics => {\n    try {\n      try {\n        // Try real API\n        const result = await api.getPrediction(metrics);\n        setPrediction(result);\n        return result;\n      } catch (apiError) {\n        console.warn('API prediction failed:', apiError);\n\n        // Generate mock prediction\n        const mockPrediction = {\n          HealthScore: Math.min(100, Math.max(0, 100 - (metrics.BMI < 18.5 || metrics.BMI >= 30 ? 15 : metrics.BMI >= 25 ? 5 : 0) - (metrics.sbp >= 140 || metrics.dbp >= 90 ? 15 : metrics.sbp >= 120 || metrics.dbp >= 80 ? 5 : 0) - (metrics.glucose >= 126 ? 15 : metrics.glucose >= 100 ? 5 : 0) - (metrics.age >= 60 ? 5 : 0))),\n          riskLevel: \"Generated Risk Level\",\n          advice: \"This is a mockup health score based on your metrics. In a production environment, this would be a comprehensive AI-generated health assessment.\"\n        };\n\n        // Update prediction state\n        setPrediction(mockPrediction);\n        return mockPrediction;\n      }\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      return null;\n    }\n  };\n\n  // Get biorhythm advice\n  const getBiorhythmAdvice = async (chronotype = 'morning', medicationTime = '08:00') => {\n    try {\n      try {\n        // Try real API first\n        const advice = await api.getBiorhythmAdvice(chronotype, medicationTime);\n        setBiorhythmAdvice(advice);\n        return advice;\n      } catch (apiError) {\n        console.warn('API biorhythm advice failed:', apiError);\n\n        // Generate mock biorhythm advice\n        const mockAdvice = api.generateMockBiorhythmAdvice(chronotype);\n\n        // Update state\n        setBiorhythmAdvice(mockAdvice);\n        return mockAdvice;\n      }\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      return null;\n    }\n  };\n\n  // Get environment advice\n  const getEnvironmentAdvice = async () => {\n    try {\n      try {\n        // Try real API first\n        const advice = await api.getEnvironmentAdvice();\n        setEnvironmentAdvice(advice);\n        return advice;\n      } catch (apiError) {\n        console.warn('API environment advice failed:', apiError);\n\n        // Generate mock environment advice\n        const mockAdvice = {\n          aqi: 3,\n          weather: \"Partly cloudy, 22Â°C\",\n          advice: \"Air quality is moderate today. If you're sensitive to pollution, consider limiting prolonged outdoor activities. Stay hydrated as temperatures are mild but comfortable.\"\n        };\n\n        // Update state\n        setEnvironmentAdvice(mockAdvice);\n        return mockAdvice;\n      }\n    } catch (error) {\n      console.error('Failed to get environment advice:', error);\n      return null;\n    }\n  };\n\n  // Add a new symptom and get AI insights\n  const addSymptom = async symptomData => {\n    try {\n      let newSymptom;\n      try {\n        // First try to add the symptom using the real API\n        newSymptom = await api.submitSymptom(symptomData);\n      } catch (apiError) {\n        console.warn('API symptom submission failed:', apiError);\n\n        // Create a mock symptom with the provided data\n        newSymptom = {\n          id: symptoms.length + 1,\n          ...symptomData,\n          created_at: new Date().toISOString()\n        };\n      }\n\n      // Update local symptoms list\n      setSymptoms(prevSymptoms => [newSymptom, ...prevSymptoms]);\n\n      // Get AI insights based on the new symptom and health metrics\n      const insightData = {\n        symptom: symptomData,\n        healthMetrics: healthMetrics\n      };\n      let insights;\n      try {\n        // Try to get real AI insights\n        insights = await api.getHealthInsight(insightData);\n      } catch (apiError) {\n        console.warn('API insights failed:', apiError);\n\n        // Generate mock insights based on symptom\n        insights = api.generateMockAIInsights();\n\n        // Customize mock insight based on symptom if possible\n        const symptomName = symptomData.symptom.toLowerCase();\n        if (symptomName.includes('headache')) {\n          insights.pattern = \"Your headaches tend to occur most often in the \" + symptomData.timeOfDay.toLowerCase() + \". They may be related to your screen time patterns.\";\n          insights.recommendation = \"Try the 20-20-20 rule (every 20 minutes, look 20 feet away for 20 seconds) and ensure you're staying hydrated throughout the day.\";\n        } else if (symptomName.includes('fatigue') || symptomName.includes('tired')) {\n          insights.pattern = \"Your fatigue seems to be most prominent in the \" + symptomData.timeOfDay.toLowerCase() + \". This could be related to your sleep patterns or glucose levels.\";\n          insights.recommendation = \"Try to maintain a consistent sleep schedule and consider eating smaller, more frequent meals to stabilize blood sugar levels.\";\n        } else if (symptomName.includes('nausea')) {\n          insights.pattern = \"Your nausea tends to occur in the \" + symptomData.timeOfDay.toLowerCase() + \", often after meals or during periods of stress.\";\n          insights.recommendation = \"Consider eating smaller, more frequent meals and practice stress reduction techniques like deep breathing before eating.\";\n        }\n      }\n      setAiInsights(insights);\n      return {\n        symptom: newSymptom,\n        insights\n      };\n    } catch (error) {\n      console.error('Failed to add symptom:', error);\n      throw error;\n    }\n  };\n\n  // Load mock symptoms for demo\n  const loadMockSymptoms = () => {\n    const mockSymptoms = api.generateMockSymptoms();\n    setSymptoms(mockSymptoms);\n\n    // Also load mock insights\n    const mockInsights = api.generateMockAIInsights();\n    setAiInsights(mockInsights);\n  };\n\n  // Load initial data when authenticated\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (isAuthenticated) {\n        const connected = await checkGoogleFitConnection();\n        // Only fetch health data if Google Fit is connected\n        if (connected) {\n          await fetchHealthData();\n          await getBiorhythmAdvice('morning'); // Load default biorhythm advice\n          // Also load mock symptoms for demo purposes\n          loadMockSymptoms();\n        }\n      }\n    };\n    loadInitialData();\n  }, [isAuthenticated]);\n\n  // Value to be provided to consuming components\n  const value = {\n    loading,\n    error,\n    isGoogleFitConnected,\n    healthMetrics,\n    symptoms,\n    prediction,\n    biorhythmAdvice,\n    aiInsights,\n    environmentAdvice,\n    lastRefreshTime,\n    connectGoogleFit,\n    fetchHealthData,\n    addSymptom,\n    getBiorhythmAdvice,\n    getPrediction,\n    getEnvironmentAdvice\n  };\n  return /*#__PURE__*/_jsxDEV(HealthDataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 393,\n    columnNumber: 5\n  }, this);\n};\n_s2(HealthDataProvider, \"VRgpDHEcTowKvvcFtgM6bcD6Srs=\", false, function () {\n  return [useAuth];\n});\n_c = HealthDataProvider;\nexport default HealthDataProvider;\nvar _c;\n$RefreshReg$(_c, \"HealthDataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","api","jsxDEV","_jsxDEV","HealthDataContext","useHealthData","_s","HealthDataProvider","children","_s2","isAuthenticated","loading","setLoading","error","setError","isGoogleFitConnected","setIsGoogleFitConnected","healthMetrics","setHealthMetrics","height","weight","BMI","pressure","systolic","diastolic","glucose","sleep","sleep_time","wake_time","symptoms","setSymptoms","prediction","setPrediction","biorhythmAdvice","setBiorhythmAdvice","aiInsights","setAiInsights","environmentAdvice","setEnvironmentAdvice","lastRefreshTime","setLastRefreshTime","checkGoogleFitConnection","connected","localStorage","getItem","console","connectGoogleFit","mockAuthCode","Math","random","toString","substr","authenticateGoogleFit","apiError","warn","Promise","resolve","setTimeout","setItem","fetchHealthData","loadMockHealthData","log","mockData","generateMockHealthData","transformedData","mockPrediction","HealthScore","riskLevel","advice","Date","options","days","Error","data","age","getPrediction","sbp","dbp","message","metrics","result","min","max","getBiorhythmAdvice","chronotype","medicationTime","mockAdvice","generateMockBiorhythmAdvice","getEnvironmentAdvice","aqi","weather","addSymptom","symptomData","newSymptom","submitSymptom","id","length","created_at","toISOString","prevSymptoms","insightData","symptom","insights","getHealthInsight","generateMockAIInsights","symptomName","toLowerCase","includes","pattern","timeOfDay","recommendation","loadMockSymptoms","mockSymptoms","generateMockSymptoms","mockInsights","loadInitialData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver4/frontend2/src/components/HealthDataContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useAuth } from './AuthProvider';\nimport api from './api';\n\n// Create health data context\nconst HealthDataContext = createContext();\n\n// Custom hook to use the health data context\nexport const useHealthData = () => {\n  return useContext(HealthDataContext);\n};\n\nexport const HealthDataProvider = ({ children }) => {\n  const { isAuthenticated } = useAuth();\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isGoogleFitConnected, setIsGoogleFitConnected] = useState(false);\n  const [healthMetrics, setHealthMetrics] = useState({\n    height: null,\n    weight: null,\n    BMI: null,\n    pressure: { systolic: null, diastolic: null },\n    glucose: null,\n    sleep: { sleep_time: null, wake_time: null }\n  });\n  const [symptoms, setSymptoms] = useState([]);\n  const [prediction, setPrediction] = useState(null);\n  const [biorhythmAdvice, setBiorhythmAdvice] = useState(null);\n  const [aiInsights, setAiInsights] = useState(null);\n  const [environmentAdvice, setEnvironmentAdvice] = useState(null);\n  \n  // Track last refresh time\n  const [lastRefreshTime, setLastRefreshTime] = useState(null);\n  \n  // Check Google Fit connection status\n  const checkGoogleFitConnection = async () => {\n    try {\n      // Check if we have local storage data indicating connection\n      const connected = localStorage.getItem('google_fit_connected') === 'true';\n      setIsGoogleFitConnected(connected);\n      return connected;\n    } catch (error) {\n      console.error('Failed to check Google Fit connection:', error);\n      return false;\n    }\n  };\n  \n  // Connect to Google Fit and get OAuth2 token\n  const connectGoogleFit = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Generate a mock OAuth code for demo purposes\n      const mockAuthCode = `demo_${Math.random().toString(36).substr(2, 9)}`;\n      \n      try {\n        // Try real API first\n        await api.authenticateGoogleFit(mockAuthCode);\n      } catch (apiError) {\n        console.warn('API authentication failed:', apiError);\n        // Just continue - we'll use mock data\n      }\n      \n      // Simulate connection delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Save connection status to local storage\n      localStorage.setItem('google_fit_connected', 'true');\n      setIsGoogleFitConnected(true);\n      \n      // Fetch initial health data\n      await fetchHealthData();\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to connect Google Fit:', error);\n      setError('Failed to connect to Google Fit. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Load mock health data for demo purposes\n  const loadMockHealthData = () => {\n    console.log(\"Loading mock health data\");\n    try {\n      const mockData = api.generateMockHealthData();\n      \n      // Transform mock data into our expected format\n      const transformedData = {\n        height: mockData.height || null,\n        weight: mockData.weight || null,\n        BMI: mockData.BMI || null,\n        pressure: { \n          systolic: mockData.systolic || null, \n          diastolic: mockData.diastolic || null \n        },\n        glucose: mockData.glucose || null,\n        sleep: {\n          sleep_time: mockData.sleep_time || null,\n          wake_time: mockData.wake_time || null\n        }\n      };\n      \n      setHealthMetrics(transformedData);\n      \n      // Generate mock prediction\n      const mockPrediction = {\n        HealthScore: 85,\n        riskLevel: \"Low Risk\",\n        advice: \"Your metrics look quite good overall! To further improve your health score, consider incorporating more strength training and maintaining consistent sleep patterns.\"\n      };\n      \n      setPrediction(mockPrediction);\n      \n      // Set last refresh time\n      setLastRefreshTime(new Date());\n      \n      return transformedData;\n    } catch (error) {\n      console.error('Failed to load mock health data:', error);\n      return null;\n    }\n  };\n  \n  // Fetch health data from API\n  const fetchHealthData = async (options = { days: 30 }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!isAuthenticated) {\n        throw new Error('User not authenticated');\n      }\n      \n      if (!isGoogleFitConnected) {\n        const connected = await checkGoogleFitConnection();\n        if (!connected) {\n          throw new Error('Google Fit not connected');\n        }\n      }\n      \n      try {\n        // Try to call real API\n        const data = await api.fetchHealthData(options);\n        \n        // Transform data into our expected format\n        const transformedData = {\n          height: data.height || null,\n          weight: data.weight || null,\n          BMI: data.BMI || null,\n          pressure: { \n            systolic: data.systolic || null, \n            diastolic: data.diastolic || null \n          },\n          glucose: data.glucose || null,\n          sleep: {\n            sleep_time: data.sleep_time || null,\n            wake_time: data.wake_time || null\n          }\n        };\n        \n        setHealthMetrics(transformedData);\n        \n        // Get prediction based on health metrics\n        if (data.systolic && data.diastolic && data.BMI && data.glucose && data.age) {\n          await getPrediction({\n            age: data.age,\n            BMI: data.BMI,\n            glucose: data.glucose,\n            sbp: data.systolic,\n            dbp: data.diastolic\n          });\n        }\n        \n        // Set last refresh time\n        setLastRefreshTime(new Date());\n        \n        return transformedData;\n      } catch (apiError) {\n        console.warn('API health data fetch failed:', apiError);\n        return loadMockHealthData();\n      }\n    } catch (error) {\n      console.error('Failed to fetch health data:', error);\n      setError(error.message || 'Failed to fetch health data');\n      // Try to load mock data anyway\n      return loadMockHealthData();\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Get prediction based on health metrics\n  const getPrediction = async (metrics) => {\n    try {\n      try {\n        // Try real API\n        const result = await api.getPrediction(metrics);\n        setPrediction(result);\n        return result;\n      } catch (apiError) {\n        console.warn('API prediction failed:', apiError);\n        \n        // Generate mock prediction\n        const mockPrediction = {\n          HealthScore: Math.min(100, Math.max(0, \n            100 - \n            (metrics.BMI < 18.5 || metrics.BMI >= 30 ? 15 : metrics.BMI >= 25 ? 5 : 0) -\n            (metrics.sbp >= 140 || metrics.dbp >= 90 ? 15 : metrics.sbp >= 120 || metrics.dbp >= 80 ? 5 : 0) -\n            (metrics.glucose >= 126 ? 15 : metrics.glucose >= 100 ? 5 : 0) -\n            (metrics.age >= 60 ? 5 : 0)\n          )),\n          riskLevel: \"Generated Risk Level\",\n          advice: \"This is a mockup health score based on your metrics. In a production environment, this would be a comprehensive AI-generated health assessment.\"\n        };\n        \n        // Update prediction state\n        setPrediction(mockPrediction);\n        return mockPrediction;\n      }\n    } catch (error) {\n      console.error('Failed to get prediction:', error);\n      return null;\n    }\n  };\n  \n  // Get biorhythm advice\n  const getBiorhythmAdvice = async (chronotype = 'morning', medicationTime = '08:00') => {\n    try {\n      try {\n        // Try real API first\n        const advice = await api.getBiorhythmAdvice(chronotype, medicationTime);\n        setBiorhythmAdvice(advice);\n        return advice;\n      } catch (apiError) {\n        console.warn('API biorhythm advice failed:', apiError);\n        \n        // Generate mock biorhythm advice\n        const mockAdvice = api.generateMockBiorhythmAdvice(chronotype);\n        \n        // Update state\n        setBiorhythmAdvice(mockAdvice);\n        return mockAdvice;\n      }\n    } catch (error) {\n      console.error('Failed to get biorhythm advice:', error);\n      return null;\n    }\n  };\n  \n  // Get environment advice\n  const getEnvironmentAdvice = async () => {\n    try {\n      try {\n        // Try real API first\n        const advice = await api.getEnvironmentAdvice();\n        setEnvironmentAdvice(advice);\n        return advice;\n      } catch (apiError) {\n        console.warn('API environment advice failed:', apiError);\n        \n        // Generate mock environment advice\n        const mockAdvice = {\n          aqi: 3,\n          weather: \"Partly cloudy, 22Â°C\",\n          advice: \"Air quality is moderate today. If you're sensitive to pollution, consider limiting prolonged outdoor activities. Stay hydrated as temperatures are mild but comfortable.\"\n        };\n        \n        // Update state\n        setEnvironmentAdvice(mockAdvice);\n        return mockAdvice;\n      }\n    } catch (error) {\n      console.error('Failed to get environment advice:', error);\n      return null;\n    }\n  };\n  \n  // Add a new symptom and get AI insights\n  const addSymptom = async (symptomData) => {\n    try {\n      let newSymptom;\n      \n      try {\n        // First try to add the symptom using the real API\n        newSymptom = await api.submitSymptom(symptomData);\n      } catch (apiError) {\n        console.warn('API symptom submission failed:', apiError);\n        \n        // Create a mock symptom with the provided data\n        newSymptom = {\n          id: symptoms.length + 1,\n          ...symptomData,\n          created_at: new Date().toISOString()\n        };\n      }\n      \n      // Update local symptoms list\n      setSymptoms(prevSymptoms => [newSymptom, ...prevSymptoms]);\n      \n      // Get AI insights based on the new symptom and health metrics\n      const insightData = {\n        symptom: symptomData,\n        healthMetrics: healthMetrics\n      };\n      \n      let insights;\n      try {\n        // Try to get real AI insights\n        insights = await api.getHealthInsight(insightData);\n      } catch (apiError) {\n        console.warn('API insights failed:', apiError);\n        \n        // Generate mock insights based on symptom\n        insights = api.generateMockAIInsights();\n        \n        // Customize mock insight based on symptom if possible\n        const symptomName = symptomData.symptom.toLowerCase();\n        if (symptomName.includes('headache')) {\n          insights.pattern = \"Your headaches tend to occur most often in the \" + symptomData.timeOfDay.toLowerCase() + \". They may be related to your screen time patterns.\";\n          insights.recommendation = \"Try the 20-20-20 rule (every 20 minutes, look 20 feet away for 20 seconds) and ensure you're staying hydrated throughout the day.\";\n        } else if (symptomName.includes('fatigue') || symptomName.includes('tired')) {\n          insights.pattern = \"Your fatigue seems to be most prominent in the \" + symptomData.timeOfDay.toLowerCase() + \". This could be related to your sleep patterns or glucose levels.\";\n          insights.recommendation = \"Try to maintain a consistent sleep schedule and consider eating smaller, more frequent meals to stabilize blood sugar levels.\";\n        } else if (symptomName.includes('nausea')) {\n          insights.pattern = \"Your nausea tends to occur in the \" + symptomData.timeOfDay.toLowerCase() + \", often after meals or during periods of stress.\";\n          insights.recommendation = \"Consider eating smaller, more frequent meals and practice stress reduction techniques like deep breathing before eating.\";\n        }\n      }\n      \n      setAiInsights(insights);\n      \n      return { symptom: newSymptom, insights };\n    } catch (error) {\n      console.error('Failed to add symptom:', error);\n      throw error;\n    }\n  };\n  \n  // Load mock symptoms for demo\n  const loadMockSymptoms = () => {\n    const mockSymptoms = api.generateMockSymptoms();\n    setSymptoms(mockSymptoms);\n    \n    // Also load mock insights\n    const mockInsights = api.generateMockAIInsights();\n    setAiInsights(mockInsights);\n  };\n  \n  // Load initial data when authenticated\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (isAuthenticated) {\n        const connected = await checkGoogleFitConnection();\n        // Only fetch health data if Google Fit is connected\n        if (connected) {\n          await fetchHealthData();\n          await getBiorhythmAdvice('morning'); // Load default biorhythm advice\n          // Also load mock symptoms for demo purposes\n          loadMockSymptoms();\n        }\n      }\n    };\n    \n    loadInitialData();\n  }, [isAuthenticated]);\n  \n  // Value to be provided to consuming components\n  const value = {\n    loading,\n    error,\n    isGoogleFitConnected,\n    healthMetrics,\n    symptoms,\n    prediction,\n    biorhythmAdvice,\n    aiInsights,\n    environmentAdvice,\n    lastRefreshTime,\n    connectGoogleFit,\n    fetchHealthData,\n    addSymptom,\n    getBiorhythmAdvice,\n    getPrediction,\n    getEnvironmentAdvice\n  };\n  \n  return (\n    <HealthDataContext.Provider value={value}>\n      {children}\n    </HealthDataContext.Provider>\n  );\n};\n\nexport default HealthDataProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}