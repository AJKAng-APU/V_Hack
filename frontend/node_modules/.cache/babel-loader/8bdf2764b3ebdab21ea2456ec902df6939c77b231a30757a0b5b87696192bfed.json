{"ast":null,"code":"var _jsxFileName = \"/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx\",\n  _s = $RefreshSig$();\n// Simplified VideoCallScreen.jsx - Fixed button handling and camera display\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus';\nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport { Users } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCallScreen = ({\n  isOpen,\n  onClose,\n  colors,\n  doctor\n}) => {\n  _s();\n  const {\n    isDarkMode\n  } = useTheme();\n\n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n\n  // Logging for debugging\n  const log = message => {\n    console.log(`[VideoCall] ${message}`);\n  };\n\n  // Function to safely toggle video state\n  const toggleVideo = videoOff => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n\n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n\n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    log(`Opening call with ${doctor.name}`);\n\n    // Set up callbacks\n    const callbacks = {\n      onLocalStream: stream => {\n        log(`Got local stream with ${stream.getTracks().length} tracks`);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          log('Set local video source');\n        }\n      },\n      onRemoteStream: stream => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n\n          // Force transition to active state\n          setCallStatus('active');\n\n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        setReconnectAttempt(0);\n        setErrorMessage('');\n\n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      onICEConnectionStateChange: state => {\n        log(`ICE connection state: ${state}`);\n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n        }\n      }\n    };\n\n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n\n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true).catch(error => {\n        log(`Media access error: ${error.message}`);\n        setErrorMessage(`Camera/mic access failed: ${error.message}`);\n      });\n    }\n\n    // Listen for call state changes\n    const unsubscribeCallState = webRTCService.on('callStateChanged', state => {\n      log(`Call state event: ${state}`);\n\n      // Never go backwards from active to connecting\n      if (state === 'active' || state === 'connecting' && callStatus !== 'active') {\n        setCallStatus(state);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n      }\n    });\n\n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', error => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      if (error.fatal) {\n        setCallStatus('ended');\n      }\n    });\n\n    // Set up mouse movement tracker for controls\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        if (!showControls) {\n          setShowControls(true);\n        }\n        clearTimeout(mouseMoveTimer);\n        mouseMoveTimer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    let mouseMoveTimer;\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n      }\n    }, 1000);\n\n    // Clean up\n    return () => {\n      var _localVideoRef$curren, _remoteVideoRef$curre;\n      log('Cleaning up call resources');\n      unsubscribeCallState();\n      unsubscribeError();\n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(mouseMoveTimer);\n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n\n      // Clean up video elements\n      if ((_localVideoRef$curren = localVideoRef.current) !== null && _localVideoRef$curren !== void 0 && _localVideoRef$curren.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      if ((_remoteVideoRef$curre = remoteVideoRef.current) !== null && _remoteVideoRef$curre !== void 0 && _remoteVideoRef$curre.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n\n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose]);\n\n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n\n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n\n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n\n  // Format seconds to MM:SS\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Force check remote video periodically\n  useEffect(() => {\n    if (!isOpen || !remoteVideoRef.current) return;\n    const checkInterval = setInterval(() => {\n      var _remoteVideoRef$curre2;\n      if ((_remoteVideoRef$curre2 = remoteVideoRef.current) !== null && _remoteVideoRef$curre2 !== void 0 && _remoteVideoRef$curre2.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0 && callStatus !== 'active') {\n          log(`Tracks detected (${tracks.length}), setting active`);\n          setCallStatus('active');\n        }\n\n        // Try playing if paused\n        if (remoteVideoRef.current.paused) {\n          remoteVideoRef.current.play().catch(() => {});\n        }\n      }\n    }, 500);\n    return () => clearInterval(checkInterval);\n  }, [isOpen, remoteVideoRef.current, callStatus]);\n  if (!isOpen) return null;\n\n  // Common video background\n  const videoBackground = isDarkMode ? colors.darkBg : '#000811';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 flex items-center justify-center\",\n    style: {\n      backgroundColor: 'rgba(0,0,0,0.85)',\n      backdropFilter: 'blur(10px)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full max-w-md relative overflow-hidden\",\n      children: [callStatus === 'ended' ? /*#__PURE__*/_jsxDEV(EndedState, {\n        doctor: doctor,\n        errorMessage: errorMessage,\n        callDuration: callDuration,\n        formatTime: formatTime,\n        colors: colors,\n        isDarkMode: isDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this) : callStatus === 'connecting' ? /*#__PURE__*/_jsxDEV(ConnectingState, {\n        doctor: doctor,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Active call view\n      _jsxDEV(\"div\", {\n        className: \"relative h-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 bg-black\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: isSpeakerOff,\n            className: \"w-full h-full object-cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this), isVideoOff && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 flex items-center justify-center\",\n            style: {\n              backgroundColor: videoBackground\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-32 h-32 rounded-full overflow-hidden border-4 border-white border-opacity-20\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: (doctor === null || doctor === void 0 ? void 0 : doctor.image) || '/User_1.png',\n                alt: (doctor === null || doctor === void 0 ? void 0 : doctor.name) || 'Doctor',\n                className: \"w-full h-full object-cover\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bottom-24 right-4 w-32 h-48 rounded-xl overflow-hidden border-4 border-white\",\n          style: {\n            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.8)',\n            zIndex: 20,\n            backgroundColor: 'black',\n            transform: showControls ? 'scale(1)' : 'scale(0.95)',\n            transition: 'all 0.3s ease'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            className: \"w-full h-full object-cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this), isVideoOff && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 flex items-center justify-center\",\n            style: {\n              backgroundColor: videoBackground\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-12 h-12 rounded-full bg-white bg-opacity-10 flex items-center justify-center\",\n              children: /*#__PURE__*/_jsxDEV(Users, {\n                size: 18,\n                className: \"text-white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CallHeader, {\n          doctor: doctor,\n          callDuration: callDuration,\n          formatTime: formatTime,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConnectionStatus, {\n          connectionQuality: connectionQuality,\n          showControls: showControls\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), connectionQuality !== 'good' && reconnectAttempt > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-4 py-2 rounded-lg\",\n          style: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            backdropFilter: 'blur(4px)',\n            zIndex: 30\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-8 h-8 rounded-full border-2 border-white border-opacity-20 border-t-white animate-spin mb-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-white font-medium\",\n              children: [\"Reconnecting\", reconnectAttempt > 1 ? ` (${reconnectAttempt})` : '', \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallControls, {\n        isMuted: isMuted,\n        setIsMuted: setIsMuted,\n        isVideoOff: isVideoOff,\n        setIsVideoOff: toggleVideo,\n        isSpeakerOff: isSpeakerOff,\n        setIsSpeakerOff: setIsSpeakerOff,\n        handleEndCall: handleEndCall,\n        showControls: showControls,\n        colors: colors,\n        callStatus: callStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCallScreen, \"ASGE0clFHhVhICYjG3aswJmCZ14=\", false, function () {\n  return [useTheme];\n});\n_c = VideoCallScreen;\nexport default VideoCallScreen;\nvar _c;\n$RefreshReg$(_c, \"VideoCallScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useTheme","webRTCService","CallControls","ConnectionStatus","CallHeader","ConnectingState","EndedState","Users","jsxDEV","_jsxDEV","VideoCallScreen","isOpen","onClose","colors","doctor","_s","isDarkMode","callStatus","setCallStatus","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isSpeakerOff","setIsSpeakerOff","callDuration","setCallDuration","showControls","setShowControls","connectionQuality","setConnectionQuality","reconnectAttempt","setReconnectAttempt","errorMessage","setErrorMessage","localVideoRef","remoteVideoRef","lastMoveTimeRef","callDurationTimer","log","message","console","toggleVideo","videoOff","mediaManager","hasLocalStream","handleEndCall","endCall","name","callbacks","onLocalStream","stream","getTracks","length","current","srcObject","onRemoteStream","muted","clearInterval","setInterval","prev","onCallStarted","onCallEnded","setTimeout","onICEConnectionStateChange","state","updateCallbacks","getLocalMedia","catch","error","unsubscribeCallState","on","unsubscribeError","fatal","handleMouseMove","now","Date","clearTimeout","mouseMoveTimer","window","addEventListener","isCallActive","_localVideoRef$curren","_remoteVideoRef$curre","removeEventListener","forEach","track","stop","toggleAudio","formatTime","seconds","mins","Math","floor","secs","toString","padStart","checkInterval","_remoteVideoRef$curre2","tracks","paused","play","videoBackground","darkBg","className","style","backgroundColor","backdropFilter","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","src","image","alt","boxShadow","zIndex","transform","transition","size","_c","$RefreshReg$"],"sources":["/Users/ang/V_Hack_Ver2/frontend/src/components/screens/Connect/VideoCallScreen.jsx"],"sourcesContent":["// Simplified VideoCallScreen.jsx - Fixed button handling and camera display\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useTheme } from '../../ThemeContext';\nimport webRTCService from '../../services/WebRTCService';\nimport CallControls from './CallControls';\nimport ConnectionStatus from './ConnectionStatus'; \nimport CallHeader from './CallHeader';\nimport ConnectingState from './ConnectingState';\nimport EndedState from './EndedState';\nimport { Users } from 'lucide-react';\n\nconst VideoCallScreen = ({ isOpen, onClose, colors, doctor }) => {\n  const { isDarkMode } = useTheme();\n  \n  // State variables\n  const [callStatus, setCallStatus] = useState('connecting'); // connecting, active, ended\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [isSpeakerOff, setIsSpeakerOff] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [showControls, setShowControls] = useState(true);\n  const [connectionQuality, setConnectionQuality] = useState('good'); // good, poor, unstable\n  const [reconnectAttempt, setReconnectAttempt] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  // Refs for video elements\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const lastMoveTimeRef = useRef(0);\n  const callDurationTimer = useRef(null);\n  \n  // Logging for debugging\n  const log = (message) => {\n    console.log(`[VideoCall] ${message}`);\n  };\n  \n  // Function to safely toggle video state\n  const toggleVideo = (videoOff) => {\n    log(`Toggle video: ${videoOff}`);\n    setIsVideoOff(videoOff);\n    \n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(videoOff);\n    }\n  };\n  \n  // Handle ending call\n  const handleEndCall = () => {\n    log('User ending call');\n    webRTCService.endCall(true);\n    onClose();\n  };\n  \n  // Initialize WebRTC when component mounts\n  useEffect(() => {\n    if (!isOpen || !doctor) return;\n    \n    log(`Opening call with ${doctor.name}`);\n    \n    // Set up callbacks\n    const callbacks = {\n      onLocalStream: (stream) => {\n        log(`Got local stream with ${stream.getTracks().length} tracks`);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n          log('Set local video source');\n        }\n      },\n      \n      onRemoteStream: (stream) => {\n        log(`Got remote stream with ${stream.getTracks().length} tracks`);\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = stream;\n          remoteVideoRef.current.muted = isSpeakerOff;\n          log('Set remote video source');\n          \n          // Force transition to active state\n          setCallStatus('active');\n          \n          // Start call timer\n          if (callDurationTimer.current) {\n            clearInterval(callDurationTimer.current);\n          }\n          \n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallStarted: () => {\n        log('Call started callback fired');\n        setCallStatus('active');\n        setReconnectAttempt(0);\n        setErrorMessage('');\n        \n        // Start call timer if not already started\n        if (!callDurationTimer.current) {\n          callDurationTimer.current = setInterval(() => {\n            setCallDuration(prev => prev + 1);\n          }, 1000);\n        }\n      },\n      \n      onCallEnded: () => {\n        log('Call ended callback fired');\n        setCallStatus('ended');\n        \n        if (callDurationTimer.current) {\n          clearInterval(callDurationTimer.current);\n          callDurationTimer.current = null;\n        }\n        \n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      },\n      \n      onICEConnectionStateChange: (state) => {\n        log(`ICE connection state: ${state}`);\n        \n        if (state === 'checking') {\n          setConnectionQuality('unstable');\n        } else if (state === 'connected' || state === 'completed') {\n          setConnectionQuality('good');\n          setCallStatus('active');\n        } else if (state === 'disconnected') {\n          setConnectionQuality('poor');\n          setReconnectAttempt(prev => prev + 1);\n        } else if (state === 'failed') {\n          setConnectionQuality('unstable');\n          setReconnectAttempt(prev => prev + 1);\n        }\n      }\n    };\n    \n    // Register callbacks\n    webRTCService.updateCallbacks(callbacks);\n    \n    // Ensure we have local media\n    if (!webRTCService.mediaManager.hasLocalStream()) {\n      log('Requesting camera and microphone access');\n      webRTCService.getLocalMedia(true, true)\n        .catch(error => {\n          log(`Media access error: ${error.message}`);\n          setErrorMessage(`Camera/mic access failed: ${error.message}`);\n        });\n    }\n    \n    // Listen for call state changes\n    const unsubscribeCallState = webRTCService.on('callStateChanged', (state) => {\n      log(`Call state event: ${state}`);\n      \n      // Never go backwards from active to connecting\n      if (state === 'active' || (state === 'connecting' && callStatus !== 'active')) {\n        setCallStatus(state);\n      } else if (state === 'ended') {\n        setCallStatus('ended');\n      }\n    });\n    \n    // Listen for errors\n    const unsubscribeError = webRTCService.on('error', (error) => {\n      log(`WebRTC error: ${error.message}`);\n      setErrorMessage(error.message || 'Call error');\n      \n      if (error.fatal) {\n        setCallStatus('ended');\n      }\n    });\n    \n    // Set up mouse movement tracker for controls\n    const handleMouseMove = () => {\n      const now = Date.now();\n      if (now - lastMoveTimeRef.current > 150) {\n        lastMoveTimeRef.current = now;\n        \n        if (!showControls) {\n          setShowControls(true);\n        }\n        \n        clearTimeout(mouseMoveTimer);\n        mouseMoveTimer = setTimeout(() => {\n          setShowControls(false);\n        }, 5000);\n      }\n    };\n    \n    let mouseMoveTimer;\n    window.addEventListener('mousemove', handleMouseMove);\n    \n    // Force active after a delay (resolves UI inconsistency)\n    setTimeout(() => {\n      if (webRTCService.isCallActive()) {\n        log('Force activating call after delay');\n        setCallStatus('active');\n      }\n    }, 1000);\n    \n    // Clean up\n    return () => {\n      log('Cleaning up call resources');\n      \n      unsubscribeCallState();\n      unsubscribeError();\n      \n      window.removeEventListener('mousemove', handleMouseMove);\n      clearTimeout(mouseMoveTimer);\n      \n      if (callDurationTimer.current) {\n        clearInterval(callDurationTimer.current);\n        callDurationTimer.current = null;\n      }\n      \n      // Clean up video elements\n      if (localVideoRef.current?.srcObject) {\n        const stream = localVideoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n        localVideoRef.current.srcObject = null;\n      }\n      \n      if (remoteVideoRef.current?.srcObject) {\n        remoteVideoRef.current.srcObject = null;\n      }\n      \n      // End the call\n      webRTCService.endCall(true);\n    };\n  }, [isOpen, doctor, onClose]);\n  \n  // Update WebRTC when audio mute state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleAudio(isMuted);\n    }\n  }, [isMuted]);\n  \n  // Update remote video muted state when isSpeakerOff changes\n  useEffect(() => {\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.muted = isSpeakerOff;\n    }\n  }, [isSpeakerOff]);\n  \n  // Update WebRTC when video state changes\n  useEffect(() => {\n    if (webRTCService && webRTCService.mediaManager.hasLocalStream()) {\n      webRTCService.toggleVideo(isVideoOff);\n    }\n  }, [isVideoOff]);\n  \n  // Format seconds to MM:SS\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  \n  // Force check remote video periodically\n  useEffect(() => {\n    if (!isOpen || !remoteVideoRef.current) return;\n    \n    const checkInterval = setInterval(() => {\n      if (remoteVideoRef.current?.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        if (tracks.length > 0 && callStatus !== 'active') {\n          log(`Tracks detected (${tracks.length}), setting active`);\n          setCallStatus('active');\n        }\n        \n        // Try playing if paused\n        if (remoteVideoRef.current.paused) {\n          remoteVideoRef.current.play().catch(() => {});\n        }\n      }\n    }, 500);\n    \n    return () => clearInterval(checkInterval);\n  }, [isOpen, remoteVideoRef.current, callStatus]);\n  \n  if (!isOpen) return null;\n  \n  // Common video background\n  const videoBackground = isDarkMode ? colors.darkBg : '#000811';\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\"\n         style={{ backgroundColor: 'rgba(0,0,0,0.85)', backdropFilter: 'blur(10px)' }}>\n      <div className=\"w-full h-full max-w-md relative overflow-hidden\">\n        \n        {callStatus === 'ended' ? (\n          <EndedState \n            doctor={doctor}\n            errorMessage={errorMessage} \n            callDuration={callDuration} \n            formatTime={formatTime}\n            colors={colors}\n            isDarkMode={isDarkMode}\n          />\n        ) : callStatus === 'connecting' ? (\n          <ConnectingState doctor={doctor} colors={colors} />\n        ) : (\n          // Active call view\n          <div className=\"relative h-full\">\n            {/* Remote video (main view) */}\n            <div className=\"absolute inset-0 bg-black\">\n              <video\n                ref={remoteVideoRef}\n                autoPlay\n                playsInline\n                muted={isSpeakerOff}\n                className=\"w-full h-full object-cover\"\n              />\n              \n              {/* Placeholder when video is off */}\n              {isVideoOff && (\n                <div className=\"absolute inset-0 flex items-center justify-center\"\n                     style={{ backgroundColor: videoBackground }}>\n                  <div className=\"w-32 h-32 rounded-full overflow-hidden border-4 border-white border-opacity-20\">\n                    <img src={doctor?.image || '/User_1.png'} alt={doctor?.name || 'Doctor'} className=\"w-full h-full object-cover\" />\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            {/* Local video (self view) */}\n            <div className=\"absolute bottom-24 right-4 w-32 h-48 rounded-xl overflow-hidden border-4 border-white\"\n                 style={{ \n                   boxShadow: '0 8px 32px rgba(0, 0, 0, 0.8)',\n                   zIndex: 20,\n                   backgroundColor: 'black',\n                   transform: showControls ? 'scale(1)' : 'scale(0.95)',\n                   transition: 'all 0.3s ease'\n                 }}>\n              <video\n                ref={localVideoRef}\n                autoPlay\n                playsInline\n                muted={true}\n                className=\"w-full h-full object-cover\"\n              />\n              \n              {/* Placeholder when local video is off */}\n              {isVideoOff && (\n                <div className=\"absolute inset-0 flex items-center justify-center\"\n                     style={{ backgroundColor: videoBackground }}>\n                  <div className=\"w-12 h-12 rounded-full bg-white bg-opacity-10 flex items-center justify-center\">\n                    <Users size={18} className=\"text-white\" />\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            {/* Header */}\n            <CallHeader \n              doctor={doctor}\n              callDuration={callDuration}\n              formatTime={formatTime}\n              showControls={showControls}\n            />\n            \n            {/* Connection Status */}\n            <ConnectionStatus\n              connectionQuality={connectionQuality}\n              showControls={showControls}\n            />\n            \n            {/* Reconnecting indicator */}\n            {connectionQuality !== 'good' && reconnectAttempt > 0 && (\n              <div \n                className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 px-4 py-2 rounded-lg\"\n                style={{ \n                  backgroundColor: 'rgba(0, 0, 0, 0.7)',\n                  backdropFilter: 'blur(4px)',\n                  zIndex: 30\n                }}\n              >\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"w-8 h-8 rounded-full border-2 border-white border-opacity-20 border-t-white animate-spin mb-2\"></div>\n                  <span className=\"text-sm text-white font-medium\">Reconnecting{reconnectAttempt > 1 ? ` (${reconnectAttempt})` : ''}...</span>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n        \n        {/* Controls - always visible */}\n        <CallControls\n          isMuted={isMuted}\n          setIsMuted={setIsMuted}\n          isVideoOff={isVideoOff}\n          setIsVideoOff={toggleVideo} \n          isSpeakerOff={isSpeakerOff}\n          setIsSpeakerOff={setIsSpeakerOff}\n          handleEndCall={handleEndCall}\n          showControls={showControls}\n          colors={colors}\n          callStatus={callStatus}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}